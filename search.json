[{"title":"Redis笔记","date":"2022-12-26T16:00:00.000Z","url":"/2022/12/27/%E5%B7%A5%E5%85%B7/Redis%E7%AC%94%E8%AE%B0/","tags":[["redis","/tags/redis/"],["消息队列","/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"]],"categories":[["工具","/categories/%E5%B7%A5%E5%85%B7/"]],"content":"Redis是什么 概括地说：Redis是一个内存数据库（in-memory data store，说白话就是所有的数据都在内存里放着，不过有些内存数据库产品如Redis，在关机、断电等特殊情况下会把数据dump到硬盘里以便后续恢复），但又可以当做缓存或者消息中间件去使用。 Redis怎么用 作为缓存使用 因为Redis的速度很快，所以可以拿他来缓存一些数据库请求数据、复杂的计算结果、API调用结果、用户的会话状态等，从而提高程序的执行速度。 作为消息中间件使用 在一个异步程序中，有7个线程负责从硬盘的不同目录去取待处理的数据，1个线程去对取来的数据做运算。这时候就可以把Redis当做消息队列来用，取数据的线程把每次取来的数据丢到Redis里面，处理数据的线程只管从Redis里面取数据然后加工，而Redis就起到一个容器+传送带的作用，每个线程都有明确的分工，整个程序的逻辑也更清晰。 Redis安装配置 安装server端 ubuntu、debian环境推荐直接使用apt工具安装 centos环境使用yum安装 允许远程访问 修改配置文件：/etc/redis/redis.conf 注销掉bind 127.0.0.1 ::1 再将protected-mode设置为no（允许来自外部的连接，即使未设置访问密码） 设置访问密码 若不创建新的redis用户账号，可以直接通过修改配置文件：/etc/redis/redis.conf 的方式设置default用户的访问密码，找到requirepass，取消注释并修改为自己的密码即可，重启redis-server服务生效 启停redis-server 使用redis-cli进行管理 连接redis-server 常用命令 更多访问控制配置可以参考：Redis 6.0 访问控制列表ACL说明"},{"title":"已安装程序（服务）的运行方式","date":"2022-11-02T16:00:00.000Z","url":"/2022/11/03/%E6%9D%82%E8%AE%B0/%E5%B7%B2%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%EF%BC%88%E6%9C%8D%E5%8A%A1%EF%BC%89%E7%9A%84%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F/","tags":[["备忘录","/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"Please enter the password to read the blog. Decrypt U2FsdGVkX19ZppfHTXtwyoM5hDwxMO1WPEqc4StSb3TRlnwIPfVMkrJ2/qk+xk4+n3R/Ly3dRb5xVaTj+3dScYLTv75wlynDChiWRvW1W3l6gZUYE7wsPYzOljldaug/lrSkmT9g2gVRoAqrEl4fmQ0CR9ZhP6GYfdcKK+7z9sNABO/dE2oRJtPwvOXwgSMURGfIwbtXd5NKi/RuSzRgbYF2EycRDq2icNOy4Wbs6eaL/HA/NIfu2jtMpg1eR2VCpaqjKp4PkaIqzluK6Ejbtt2odn6oUaj6TjMbmKcL7OlhDUaClSRLIcc6SRS8Qdi8I7oHaPixfuwn2HoKGZtP4aPQsstyQ28/FBryets2P+ljyhDLxj48icmSw8ryu3R23FIWOnQN4tUWlTjXblh+zpeH2GJsN+STuktzoLrX0xBAf9iUWz4fQz2WCbOdXmFO1Zzaf9I3mW/vBXi7U33vhEJnMZkz1R6qLDFLGhyGNfe7J0nyYVLd8IGCDPcrs8jvHtoU+grdIeQ8uzw14XX+2ldctKwxzxn04bHaoew406zulQI6V5RMOLF1sYNkOAGWyJnzm2Gy8Rfc8J6hC2Iv5CKzgQblZBNNtlqSk8ngpKrLoH7FdKsobhprjlmIZyo+kBS0qcIe5/Pe6E8GQ06LHaoFueV78VVYcZcNw48PHwcJ/11Gx6ufie6uWfrZ6Ahu2lJwwlvVJHecefsgUPbI0jwTT3vmpHAOODb1tmZHh4ixZL11omEc8TV79Xo+WOsK7YQ5BKkfC51ha1FSO1sBh2jOsw3o6CjT8arQoyVRjj5O04sG/sDzRez9jHNpQZZG2XCaLrx4kEGbKBxi423ae6+ZCdjuxEvJvoyEAAt2R7zUOCbc47ujh+uKqCKxp+StLB7RMeEPf6TzhOPFJCAdHiHiWFH+OJ8AF3Pss2lQlRKK8QLylJCUNio0XIvkw+rWcGA4OEQH4TBT9p+lk3tySITIV3YRLKWox8munMA1C797v24uFcVmT7TRKzPs40y4DIvipXojmAVFXvn01owgLVw6iG14JqWHHfm3qgsaa1oqMsjc3mfh0CrMbdbyvfBwHVlbjzaQA5HkZOxv7MnBO6GX5keGZ3kXvn1lvIfOXaZbV5M5Hs1Ih2IIUmMe1qVbRk5YbnWISG+ZJ0DgMXGUuKFVr2S2gJdmaamciQZNf7AwG+R1z8IS13g2vIRIe0MSjBeFict6t8voPYyYCxqpsW8T7kJlkb0J3UxVGrnFo15dHjCCsEPonDHnn5WZgtlV6rbjOL2slxAuffqr8N5ZMmpdRsh417F13knRDdB8Hqk32Za3U4d/TrVrDOif1zZCAcGyHC+jV3lcaVkuT07AsPW8EhkOLQ88Fhdc5mXuVRot4i0YI+N/DzEMavuGzZZq9rxr3zi5TieP/aM5N9xZ2XpYkQiCBP42+KTb7zLhsedxA5IZ3XjRuOp0h9t/Hnvc5TfUaoEbXLC0t2JrHvlKjCiua7IqEOCsi8Jcau2Y/LYmpDf9U+JTDA8hja3ZcOr3YfMS67aI31Of1rMLvDgIjaFmhkltgu0ln70ODRsaAC3amzMojqKbClJAay5KNyD1QkY7CHvZlDwOBrQvu40hxNSoPxojDYUiDfvItVyHwo86exbMe6u8Iu5hk2+sjtY9x23xXqBhNCdtEuyvafzovdk4Z7At6WdKdNgbY7VCOeCO0HSDJnlhMaptWg7Ml1n73697YuS4125WigBpmyGzp6cYqknOm6IjVTw3MuZaq0dtEBmgGJQX9kWsvxWE4hpjWa/d4YRHkxlVvVrXyEu/wR1+VdZ0b0ebPR0XLtEPs9NYYoz3j1Wh0adGYorqx7PK7Hn14OuVzzP1wrzSBeaiGKWEl3w3TpV7QDI5pn7p7SjRuDSyvH0zMCrNxk+mx8XOfLY6JL29cYG0zi/XeDqbZZo/Nf79Wjhh3vZtYmBBFxjk2vfBiTpIcuy7o8J9PU4jdxG/iKMj8LJU/9YImBoRqLnh2FRB72je1jwEOmAXfaqzSjMS2gQyksADhDNU+GpVPDY4c6ZARV4Na1Dn7ncSyDekOvLkAbKC1LhsF+R3h15hnmV2ZNTueNwx278O0n3S+dAh7BEAeGrEbP1bcXom237pf+hQqThZYtH8K/LNHaP0SUtQYE73x7SmBw7/+0pD5JpRZOHTAG74fg2zyA2aWAFcHfrcVK+Xou7Uv1899B16vpOeA5WubI5XiwIJXH0dqjIlJOG5nW2MBym8hSti65+rylPh6DkzK5HzZr4rUNdFVT+oW7UHRz8PMQK9hHtMAUU/m/HNb2BGwBlfRyBXGITR3Kolh0S87/YGoEDOw33aQV3TE56h/Ye0J9IiPRH4r6na6fpxK1yn3Xm51Q7yl55o4cBf8OjDagvRAKTK50xxFCWfPL80nPa7mK98+QH3q2A9C+0XSmqAEejuJOlE6py7+LPeEJsyGqU4BYbAX+iIYG7AZSwZtAm2uQXCR8aFg2aPTK24qemPWE4yBgWAKar1IL//rhHvIkqW7cZ+NlyT/axkF3vAH8pwma15nq0Si7buiXXgnag6rLSN8gbKobeuJQ1ieO/A32lm2koluLsEbE9IUW80/PwpAAmQViMIXTG5+uwbhrwhJR+38vOlAS8Fu1WenC2+gqd105JdfL0w7EJElc7Ko3xg2UB09ovVhiG/UhQWLa+MjbumHyqulSvkKHQdrn7GRs6XpzjvR/QMHMwLXuSrMrUL9qtRUpKFQHre64vtFaShmHsWWpWfbDMxVevU4X/DaW2w6MgPmK3Eht21GI3/712zBN8qrWT++cOxGHdPN8qXMl76oBXju0nuVxrl3dfcV3yeay86Ts1bbKojUUPCX1Af8xe5IVC2lw7uYltexSwDIQuc+fBeEAcnJTVeZw0zgpOpBWqsfiOf/YOhlUbtz0ZoFtGmIZC8bKaPp7OVavzvZHTLLDsEm/xPygl+cWU6nZWuQtHVbnh4v/frjrUmN3f8JhIPaLCIJXqweOGmrzh+wFS/VTFxjqLksjp/nG0qk6G18tRWcdGxvbsDHu+iK21UKSwK43P0jQzD2vE14I3hX2xS5A1t703QvhLpYvbdLQ5fFhncV8tFcClQ0b5ooj7sBndrWW2O3wO7OB8fb+8wG4yU2Kqf3Sqz6EXjda6W+xDgsHKRUv3M5cJsOCBSR8VQ4g8w/O5CY6Y6PtY6yqaawxgeCyYohEqgb4U/4btLo6IzY7XgGBuC8DkGxfAoaIBXf3yNou2pZxpzK05K/AzOZNZPZoGHbiLjpjtXpZtH3yKwqcvvw+yF5JLQZWrxvwDlNYFHnHpNQrV25Iu0UfsrmpgQNs9wVE8nHNnyp7k/w9P17jhvB0yWgRdreo214Q2hI6//rDnFtSMyyO1o0g3A64uM76HR1xu66BZJVpYtqbQOg4ETro1K84/QgLMctgilJQBQ8+lzj3wmNXPEVizxd/bnHPa3icrBpMAowvz8yHijVdk/NRRnp75FvKSEIdsO23XurHfgF+1HM0SvTdchHv18eqHtJXDpMKK/h5wZyKxkufxrURkZ0ikPDVOOOldbXEh1YJDyzHUWHYfWVDf7Mc6iZJAcmD6W0Aon75MmuQmKwPBaIrhmzESpAuTztET5WpaIHW5nPCDceUoI4QqzLWcpm6EpRQTwnMOgMXidOZwi2b+UtQfO92OhfEKiKeKsp6FxtmkSACa521IP3jX2BsQuLhZEOKbQWL5k/93wPrb8z3EiOXBbCjj6R7eY0tVvd5SeO+3OOdnCPw7xzoCAn2KGuq4B/QmKl2q4fdPC0jQ7thjkISLq84wdzTya9DcD03cC0auNuFo8jeWuMchQsJdxQ+eOj2ZNCYCIGvgT5jgAs2k3xAZ6/70oOb9KdatUwIvV3P/SBaUthYbhoE3xDc8QZDBG8+KlG9j9lIdieITtOlw62DvSfmulxRI+i3vltM+nJwtwE+ZYoqgOfrWyEpuyUDE+b4p7SVQrRg4EGsFJ2E5exgTh0OOuF3XcwC6y+tTZSM6RxbtD5tam9HoKzJS7kqX4xJ20kExUW2DznIHjLXxtMzhN6zO9kpdlWSNcR57gY8KvfjH28MMaglNWaACfiLIN5aWQZpJvZK+nEARVBTXs9iLkvDov/V7mdyLLS7Snw9wPME2N3B7neZDdMLr62YpvwHkgCReQQX1OL1F2gWtZpf4ly7GtbpzK1gDjYh2id/pPrWrgD2N4d4BDiniTWSuvG1OakQq1ui6HRS7oxO8nUA6q95LF26rb/ZcySRQKaf3xREm8FZsjHkRJuFOYppNKckpbui/wEddJrBY1byYOFV9e3bEyzqSoEDJKpCA1Aa9OqH3F4Z7NHqWXpF8TG+WuRsuZEeQ6GfKzaaqbUDZChKc+CIQexUq9ozsytY9X6QElhDretasat4xxAa5/Z6aJHq/bf6YkgpnIbrTFhjjkehtZb8RR7jKmJLcyDuz10hwibUtzOjPNwGQwFCt6xRaNQRCZofclWX35uhiMKXif6QnTqlLFs74UOmgowfmrl6Lt7ygfapwNUWfI0PXIEF6feNoxljPGfBkLj8ErtMbIfi6CbSkhtFKHdLIA3RhIJ3izMUJk4UuEZWOcqJxuLXWdHKZkZBuI7N3VqonYjI49ONetOJdG8katzIIQ4VkJIcD/xGc78bpPhdk4wg7RRCEU2A== "},{"title":"Java反序列化漏洞","date":"2022-07-12T16:00:00.000Z","url":"/2022/07/13/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/","tags":[["java","/tags/java/"],["反序列化","/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"]],"categories":[["漏洞研究","/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"]],"content":"Please enter the password to read the blog. Decrypt U2FsdGVkX1+QF4flMNE1HYO4J5CwfzejCmb/d8ILn5PA58wU12DoTBEh3fXlMtv083E7gtHodADiO82SFqlEE9VZQ0UAe5X6P5i/cIQiAGhkGrmtxGWou/vKBtt6nYAwfBVOBfFce5e3h0VUg2VdHoEFF4rsnjM1ATy/sEubdeADnn+HGJg/FZhElNcAyaVtCJpP/r6g8C2DWW74TCHk24c8KmQakWq4foOXIU52LpPfTOfYpd0lVch3TOkgd3WJp7xCt2FgqaswXdVSn53XOiEf+Umb+6nQe4P7soQmMIwUtstRBnfE/ZqbU/25+h1qItrLCcw26AbwlstH6XhqUt61yaFJSUeICR1RlSnnryAt0VdYSbD7k7cVT20hbLvmhCwkznYvSartRiDJ235LBsqbowUsR2i1drRmTtTgNwITRMRKfnUYWICtE076ork2UBpo1JCQWGBMoXRdbSCoajysGkyl9BB+fZzEPO7Jn9jQIaST7vCso5d6ZKrbJoy3J5RRsVcAjklVVCn0CaMT2pBcLdWAMUH62UTPxaZF+6unaFTwtXjzLNYM3qtVgEbaODeoKxgiVIMJ0YYKRgX8qIepAFsHOWEeR8tfR4T33kDW2cItv7wPF3AsrJfm8uluUzUpi5vu09OYaaGxqFIXVQU7qrMkpyc7LzUX9UP1ruh5eBVWq4W75SsvE2FVwMbFPb80IFM7TXlD8UWoW6i21dHo2ABiGeTbaC4/+XTg/qvV6CyIG9j1/nYeC0g+ZUJNUHVVLJ/ZGFTpEzn21RAl1NDRO1RAKbDhAbz0iFhpXZU2nSChJ+o31rz8hrKsgyqDCEsCehK8JemJxOTHL9KYxvGpZARLQQGHYjjrRgwcu+g2SlSYnJllDe80jMA93JqC1cWF21snNZpAIc7ZUqAXW94Wx6P+c48hP3Jgsw22/o8JwIG2nwJk9Wbf1/ybi08/7CdmhRv8BXx1gT1IHqFbiH2jLNeWgoEBr29tCBOeVdoJgJ0wqyJW+wCx73j5GfdFhYhbUevV59zGyNDQT97odANulpumizVeCeQtNTWn2w4p9MI2mDxqwLdCR2TIxbxV3JhiYjAAw4ddvjb6e8R2mKcTT3ZxqkpHHLaOogJSoveo4Uf2lnuGcACuvx/5pETrQOto8HDOMYJytvX5K1ayDak64nwYXDWe18b/s8/3QUyjo4eyn5jb7WVbFXEMn7MafGXv+k1F49OtKBJSr75/zZKXBE4Ml+i8+9OumSTBwDp1GuwFf6/r6wr3T3uEePV+ABLfDfmpzBqcN0EUFLLwfLtqOW41qj03tyYFC8QDVivXMA6CLpGkClidL5hu+wirfiNu4q8VNinsUk0l/E8ry7aSO8P2NHBfBninH+vFGZW4vVMorUIb0bW+iXfM0f328tg4ZAwbjcS2GwnhnjjjcTIr/Efy3+mK+Xy0GW+1K4Sk9LiAgXrDiMt4ySQEZ7ySvNZWSIQEwXFVIIPCxwBpqIOM+rf14Flh3KbcFCtW6fdk/bZO/iK4eaUhOImAmy6Vmm76lP4oR9AOS2f5Pr9ZTwzi/JvO/Qmag715iFAwalyla5F3LALPuwjI3NhjV9hiqa+MUN58esEv/JqhnhXh1A== "},{"title":"密码算法","date":"2021-08-08T16:00:00.000Z","url":"/2021/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/","tags":[["密码算法","/tags/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"对称加密 DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合； 3DES（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高； AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快，安全级别高，支持128、192、256、512位密钥的加密； RC2：分组加密，输入输出均为64位 RC4：流密码 Blowfish：区块加密算法 非对称加密 RSA：基于大数分解难题 随意选择两个大的质数p和q，p不等于q，计算N = pq. 根据欧拉函数，求得r=φ(N)=φ§φ(q)=(p-1)(q-1)。 选择一个小于r的整数e,是e与r互质。并求得e关于r的模反元素，命名为d。(求d令ed≡1(mod r))。(模反元素存在，当且仅当e与r互质） 将p和q的记录销毁。 其中(N，e)是公钥，(N，d)是私钥。 参考： DSA：基于整数有限域离散对数难题 ECC：椭圆曲线 "},{"title":"git笔记","date":"2021-07-25T16:00:00.000Z","url":"/2021/07/26/%E5%B7%A5%E5%85%B7/git%E7%AC%94%E8%AE%B0/","tags":[["git","/tags/git/"]],"categories":[["工具","/categories/%E5%B7%A5%E5%85%B7/"]],"content":"总体概览 与svn等集中式版本控制系统不同，git为分布式版本控制系统，每个开发者都保存整个项目的完整镜像 工作区间: 即我们创建的工程文件， 在编辑器可直观显示； 暂存区: 只能通过git GUI或git shell 窗口显示，提交代码、解决冲突的中转站； 本地仓库: 只能在git shell 窗口显示，连接本地代码跟远程代码的枢纽，不能联网时本地代码可先提交至该处； 远程仓库: 即保存我们代码的服务器，本文以公共版本控制系统：github为例，登录github账号后可直观显示； Git特点 直接记录快照，而非比较差异 ​ Git只关心文件数据的整体是否发生变化，而不是文件内容的具体差异。当文件整体发生变化时（比较指纹信息），则记录快照；若文件整体不变，则只保存上一版本快照的索引，避免重复存储。 几乎所有操作都是本地执行 ​ Git中绝大多数操作都只需要访问本地文件和资源，不用联网。 校验和（checksum）为文件的唯一标识 ​ 一旦文件的完整性收到损坏，那么git就能立刻察觉到。 多数操作仅添加数据 ​ 常用的Git操作大多仅仅是把数据添加到数据库，因为任何一种不可逆的操作（如删除）都会使回退变得更加困难。 文件的三种状态* ​ 对于任何一个文件，在Git中只有已提交（committed），已修改（modified）和已暂存（staged）三种状态。 ​ 已提交表示该文件已经被安全地保存在本地数据库； ​ 已修改表示修改了某个文件，但还没有提交保存； ​ 已暂存表示把已修改的文件放在下次提交时要保存的清单中了 使用方法 获得项目的Git仓库 git init 要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行： 初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。 如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交： git clone git clone用于从服务器上获取git仓库，并且获取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态。 如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字： 状态检查 查看当前项目的git状态 对比文件修改情况 git diff命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容 若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached（Git 1.6.1 及更高版本还允许使用git diff --staged，效果是相同的，但更好记些。） 查看提交历史 理解head和master 基础配置 查看git配置信息 配置远程地址 记住密码 工作区&lt;-&gt;暂存区 git add git add是一个多功能命令，它可以将项目文件纳入跟踪范围，也可以将所做的修改暂存到暂存区，git commit只会把已加入暂存区的文件版本提交到本地仓库，所以每对项目文件做一次修改，都要使用git add命令将它加入暂存区，否则提交的可能就是修改之前的版本了。 .gitignore 一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以在项目根目录下创建如下一个名为 .gitignore 的文件，列出要忽略的文件模式 文件 .gitignore 的格式规范如下： 所有空行或者以注释符号＃开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 * 匹配模式最后跟反斜杠/说明要忽略的是目录。 要忽略指定模式以外的文件或目录，可以在模式前加上叹号!取反 git rm git rm &lt;filename&gt;用来将不需要的文件同时从Git仓库和工作目录中删除，如果只是手动从工作目录中删除该文件，则还会在&quot;Changed but not updated&quot;中看到。 如果希望在工作目录中保留文件，只从git仓库中删除，那么可以加上--cached参数 误删文件恢复（回滚） git mv 常用于文件移动和重命名 git restore 暂存区&lt;-&gt;本地仓库 git commit 一般使用git comit -m &quot;your comment&quot;将代码提交到本地仓库，提交后工作区清空，再次修改则需要重新git add，如果不加-m参数，那么会启动文本编辑器以输入本次提交的说明。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。 尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，加上-a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。 本地仓库&lt;-&gt;远程仓库 git push 将本地的分支版本上传到远程并合并 git fetch 从远程仓库下载最新的commit，并且同时保留本地分支head和远程分支remotes，需要另外使用git merge合并分支 git pull 下载远程分支中最新的commit并合并（不建议使用，可能出现未解决代码冲突的情况） 操作撤销 在进行文件修改等操作后，使用git status查看状态，可以看到git给出的撤销提示 更多参考：git checkout，git restore 和 git reset reset版本回退 首先git log查看历史提交的版本信息 得到各个commit的id，即其哈希值 使用git reset --hard &lt;commitId&gt;切换到各个版本提交时的状态（清空暂存区），如果版本已提交到远程仓库，则需要在本地仓库回退后使用git push -f将操作强制同步到远程仓库。 但实际上回退之前的版本还是存在的，使用git reflog可以查看历史版本记录，找到已提交过的任何一个版本的commitId，通过commitId仍可以切回最新的未回退的版本。 revert版本回退 使用git reset回退公共远程分支的版本后，需要其他所有人手动用远程master分支覆盖本地master分支，显然，这不是优雅的回退方法，下面我们使用另个一个命令来回退版本： git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。 分支管理 分支新建、切换、删除 在一个分支进行文件修改、新建、删除等操作在commit后不会影响其他分支。 分支合并 在将branch2合并到branch1的过程中，branch2中新建文件、删除原有文件、修改原有文件等操作将同步到branch1，当两个分支都做出修改时，可能会出现代码冲突，这时候需要我们手动修改解决冲突后再次提交才能合并成功。 如果我们的主分支 master ，在 checkout 一个新的分支（bugfix）后，产生了新的提交，与此同时，其他的开发分支没有往 master 合并新的提交。这样，新的分支与 master 分支的最新提交历史是共同的祖先。 此时，merge bugfix 分支后， master 拥有 bugfix 全部的提交，所以当合并到master 分支后，master 的 HEAD 会直接指向最新的 bugfix 提交历史上。不会产生新的提交。git 采用的模式即称为 fast-forward 模式（快进模式） 如果我们想要产生新的提交，则需要在merge时使用--no-ff参数，禁用 fast-forward 这种合并策略 常见问题 新建GitHub仓库，第一次push时验证账号密码失败 一开始提示输入GitHub的用户名口令，正确输入后还是验证失败。这时候会出现新的登录窗口，提示通过OpenSSH登录到GitHub，这时候，输入GitHub用户名和access token（settings-developer settings-Personal access tokens）即可登录成功 配置免密登录  参考资料 理解git中的head和master 一次搞清 git checkout，git restore 和 git reset git merge branch 没有产生新的提交信息 Github配置SSH免密登录"},{"title":"kafka笔记","date":"2021-07-22T16:00:00.000Z","url":"/2021/07/23/%E5%B7%A5%E5%85%B7/kafka%E7%AC%94%E8%AE%B0/","tags":[["消息队列","/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"],["kafka","/tags/kafka/"]],"categories":[["工具","/categories/%E5%B7%A5%E5%85%B7/"]],"content":"消息队列模型 队列模型：最早的模型，消息先进先出，一条消息只能被一个消费者使用 发布-订阅模型：kafka使用的模型 基本概念 生产者（Producer）——产生消息的一方 消费者（Consumer）——处理消息的一方 代理（Broker）——可以看作是一个独立的 Kafka 实例。多个 Kafka Broker 组成一个 Kafka Cluster（集群） Topic（主题） : Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic(主题) 来消费消息。 Partition（分区） : Partition 属于 Topic 的一部分。一个 Topic 可以有多个 Partition ，并且同一 Topic 下的 Partition 可以分布在不同的 Broker 上，这也就表明一个 Topic 可以横跨多个 Broker 。"},{"title":"Golang-Web后端","date":"2021-07-21T16:00:00.000Z","url":"/2021/07/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-Web%E5%90%8E%E7%AB%AF/","tags":[["golang","/tags/golang/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"一个简单的web服务器 我们只需要使用http包的两个函数——HandleFunc()和ListenAndServe()，就可以启动一个简单的web服务。 ListenAndServer()监听服务端口并在http请求到来时调用HandleFunc()进行处理 HandleFunc()会根据http请求路径的不同调用不同的逻辑处理函数 Go作web服务器不需要nginx/apache，因为它直接监听了tcp端口，做了nginx的事情，而且这个Web服务内部有支持高并发的特性"},{"title":"Golang-mod包管理","date":"2021-07-20T16:00:00.000Z","url":"/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-mod%E5%8C%85%E7%AE%A1%E7%90%86/","tags":[["golang","/tags/golang/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"环境变量 GO111MODULE=on 时， go modules 功能开启，go依赖包的存放和查找位置为 $GOPATH/pkg/mod golang提供了 go mod 命令来使⽤ go modules 管理包 开启 go modules 功能后的包查找路径为项⽬⽬录/vendor-&gt;$GOPATH/pkg/mod 该⽅式下go项⽬源码不⼀定要保存在$GOPATH/src⽬录下 mod命令 命令 说明 download 下载依赖包 init 初始化go.mod verify 在当前目录初始化mod edit 编辑go.mod tidy 拉取缺少的模块，移除不⽤的模块 graph 打印模块依赖图 vendor 将依赖复制到项目的vendor目录下 verify 验证依赖是否正确 使用示例： 现有源文件如下 在项⽬⽬录下使⽤go mod init初始化项⽬，后⾯可以跟包名 如go mod init github.com/jacksonyoudi/gomodone 此时项⽬⽬录下多出了go.mod⽂件，但⽂件中还没有描述任何引⼊包 使⽤go mod tidy更新项⽬中的依赖包，此时源⽂件中的zap包被加⼊到mod⽂件中，且⽣成了最新的go.sum⽂件 go.mod⽂件⼀旦创建后，它的内容将会被go toolchain全⾯掌控。 go toolchain会在各类命令（如go get、go build、go mod等）执⾏时，修改和维护go.mod⽂件 go.mod 提供了 module、require、replace 和 exclude 四个命令 module 语句指定包的名字（路径） require 语句指定的依赖项模块（常用） replace 语句可以替换依赖项模块（常用) exclude 语句可以忽略依赖项模块 ⼀个典型go.mod⽂件 导入本地module: import 如下 go.mod 如下 之所以要是 github.com/myModule 的格式，是因为在 go1.13及以上版本 中， go module 名称规范要求路径的第一部分必须满足域名规范，否则可能会报类似 malformed module path &quot;myModule&quot;: missing dot in first path element 这样的错误。"},{"title":"Golang-并发","date":"2021-07-20T16:00:00.000Z","url":"/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E5%B9%B6%E5%8F%91/","tags":[["golang","/tags/golang/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"goroutine goroutine是Go并行设计的核心。goroutine说到底其实就是线程，但是它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部帮你实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便。 默认情况下，调度器仅使用单线程，也就是说只实现了并发。想要发挥多核处理器的并行，需要在我们的程序中显式调用 runtime.GOMAXPROCS(n) 告诉调度器同时使用多个线程。GOMAXPROCS 设置了同时运行逻辑代码的系统线程的最大数量，并返回之前的设置。如果n &lt; 1，不会改变当前设置。以后Go的新版本中调度得到改进后，这将被移除。 channel 在线程之间常常使用channel（通道）进行通信 channel的声明 定义一个channel时，也需要定义发送到channel的值的类型。注意，必须使用make 创建channel： channel通过操作符&lt;-来接收和发送数据 channel的阻塞机制 默认情况下，channel的发送和接收都是阻塞的，只有当发送方和接收方都准备好时才能成功传输数据。例如当发送线程想要发送数据到channel1，而暂时没有线程接收消息，那么该发送线程阻塞，直到有线程从channel1接收消息。 Buffered Channels 当我们不想让channel阻塞时，可以给每个channel设置缓存区 ch:= make(chan bool, 4)，创建了可以存储4个元素的bool 型channel。在这个channel 中，前4个元素可以无阻塞的写入。当写入第5个元素时，代码将会阻塞，直到其他goroutine从channel 中读取一些元素，腾出空间 range and close channel 和slice、map一样，可以使用range在for循环中读取出数值 for i := range c能够不断的读取channel里面的数据，直到该channel被显式的关闭（close(c)） 在消费方可以通过语法v, ok := &lt;-ch测试channel是否被关闭。如果ok返回false，那么说明channel已经没有任何数据并且已经被关闭。 记住应该在生产者的地方关闭channel，而不是消费的地方去关闭它，这样容易引起panic 另外记住一点的就是channel不像文件之类的，不需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束range循环之类的 select select 用于处理多个channel，与 switch 语句相比，select 有比较多的限制，其中最大的一条限制就是每个 case 语句里必须是一个 IO 操作，大致的结构如下： 在一个 select 语句中，Go语言会按顺序从头至尾评估每一个发送和接收的语句。 如果其中的任意一语句可以继续执行（即没有被阻塞），那么就从那些可以执行的语句中任意选择一条来使用。 如果没有任意一条语句可以执行（即所有的通道都被阻塞），那么有如下两种可能的情况： 如果给出了 default 语句，那么就会执行 default 语句，同时程序的执行会从 select 语句后的语句中恢复； 如果没有 default 语句，那么 select 语句将被阻塞，直到至少有一个通信可以进行下去。 select常用于做超时处理 运行结果如下： num = 0 num = 1 num = 2 num = 3 num = 4 超时 程序结束 runtime goroutine runtime包中有几个处理goroutine的函数： Goexit 退出当前执行的goroutine，但是defer函数还会继续调用 Gosched 让出当前goroutine的执行权限，调度器安排其他等待的任务运行，并在下次某个时候从该位置恢复执行。 NumCPU 返回 CPU 核数量 NumGoroutine 返回正在执行和排队的任务总数 GOMAXPROCS 用来设置可以并行计算的CPU核数的最大值，并返回之前的值。 "},{"title":"Golang-项目结构","date":"2021-07-16T16:00:00.000Z","url":"/2021/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/","tags":[["golang","/tags/golang/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"GOPATH下的src目录就是接下来开发程序的主要目录，所有的源码都是放在这个目录下面，那么一般我们的做法就是一个目录一个项目，例如: $GOPATH/src/mymath 表示mymath这个应用包或者可执行应用，这个根据package是main还是其他来决定，main的话就是可执行应用，其他的话就是应用包 所以当新建应用或者一个代码包时都是在src目录下新建一个文件夹，文件夹名称一般是代码包名称，当然也允许多级目录，例如在src下面新建了目录$GOPATH/src/github.com/astaxie/beedb 那么这个包路径就是&quot;github.com/astaxie/beedb&quot;，包名称是最后一个目录beedb Go程序是通过package来组织的 package &lt;pkgName&gt;（在我们的例子中是package main）这一行告诉我们当前文件属于哪个包，而包名main则告诉我们它是一个可独立运行的包，它在编译后会产生可执行文件。除了main包之外，其它的包最后都会生成*.a文件（也就是包文件）并放置在$GOPATH/pkg/$GOOS_$GOARCH中（以Mac为例就是$GOPATH/pkg/darwin_amd64） 每一个可独立运行的Go程序，必定包含一个package main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。 "},{"title":"Golang-语法基础","date":"2021-07-14T16:00:00.000Z","url":"/2021/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/","tags":[["golang","/tags/golang/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"变量 定义变量 Go对于已声明但未使用的变量会在编译阶段报错 变量类型 Boolean 在Go中，布尔值的类型为bool，值是true或false，默认为false 数值型 整数类型有无符号和带符号两种。Go同时支持int和uint，这两种类型的长度相同，但具体长度取决于不同编译器的实现。Go里面也有直接定义好位数的类型：rune, int8, int16, int32, int64和byte, uint8, uint16, uint32, uint64。其中rune是int32的别称，byte是uint8的别称。 需要注意的一点是，这些类型的变量之间不允许互相赋值或操作，不然会在编译时引起编译器报错 另外，尽管int的长度是32 bit, 但int 与 int32并不可以互用。 浮点数的类型有float32和float64两种（没有float类型），默认是float64 字符串 Go中的字符串都是采用UTF-8字符集编码。字符串是用一对双引号（&quot;&quot;）或反引号（``）括起来定义，它的类型是string 在Go中字符串是不可变的，例如下面的代码编译时会报错：cannot assign to s[0] 如果真的想要修改怎么办呢？下面的代码可以实现 Go中可以使用+操作符来连接两个字符串 修改字符串也可写为： 如果要声明一个多行的字符串怎么办？可以通过反引号（``）来声明： (``) 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。例如本例中会输出： 错误类型 Go内置有一个error类型，专门用来处理错误信息，Go的package里面还专门有一个包errors来处理错误 类型转换 常量 常量也就是在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。在Go程序中，常量可定义为数值、布尔值或字符串等类型。 分组声明 在Go语言中，同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明 例如下面的代码： 可以分组写成如下形式： 运算符 go的运算符和C相同 算术运算符 关系运算符 逻辑运算符 位运算符——&amp;（与）、|（或）、^（异或） array、slice、map array array就是数组，它的定义方式如下： 在[n]type中，n表示数组的长度，type表示存储元素的类型。对数组的操作和其它语言类似，都是通过[]来进行读取或赋值： 由于长度也是数组类型的一部分，因此[3]int与[4]int是不同的类型，数组也就不能改变长度。数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针。如果要使用指针，那么就需要用到后面介绍的slice类型了。 数组同样可以使用:=进行简短声明 slice 在很多应用场景中，数组并不能满足我们的需求。在初始定义数组时，我们并不知道需要多大的数组，因此我们就需要“动态数组”。在Go里面这种数据结构叫slice slice并不是真正意义上的动态数组，而是一个引用类型。slice总是指向一个底层array，slice的声明也可以像array一样，只是不需要长度。 slice可以从一个数组或一个已经存在的slice中再次声明。slice通过array[i:j]来获取，其中i是数组的开始位置，j是结束位置，但不包含array[j]，它的长度是j-i。 注意slice和数组在声明时的区别：声明数组时，方括号内写明了数组的长度或使用...自动计算长度，而声明slice时，方括号内没有任何字符。 slice是引用类型，所以当引用改变其中元素的值时，其它的所有引用都会改变该值，例如上面的aSlice和bSlice，如果修改了bSlice中元素的值，那么aSlice相对应的值也会改变。 对于slice有几个有用的内置函数： len 获取slice的长度 cap 获取slice的最大容量 append 向slice里面追加一个或者多个元素，然后返回一个和slice一样类型的slice copy 函数copy从源slice的src中复制元素到目标dst，并且返回复制的元素的个数 注：append函数会改变slice所引用的数组的内容，从而影响到引用同一数组的其它slice。 但当slice中没有剩余空间（即(cap-len) == 0）时，此时将动态分配新的数组空间。返回的slice数组指针将指向这个空间，而原数组的内容将保持不变；其它引用此数组的slice则不受影响。 map map也就是Python中字典的概念，它的格式为map[keyType]valueType 我们看下面的代码，map的读取和设置也类似slice一样，通过key来操作，只是slice的index只能是int类型，而map多了很多类型，可以是int，可以是string及所有完全定义了==与!=操作的类型。 这个map就像我们平常看到的表格一样，左边列是key，右边列是值 使用map过程中需要注意的几点： map是无序的，每次打印出来的map都会不一样，它不能通过index获取，而必须通过key获取 map的长度是不固定的，也就是和slice一样，也是一种引用类型 内置的len函数同样适用于map，返回map拥有的key的数量 map的值可以很方便的修改，通过numbers[&quot;one&quot;]=11可以很容易的把key为one的字典值改为11 map和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制 map的初始化可以通过key:val的方式初始化值，同时map内置有判断是否存在key的方式 通过delete删除map的元素： 上面说过了，map也是一种引用类型，如果两个map同时指向一个底层，那么一个改变，另一个也相应的改变： 遍历 Go语言中range关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。返回索引值和索引对应位置的值 分配存储空间 make用于内建类型（map、slice 和channel）的内存分配。new用于各种类型的内存分配。 make make返回一个Type类型的值，返回值取决于Type new new返回的是*Type类型指针，指针指向由零值填充的Type类型的内存空间 零值 “零值”所指并非空值，而是一种“变量未填充前”的默认值，通常为0。 此处罗列部分类型的“零值” 流程控制 条件判断 Go里面if条件判断语句中不需要括号，如下代码所示 多个条件的时候如下所示： Go中也有switch-case，特别之处是Go默认每个case后带有一个break，所以不需要我们自己添加break，但是可以使用fallthrough强制执行后面的case代码； 另外，case 后的表达式非常灵活，可以为数值、字符串或者其他表达式 循环控制 Go里面最强大的一个控制逻辑就是for，它即可以用来循环读取数据，又可以当作while来控制逻辑，还能迭代操作。它的语法如下： expression1、expression2和expression3都是表达式，其中expression1和expression3是变量声明或者函数调用返回值之类的，expression2是用来条件判断，expression1在循环开始之前调用，expression3在每轮循环结束之时调用。 一个例子比上面讲那么多更有用，那么我们看看下面的例子吧： 有些时候需要进行多个赋值操作，由于Go里面没有,操作符，那么可以使用平行赋值i, j = i+1, j-1 有些时候如果我们忽略expression1和expression3： 其中;也可以省略，那么就变成如下的代码了，是不是似曾相识？对，这就是while的功能。 在循环里面有两个关键操作break和continue ,break操作是跳出当前循环，continue是跳过本次循环。当嵌套过深的时候，break和continue还可以跟着标号，配合标签使用，即跳转至标签所指定的位置，详细参考如下例子： for配合range可以用于读取slice和map的数据： 由于 Go 支持 “多值返回”, 而对于“声明而未被调用”的变量, 编译器会报错, 在这种情况下, 可以使用_来丢弃不需要的返回值 例如 无条件跳转 Go有goto语句，可以用goto跳转到必须在当前函数内定义的标签。例如假设这样一个循环： 标签名是大小写敏感的。 import 我们在写Go代码的时候经常用到import这个命令用来导入包文件，而我们经常看到的方式参考如下： 然后我们代码里面可以通过如下的方式调用 上面这个fmt是Go语言的标准库，其实是去GOROOT环境变量指定目录下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块： 1.相对路径 import “./myModule” //当前文件同一目录的myModule目录，但是不建议这种方式来import 2.绝对路径 import “shorturl/model” //加载gopath/src/shorturl/model模块 上面展示了一些import常用的几种方式，但是还有一些特殊的import，让很多新手很费解，下面我们来一一讲解一下到底是怎么一回事 1.点操作 我们有时候会看到如下的方式导入包 这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，也就是前面你调用的fmt.Println(“hello world”)可以省略的写成Println(“hello world”) 2.别名操作 别名操作顾名思义我们可以把包命名成另一个我们用起来容易记忆的名字 别名操作的话调用包函数时前缀变成了我们的前缀，即f.Println(“hello world”) 3._操作 这个操作经常是让很多人费解的一个操作符，请看下面这个import _操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的init函数。 函数 函数声明 golang 的函数可以返回多个值 input 的 type1 和 type2 相同时，可以只写一个 output 可以省略变量名，只写类型 只有一个 output 时可以省略括号 没有output时就直接省略最后的返回信息 变参 Go函数支持变参。接受变参的函数是有着不定数量的参数的。为了做到这点，首先需要定义函数使其接受变参 arg ...int告诉Go这个函数接受不定数量的参数。注意，这些参数的类型全部是int。在函数体中，变量arg是一个int的slice 函数作为值、类型 函数作为参数传递，在使用上较为灵活，在一些通用接口的开发上也非常有效 指针 用法与C中的指针差不多 &amp;用于取地址 *获取指针指向的值 结构体 定义结构体 访问结构体成员 结构体变量或结构体指针都使用.操作符访问结构体成员 method 在定义函数的时候可以为其指定一个receiver，即该函数属于某一个结构体 struct+method==class method不止能用于结构体，还能用于任何其他的自定义类型,比如： 接口 定义方法 实例如下 通过接口，我们就可以使用一个接口来调用多个不同的方法 特性 defer defer 语句在函数结束前执行，常用于资源回收 当有多个 defer 语句时，由后向前执行 Panic和Recover panic用于产生一个异常，recover()位于defer语句中，用于捕获异常信息并从异常中恢复 error error是系统自带的一个接口类型的自定义类型，errors 包中包含了一个实现了 error 这个接口的结构体类型 errorString，我们可以直接使用包中的方法来自定义一些错误，从而返回我们希望被上层代码处理的错误信息 "},{"title":"Golang-安装配置","date":"2021-07-13T16:00:00.000Z","url":"/2021/07/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","tags":[["golang","/tags/golang/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"下载安装 下载地址： 安装后会自动添加环境变量 运行安装程序完成后查看go版本，验证是否已正确安装 配置 env配置 主要需要配置GOPATH（项目工作目录）、GOPROXY（go获取依赖包的代理服务器，proxy可以设置多个，⽤逗号,分隔，其中direct为直连）、GOPRIVATE（go get通过代理服务拉取私有仓库时，匹配那些不⾛代理的私有仓库） IDE配置 goland goland: Activation code: VSCode 配置步骤： 更多配置："},{"title":"网络代理设置","date":"2021-07-07T16:00:00.000Z","url":"/2021/07/08/%E6%9D%82%E8%AE%B0/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/","tags":[["备忘录","/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"],["网络代理","/tags/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"命令行代理设置 设置命令行代理（设置环境变量,命令行关闭后则失效） git代理设置 设置永久有效 go代理设置 参考： 方法1.配置命令行环境变量（临时） Bash (Linux or macOS) PowerShell (Windows) 方法2.配置用户环境变量 Mac/Linux Windows "},{"title":"TCP&IP","date":"2021-03-13T16:00:00.000Z","url":"/2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/TCP&IP/","tags":[["计算机网络","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"TCP 三次握手和四次挥手 TCP是可靠的，面向连接的传输层协议，端到端之间要进行TCP通信首先就要建立起TCP连接，当通信结束时断开TCP连接。这里TCP连接的建立与断开过程就分别由三次握手和四次挥手来完成。 三次握手 TCP连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。具体过程如下图所示。 第一次握手： 建立连接。客户端发送连接请求报文段，SYN位置为1，Sequence Number为随机数i；然后，客户端进入SYN_SENT状态，等待服务器的确认； 第二次握手： 服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为i+1 ( Sequence Number+1 )；同时，自己自己还要发送SYN请求信息，SYN设置为1，Sequence Number为j；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RCVD状态； 第三次握手： 客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为j+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。 在wireshark中可以分别查看ACK和Seq的实际值和相对值，第一个包的Seq相对值为0。 Seq的相对值为当前端已发送的TCP总段长，ACK的相对值为当前端已接收的TCP总段长（单位：字节），SYN标志位和FIN标志位也要占1字节（其他标志位如ACK不占）。 四次挥手 中断连接端可以是Client端，也可以是Server端。 假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说&quot;我Client端没有数据要发给你了&quot;，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，“告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，“告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，&quot;就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，“就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！ TCP和UDP的对比 有连接/无连接（可靠/不可靠） 有拆分合并/无拆分合并 有拥塞控制/无拥塞控制（发送速率的调整） 单播/多播 滑动窗口和流量控制 拥塞控制 http/https http各版本区别 http1.0 vs http1.1 http1.1开始，默认使用长连接（HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。） http1.1增加了一些错误状态码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。 SSL/TLS 首先由客户端发送Client Hello 消息到服务器，消息中主要包含了客户端支持的ciphersuites， TLS 版本信息和客户端随机数。注意此时是明文传输 服务器接收到消息后，返回自己支持的ciphersuites， TLS 版本，自己的数字证书和服务器端生成的随机数。注意此时是明文传输 客户端开始验证数字证书，可能会不断往上追溯 CA、CA 的 CA、CA 的 CA 的 CA，直到一个受信的 CA。验证完证书之后生成一个新的pre-master key，再使用证书中的公钥来对pre-master key进行加密，然后发送给服务器。注意此时是非对称加密传输 服务器接收到客户端发送过来的非对称加密的密文，使用自己的私钥进行解密，获得了pre-master key。注意此时是非对称加密传输 到这里为止，服务器和客户端都有三组数字，**分别是客户端的随机数、服务器的随机数和pre-master key。**其中由于客户端的随机数和服务器的随机数都是使用明文传输，所以这两个数字是有被暴露的风险的，但是由于pre-master key是使用非对称加密传输，十分安全，所以将这三者结合，使用之前协商好的特定的算法就可以生成一个密钥，这个密钥称为shared secert。也就是之后用来对称加密的密钥。 客户端在计算出对称加密的密钥之后，使用该密钥进行对称加密通信，告知服务器之后都使用该密钥进行对称加密。注意此时是对称加密传输 服务器接收到密文后，使用之前计算出的密钥来进行对称解密，解密成功之后，再使用该密钥进行对称加密通信。告知客户端密钥确认无误，可以使用该密钥进行通信。注意此时是对称加密传输 至此，整个TLS的握手过程完整，之后就可以开始对称加密的通信了。 参考文章 TCP协议中的三次握手和四次挥手(图解) 关于 TCP/IP，必知必会的10个问题 "},{"title":"如何做好应急响应","date":"2021-03-07T16:00:00.000Z","url":"/2021/03/08/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/","tags":[["应急响应","/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"]],"categories":[["蓝队技术","/categories/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/"]],"content":"整体思路 1）准备 准备检测工具、确定相关人员。 2）检测与分析 入侵事件研判，检索分析态势感知等安全设备产生入侵告警和相关日志，确定攻击者及威胁影响范围。 3）抑制缓解 封堵攻击源、控制威胁影响范围，不要让攻击的影响继续蔓延到其他的IT资产和业务环境。 4）攻击溯源 综合分析安全设备告警、日志，主机系统日志、开放服务日志，确定攻击者入侵路径，及时修补存在的漏洞。 5）业务恢复 入侵检查 Linux 常用命令 命令 作用 last 显示的是目前与过去登入系统的用户相关信息 lastlog 显示所有用户的登录情况 lastb 显示用户错误的登录列表 who 显示的是当前登录的用户 w 比who显示多一些内容，比如用户当前执行的命令，cpu信息 history 查看历史命令记录 检查步骤 检查账号及登录情况 见这篇文章：Linux系统加固 检查历史命令 检查网络连接/开放端口 检查异常进程 检查开机启动项 检查定时任务 检查服务 检查异常文件 查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“…”为名的文件夹具有隐藏属性 针对可疑文件可以使用stat查看创建修改时间 发现WebShell、远控木马的创建时间 找出同一时间范围内创建的文件？ 检查日志文件 日志默认存放位置：/var/log/ 查看日志配置情况：more /etc/rsyslog.conf 日志文件 说明 /var/log/cron 记录系统定时任务相关的日志 /var/log/message 记录Linux操作系统常见的系统和服务错误信息(首要检查对象) /var/log/syslog 只记录警告信息，常常是系统出问题的信息 /var/log/btmp 记录错误登录（登陆失败）日志；使用lastb命令查看 /var/log/lastlog 记录系统中所有用户最后一次成功登录时间，使用lastlog命令查看 /var/log/wtmp 永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件；用last命令来查看 /var/log/utmp 只记录当前登录用户的信息；使用w,who,users等命令来查询 /var/log/secure 记录验证和授权方面的信息，如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码 /var/log/apache2/error.log apache错误日志，如果安装有modsecurity那么其攻击拦截日志也存在这里 "},{"title":"Linux系统加固","date":"2021-03-06T16:00:00.000Z","url":"/2021/03/07/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/Linux%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA/","tags":[["系统配置","/tags/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"]],"categories":[["蓝队技术","/categories/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/"]],"content":"账号安全 账号相关文件 修改密码策略 vim /etc/login.defs 设置密码强度 vim /etc/pam.d/common-password 将原本的 修改为至少包含一个数字、一个小写字母、一个大写字母、一个特殊字符、且密码长度&gt;=8: 限制用户登陆 vim /etc/hosts.deny，若禁止192.168.0.1对服务器进行ssh的登陆，添加如下内容 限制登陆次数 应对暴力破解，我们可以限制登陆次数为5，超过5次登陆失败就锁定**。**vim /etc/pam.d/sshd，在 #%PAM-1.0 的下面，加入下面的内容，表示当密码输入错误达到3次，就锁定用户150秒，如果root用户输入密码错误达到3次，锁定300秒。 锁定用户的管理： 目录&amp;文件权限 存储用户信息的文件 在用户登陆中非常重要的三个文件 /etc/passwd 必须所有用户都可读，root用户可写 –rw-r—r— 权限值为644 /etc/shadow 只有root可读 –r-------- 权限值为400 /etc/group 必须所有用户都可读，root用户可写 –rw-r—r— 权限值为644 文件缺省权限设置 应用安全设置 FTP 禁止匿名FTP vim /etc/vsftpd/vsftpd.conf SSH 在sshd_config禁止root访问和使用sshv2来让ssh更加安全 vim /etc/ssh/sshd_config 设置SSH空闲超时退出时间,可降低未授权用户访问其他用户ssh会话的风险 编辑/etc/ssh/sshd_config，将ClientAliveInterval 设置为300到900，即5-15分钟，将ClientAliveCountMax设置为0-3之间。 设置较低的Max AuthTrimes参数将降低SSH服务器被暴力攻击成功的风险 在/etc/ssh/sshd_config中取消MaxAuthTries注释符号#，设置最大密码尝试失败次数3-6，建议为4： TELNET Telnet使用明文传输数据，存在安全隐患，应该避免使用 执行如下语句，查看telnet服务是否在运行 若正在运行则关闭Telnet服务，在/etc/xinetd.d/telnet中进行配置 网络设置 IPTABLES 根据需求合理配置防火墙 比如将INPUT链默认规则设为DROP，再添加规则将需要开放的端口设置为ACCEPT TCP SYN保护机制 表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击"},{"title":"渗透测试基础","date":"2021-03-03T16:00:00.000Z","url":"/2021/03/04/%E7%BA%A2%E9%98%9F%E6%8A%80%E6%9C%AF/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/","tags":[["渗透测试","/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"]],"categories":[["红队技术","/categories/%E7%BA%A2%E9%98%9F%E6%8A%80%E6%9C%AF/"]],"content":"Please enter the password to read the blog. Decrypt  "},{"title":"蓝队基础","date":"2021-03-03T16:00:00.000Z","url":"/2021/03/04/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/%E8%93%9D%E9%98%9F%E5%9F%BA%E7%A1%80/","tags":[["基础知识","/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"]],"categories":[["蓝队技术","/categories/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/"]],"content":"常见漏洞原理 XSS 原理 应用程序或API包括未经验证和未经转义的用户输入，作为HTML输出的一部分 危害 一个成功的攻击可以让攻击者在受害者的浏览器中执行任意的HTML和JavaScript。攻击者可以获取受害者的cookie等 JavaScript脚本可以跨域访问，&lt;script&gt;标签可以请求外部的js脚本，并且外部js脚本请求来之后是被认为与被攻击服务器同源的，所以可以访问当前服务器的cookie，所以反射型XSS的利用方式：构造恶意链接，将请求恶意js脚本的&lt;script&gt;作为参数传给服务器，在我们的恶意js脚本中可以使用加载图片的方式，将cookie作为参数传给我们的接收服务器 获取cookie： 三种类型比较 反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。 客户端的脚本程序可以动态地检查和修改页面内容，而不依赖于服务器端的数据。例如客户端如从 URL 中提取数据并在本地执行，如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的过滤和转义，那么应用程序就可能受到 DOM-based XSS 攻击。需要特别注意以下的用户输入源 document.URL、 location.hash、 location.search、 document.referrer 等。 存储型XSS攻击即攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。 防御方法 过滤输入和转义处理 在输入方面对所有用户提交内容进行输入验证，提交内容包括URL、查询关键字、http头、post数据等。 在输出方面，使用htmlentities()函数进行转义标签内的内容不会解释，直接显示。 CSRF 防御方法 检查referer：敏感操作来源不能为本站点之外 设置token：用以检查请求来自当前页面 referer检测绕过 1、http头不包含referer：使用data:协议 2、非空referer 不断尝试，如果后端只验证referer中是否存在指定关键字，那么我们通过新建文件夹使文件夹名为该域名，文件夹下存放csrf攻击代码即可 SSRF XXE漏洞 SSRF（服务器端请求伪造）是一种攻击模式 XXE（XML External Entity XML外部实体）则是一种攻击手法 XXE漏洞利用了SSRF，让服务器向其他服务器应用请求XML外部实体（DTD文件）。 RFI RFI（远程文件包含）也是SSRF的一种形式。 SQLI 报错注入函数 order by 注入 有些排序功能通过sql里的order by语句来实现，我们可以利用这一点，控制order by后面的内容 order by配合union进行盲注：通过排序结果逐字符比较得到结果 常见安全工具 扫描工具 AWVS NESSUS nmap sqlmap 安全设备 WAF 本地WAF modSecurity 作为nginx的模块，需要编译安装 … 云WAF 无需用户更新 成本低 阿里云WAF… 部署方式 反向代理 正向代理隐藏真实客户端，反向代理隐藏真实服务端 步骤 购买阿里云WAF产品 在阿里云WAF中添加域名 在服务器中设置防火墙放行来自WAF的流量 修改DNS解析 蜜罐 Github 开源蜜罐 —— HFish 安装包 安装成功后启动服务即可 蜜罐的作用 获取攻击者IP、攻击过程等信息 溯源取证（jsonp获取攻击者cookie… IPS/IDS 入侵防御系统 / 入侵检测系统。IDS工作在网络层旁路，IPS则可旁路可串结（出口/入口）。IDS只能检测，IPS则是具备截断能力的IDS。 IPS的旁路防护原理很简单，其经典代表如开源的Snort，就是在网络上分析流量，发现符合规则的流量则冒充服务端回包响应客户端实现阻断或者替换的目的，这是一种典型的链路劫持手法。 绕过方法 TCP分片、IP分片等 运维/应急响应&amp;Linux入侵检测/) 态势感知平台 多种防护系统、流量监测系统的接入整合及可视化，监控全局流量，攻击事件告警等 常见网络技术 CDN CDN是一个分布式边缘网络，网站A使用了CDN，用户根据域名访问网站A时，如果用户本地DNS没有网站A的路由信息，则向DNS授权服务器请求网站A的IP地址，而DNS授权服务器则根据用户的位置，选择速度最快的CDN加速节点的IP地址传回给用户，那么用户即访问了该CDN节点，而非源站。当CDN节点中没有缓存源站的部分内容时，则会向源站请求。 判断目标网站是否使用CDN 使用多地ping该网站域名，若得到的IP不同，则其可能使用了CDN nslookup返回的域名解析对应多个IP多半是使用了CDN 绕过CDN获取网站真实IP DNS缓存历史查询网站 网络空间搜索引擎 fofa 钟馗之眼 … 查询子域名IP，可能子站并没有做CDN，可能与主站处于同一C段 "},{"title":"Python实战篇","date":"2021-01-30T16:00:00.000Z","url":"/2021/01/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%AE%9E%E6%88%98%E7%AF%87/","tags":[["Python","/tags/Python/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"Python爬虫 从中南大学校内导航中爬取校内网站名称和对应的链接。 爬虫程序主要分为html页面获取和数据提取两个部分，接下来分别说明其实现方法。 获取网页 使用requests库来获取网站的html页面 encoding是从http中的header中的charset字段中提取的编码方式，若header中没有charset字段则默认为ISO-8859-1编码模式，则无法解析中文，产生乱码 提取内容 利用BeautifulSoup库可以很方便地对从HTML或XML文档中提取我们想要的数据。 利用以上代码就可以实现一个简单的爬虫程序了。 爬虫的原理比较简单，关键在于如何对爬取到的数据进行筛选的过程。 之后可以尝试对网页中的链接进行递归爬取等 链接去重 并发爬取 爬虫框架 scrapy"},{"title":"Python基础篇","date":"2021-01-29T16:00:00.000Z","url":"/2021/01/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%9F%BA%E7%A1%80%E7%AF%87/","tags":[["备忘录","/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"],["Python","/tags/Python/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"输入输出 输出 输入 常用字符串函数 常用数据结构 list-列表 tuple-元祖 dict-字典 set-集合 类型转换函数 文件操作 文件读写 文件读取和写入的常规步骤如下 open()函数用于打开一个文件，并返回一个文件对象 文件对象的常用方法有 mode如下表所示 字符 含义 文件不存在时 r 打开文件以阅读（默认模式） 报错 w 打开文件以写入，覆盖原文件 创建 a 打开写入，追加到文件末尾 创建 b 二进制模式，与r w一起使用 t 文本模式（默认就有，不用自己写） + 打开文件进行更新（读取和写入） 目录操作 import 的使用 ​ 一个.py文件可以看作是一个模块（module），使用import命令将一个模块引入当前python文件，则可以在当前文件使用引入模块中定义的变量，函数等。 一个包（package）是模块或包的集合，其本质是一个含有__init__.py的文件夹，且__init__.py可以为空。 序列化和反序列化 序列化 HTTP 发起请求 要在python程序中访问外部网站，可以使用requests模块，这是一个功能强大的http请求工具 处理请求 函数装饰器 在python中，一切皆对象，包括函数。所以我们可以把函数赋值给变量，也可以把函数作为另一个函数的参数或者返回值，这就是python函数装饰器的基础。python中的装饰器也是一个函数，这个函数的作用是为其他函数增加一些流程或者说行为，也就是装饰。 python函数装饰器常用于权限认证以及记录日志 并发 多进程 考虑到跨平台编程的需求，使用multiprocessing模块中的Process类进行子进程的创建和启动 在多个进程进行同步时，则需要用到进程间通信 多线程 使用threading模块创建多线程程序，创建线程的方式有从函数启动和从类启动 从函数启动的示例代码如下： 从类启动的示例代码如下： 协程 使用async和await关键字进行声明 例如： ps: await必须在使用async def声明的函数中使用 单元测试 对函数进行测试，给他一个输入，验证他的输出是否符合预期 在 unittest 的模块中，还有特别丰富的测试方式，常用如下： assert 含义 assertEqual(a, b) a == b assertNotEqual(a, b) a != b assertTrue(condition) condition 是不是 True assertFalse(condition) condition 是不是 False assertGreater(a, b) a &gt; b assertGreaterThan(a, b) a &gt;= b assertLess(a, b) a &lt; b assertLessEqual(a, b) a &lt;= b assertIs(a, b) a is b，a 和 b 是不是同一对象 assertIsNot(a, b) a is not b，a 和 b 是不是不同对象 assertIsNone(a) a is None，a 是不是 None assertIsNotNone(a) a is not None，a 不是 None？ assertIn(a, b) a in b, a 在 b 里面？ assertNotIn(a, b) a not in b，a 不在 b 里？ assertRaises(err) 通常和 with 一起用，判断 with 里的功能是否会报错 一些特性 问号表达式在python中的实现 在python中，and 和 or 运算符并不是返回bool值，而是返回表达式中使结果确定的那个值。例如 5 and 1 的结果是1，因为 and 运算符只有在两边都不为 0 的时候运算结果才不为 0，从左往右判断，5不为0满足条件，1不为0确定了表达式结果不为0，因此表达式的结果为1。又比如表达式 2 or 1 的结果为 2 ，因为 or 运算符只需要表达式两边有一方不为0即表达式结果不为0，因此表达式判断到 2 的时候，发现2不为0，那么表达式结果就确定了（True），因此把 2 作为返回值。 利用这个特性，我们就可以实现问号表达式了 运行结果如下： python3 VS python2 在编码上的区别 在 Python2 中，字符串有两个类型，一个是 unicode，一个是 str，前者表示文本字符串，后者表示字节序列，不过两者并没有明显的界限，开发时容易出现编码错误。在 Python3 中对两者做了严格区分，分别用 str 表示字符串，bytes 表示字节序列，任何需要写入文本或者网络传输的数据都只接收字节序列，这就从源头上阻止了编码错误的问题。 要指定一个字符串为 bytes 类型，有三种方法： 字符串前（引号前）加上前缀b ，但这种方法仅支持 ASCII 字符串； 使用encode()函数 使用bytes()构造函数 C语言的 printf 函数不支持 Unicode 字符串的输出。在 python3 中想要调用C语言的printf函数，需要将参数由 Unicode 字符串转化为字节序列"},{"title":"PHP函数漏洞及其绕过姿势","date":"2020-08-22T16:00:00.000Z","url":"/2020/08/23/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/PHP%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/","tags":[["PHP","/tags/PHP/"],["代码审计","/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"]],"categories":[["漏洞研究","/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"]],"content":"MD5、SHA1 由于php语言特性，在进行md5、sha1值的比较时，可能存在漏洞如下： 1、php的md5()，sha1()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL，也就是相等的。 2、因为php的弱类型特性，哈希结果为0e...的，在进行弱比较时会被当做科学计数法的0处理。以下字符串的md5值都是0e开头的： intval 得到一个数的整型值。 比如在以下代码中 即可利用 intval 函数对字符串型16进制数的处理漏洞进行绕过 is_numeric PHP的is_numeric()函数会判断参数是否为数字或者数字字符串 绕过方法：在要输入的数字后加上%20（空格），或者在数字前或后加上%00（终止符） mt_rand 生成伪随机数，利用php_mt_seed可以通过已知随机数数列爆破出随机数种子"},{"title":"国赛2020WriteUp","date":"2020-08-21T16:00:00.000Z","url":"/2020/08/22/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E5%9B%BD%E8%B5%9B2020WriteUp/","tags":[["CTF","/tags/CTF/"],["WriteUp","/tags/WriteUp/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"Please enter the password to read the blog. Decrypt  "},{"title":"压缩包破解","date":"2020-08-17T16:00:00.000Z","url":"/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E5%8E%8B%E7%BC%A9%E5%8C%85%E7%A0%B4%E8%A7%A3/","tags":[["CTF","/tags/CTF/"],["WriteUp","/tags/WriteUp/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"Please enter the password to read the blog. Decrypt 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 "},{"title":"文件包含类题目记录","date":"2020-08-17T16:00:00.000Z","url":"/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/","tags":[["CTF","/tags/CTF/"],["WriteUp","/tags/WriteUp/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"[“百度杯” 2017 二月场] include 简单的文件包含题。 在phpinfo中可以发现 allow_url_fopen关闭，allow_url_include开启，可能可以通过php伪协议 php://input 来执行我们的php代码 尝试发现确实可行 现在我们就可以任意执行php代码了 对当前文件夹进行目录遍历 输出文件内容即可得到flag "},{"title":"sql注入笔记","date":"2020-08-09T16:00:00.000Z","url":"/2020/08/10/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/","tags":[["sqli","/tags/sqli/"]],"categories":[["漏洞研究","/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"]],"content":"Please enter the password to read the blog. Decrypt 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 "},{"title":"文件上传类题目记录","date":"2020-08-03T16:00:00.000Z","url":"/2020/08/04/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/","tags":[["CTF","/tags/CTF/"],["WriteUp","/tags/WriteUp/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"[MRCTF2020] 你传你🐎呢 尝试上传一些文件，发现只有.jpg 和 .htaccess 后缀的文件能够上传，Content-Type需要修改为 image/jpeg .htaccess文件的利用： 通过上传一个.htaccess,能够将后面上传的jpg文件解析为php，这样就可以使用蚁剑连接 这里代码的意思是只要文件名中包含1，那么就当成php处理。 然后我们再将一句话木马文件名修改为1.jpg，上传，即可成功访问。"},{"title":"XSS笔记","date":"2020-08-02T16:00:00.000Z","url":"/2020/08/03/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/XSS%E7%AC%94%E8%AE%B0/","tags":[["XSS","/tags/XSS/"]],"categories":[["漏洞研究","/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"]],"content":"常用payload 一些绕过方法： XSS的防御 过滤输入 对输入和URL参数进行过滤(白名单和黑名单) 转义输出 1&gt; 作为body文本输出，作为html标签的属性输出： 比如： 此时的转义规则如下： &lt; 转成 &amp;lt; &gt; 转成 &amp;gt; &amp; 转成 &amp;amp; &quot; 转成 &amp;quot; ’ 转成 &amp;#39; 2&gt; javascript事件 除了上面的那些转义之外，还要附加上下面的转义： \\ 转成\\\\ / 转成 \\/ ; 转成 ；(全角分号)"},{"title":"OSI模型","date":"2020-08-01T16:00:00.000Z","url":"/2020/08/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/OSI%E6%A8%A1%E5%9E%8B/","tags":[["计算机网络","/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"OSI 模型 应用层 能产生数据流量的并且能与用户交互的程序 记事本不是，因为不能产生数据流量 表示层 传递消息的语法和语义（不同内部数据表示法 编码方法 压缩 加密） 会话层 对话控制（记录该由谁来发送数据） 令牌管理（禁止双方同时执行同一关键操作） 同步功能（设置断点，崩溃恢复） 传输层 真正的端到端的层。解决的问题：进程与进程之间传输、识别进程 网络层 控制子网的运行 ，如何将数据包从源端路由到接收方。解决的问题：路由、拥塞控制、异构网络互联 数据链路层 将一个原始的传输设施转变成一条没有漏检传输错误的线路。解决的问题：数据帧、流量控制、信道共享 物理层 关注在一条通信信道中传输原始比特。解决的问题：1，0的表示、比特维持时间、是否双向同时传输、连接建立，撤销、物理传输介质等 "},{"title":"mysql的自动类型转换","date":"2020-07-21T16:00:00.000Z","url":"/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","tags":[["mysql","/tags/mysql/"]],"categories":[["工具","/categories/%E5%B7%A5%E5%85%B7/"]],"content":"小特性 在查询语句的条件判断子句中，如果等号左右两边的类型不同，则会自动进行类型转换。以如下数据表为例 DVWA的user表👆 在进行以下查询时结果如图： 通过上面几个查询的例子可以看到，mysql查询语句的条件判断中，像user_id = ‘xxx’ 这种条件，user_id 是整型，而 ‘xxx’ 是字符串型，在判断时，'xxx’会被当作一个整型与 user_id进行比较。 而转换的规则也很有意思。 ‘1 and 1=1’ 被当作 1 ‘1 and 1=2’ 也被当作1 ‘2 and 1=1’ 被当作2 经过更多的测试可以发现 这个字符串（不论是单引号或者是双引号）在被当作整型数进行处理的时候 如果第一个字符不是数字，那么该字符串被当成0来处理； 如果第一个字符是数字，那么这个字符串就等于从第一个字符开始的数字串 比如：‘4gsb’ = 4；‘108hh’ = 108"},{"title":"dark web","date":"2020-07-20T16:00:00.000Z","url":"/2020/07/21/%E6%9D%82%E8%AE%B0/dark_web/","tags":[["暗网","/tags/%E6%9A%97%E7%BD%91/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"Please enter the password to read the blog. Decrypt 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 "},{"title":"docker常用命令","date":"2020-07-19T16:00:00.000Z","url":"/2020/07/20/%E5%B7%A5%E5%85%B7/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","tags":[["docker","/tags/docker/"]],"categories":[["工具","/categories/%E5%B7%A5%E5%85%B7/"]],"content":"镜像管理 配置镜像仓库的国内加速地址 从云端镜像仓库获取新镜像 容器管理 从镜像创建并运行一个新容器 管理已创建的容器 Docker Compose 使用 Docker Compose 可以很方便地定义和运行多容器应用程序，通过yml文件即可进行配置。 "},{"title":"MS17-010漏洞复现","date":"2020-07-17T16:00:00.000Z","url":"/2020/07/18/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/","tags":[["漏洞复现","/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"]],"categories":[["漏洞研究","/categories/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"]],"content":"Please enter the password to read the blog. Decrypt  "},{"title":"Java-GUI编程","date":"2020-07-09T16:00:00.000Z","url":"/2020/07/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-GUI%E7%BC%96%E7%A8%8B/","tags":[["Java","/tags/Java/"],["GUI","/tags/GUI/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"swing JFrame – java的GUI程序的基本思路是以JFrame为基础，它是屏幕上window的对象，能够最大化、最小化、关闭。 JPanel – Java图形用户界面(GUI)工具包swing中的面板容器类，包含在javax.swing 包中，可以进行嵌套，功能是对窗体中具有相同逻辑功能的组件进行组合，是一种轻量级容器，可以加入到JFrame窗体中。 JLabel – JLabel 对象可以显示文本、图像或同时显示二者。可以通过设置垂直和水平对齐方式，指定标签显示区中标签内容在何处对齐。默认情况下，标签在其显示区内垂直居中对齐。默认情况下，只显示文本的标签是开始边对齐；而只显示图像的标签则水平居中对齐。 JTextField –一个轻量级组件，它允许编辑单行文本。 JPasswordField – 允许我们输入一行字，像输入框，但隐藏输入字符为星号(*)。 JButton – JButton 类的实例。用于创建按钮类似实例中的 “Login”。"},{"title":"Java-网络编程","date":"2020-07-07T16:00:00.000Z","url":"/2020/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/","tags":[["Java","/tags/Java/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"SOCKET 定义：socket即套接字，由 ip 地址和端口号两个部分组成 "},{"title":"Windows内存扫描器的设计和实现","date":"2020-06-18T16:00:00.000Z","url":"/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/","tags":[["操作系统","/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"],["小工具","/tags/%E5%B0%8F%E5%B7%A5%E5%85%B7/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"程序目标 利用Windows系统提供的接口读取内存数据； 对获取的数据进行分析，包括内存结构、进程链表、页目录表结构和进程信息； 实现物理内存内容的定位功能，能快速回到物理内存的起始地址或结束地址； 实现物理内存数据修改功能，并展示内存数据修改后的结果； 总体设计 程序预期包含四个功能，每个功能由一个程序模块实现。如下图，程序运行时首先调用getSystemInfo函数获取系统及内存基本信息，再执行getProcessInfo函数获取当前正在运行的所有进程及其对应pid，用户输入进程pid选择要扫描的进程后，调用getMemoryBlock扫描该进程使用的内存，逐一打印内存块信息（起始地址、内存块大小、内存块状态、访问权限等），打印完成后用户选择查询内存内容或者修改内存内容，这两个功能分别由SearchProcessMemory和ModifyProcessMemory实现。 详细设计与实现 数据结构设计 SYSTEM_INFO（操作系统信息） MEMORYSTATUS（内存统计信息） PROCESSENTRY32（进程快照信息），用于获取正在运行的所有进程的信息 MEMORY_BASIC_INFORMATION32（内存块信息） 程序模块设计 getSystemInfo GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)、GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer)两个Windows提供的API可以分别获取系统信息和系统内存信息，在该模块中只要调用两个API后再打印结构体信息即可。 getProcessInfo 首先调用CreateToolhelp32Snapshot函数获取进程列表快照的句柄，然后遍历进程快照，轮流显示每个进程的信息（PID、进程名、线程数等）。 getMemoryBlock 调用OpenProcess()获取想要访问的进程的句柄，循环调用VirtualQueryEx()函数，将返回的MEMORY_BASIC_INFORMATION数据结构保存到列表中，循环遍历列表，打印各个内存块的基本信息。 SearchProcessMemory 循环遍历存有内存块信息的列表MemList，选择状态为MEM_COMMIT的内存块（这些内存块中的数据值是有效的），再通过ReadProcessMemory()访问该内存区域，遍历该区域，将值为我们查找的内容的内存地址加入列表AddrList。最后将AddList中的地址打印出来。 ModifyProcessMemory 首先通过OpenProcess()获取进程句柄，需要注意的是，在打开进程时要选择获取所有控制权限，否则可能因为权限过低而无法进行内存的修改。VirtualProtectEx()修改内存块的保护模式，然后通过WriteProcessMemory()写入内存块具体位置的值，最后再次调用VirtualProtectEx()还原内存块的保护模式。 程序运行效果 运行环境：Windows 7 x64 程序运行界面如图 我们选择要打开的进程，以helloworld测试程序test.exe（PID为1500）为例（系统进程所需权限较高，会打开失败）： 可以看到，成功打开进程后，打印了进程使用的内存块信息，打印完成后选择要执行的功能。以下分别演示内存查询和内存修改。 可以查到存储的值为123456的内存地址有四个。接下来将其中一个的值修改为234567. 源代码 readMemory.cpp "},{"title":"指令集和操作系统位数","date":"2020-06-09T16:00:00.000Z","url":"/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%8D%E6%95%B0/","tags":[["操作系统","/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"指令集 为了提高编写和运行程序的效率，将一些较为常用的指令（如积分，微分，乘除法等）写成一套标准的程序，即指令集。 X86和ARM 完整的，复杂的指令集称作CISC (Complex Instruction Set Computing)，在复杂指令集中许多运算是不常用的，让CPU支持所有指令是对晶体管的严重浪费，所以亨尼西和帕特森等人提出了一种更加简单的指令集，叫做精简指令集RISC (Reduced Instruction Set Computing) X86是英特尔推出的一种CPU架构，采用复杂指令集CISC ARM是acorn公司设计的CPU架构，采用精简指令集RISC 操作系统位数 首先明确CPU位数的概念，CPU位数即CPU在一个时钟周期内能够处理的二进制串的位数，也是CPU寄存器的位数。目前64位的CPU是主流。 而操作系统位数即操作系统所依赖的指令集位数，可以理解为：32位的操作系统假定CPU是32位的，64位操作系统则假定CPU是64位的。所以，64位CPU的主机可以安装64位和32位甚至更低位数的操作系统，而32位CPU的主机只能安装32位及以下的操作系统（即向下兼容）。"},{"title":"ACTF校赛WriteUp","date":"2020-06-04T16:00:00.000Z","url":"/2020/06/05/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/ACTF%E6%A0%A1%E8%B5%9BWriteUp/","tags":[["CTF","/tags/CTF/"],["WriteUp","/tags/WriteUp/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"Please enter the password to read the blog. Decrypt  "},{"title":"Java-异常及处理","date":"2020-05-15T16:00:00.000Z","url":"/2020/05/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%A4%84%E7%90%86/","tags":[["Java","/tags/Java/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"分类 异常的处理 向上抛出（throws+异常类型） 不处理异常，将异常抛出给调用者。 throw 、throws （挖坑待填） 就地捕获（try-catch-finally） 当程序发生异常时，系统捕获异常，转而执行异常处理代码。 可能出现异常的代码用try块括起来 用catch块来捕获异常并处理异常 一些不论是否出现异常都需要执行的代码，用finally块括起来，使其一定会被执行 代码执行过程的三种情况 try代码块中无异常，try代码执行完成，则不进入不执行catch(跳过)，执行finally块，及异常块后的其他代码other code； try代码块中发生异常，try代码执行到有异常处即之后中断，产生异常对象(跟踪堆栈,执行流程)，进入catch块(异常类型匹配后处理)，后执行finally块，及异常块后的其他代码other code； try代码块中发生异常，产生异常对象，异常类型不匹配，或者不捕获，程序中断运行(不用try和catch块进行处理，代码在异常出停止)； finally块语句唯一不执行的情况：异常处理代码catch中执行System.exit(1)退出Java虚拟机 ； 一段代码可能会发生多种类型的异常，当发生异常，会按顺序查看每个catch语句，并执行第一个与异常类型匹配的catch块，执行后，其他的catch语句将忽略，执行继续执行finally块，及异常块后的其他代码other code。 "},{"title":"Ubuntu (20.04)虚拟机安装配置","date":"2020-05-11T16:00:00.000Z","url":"/2020/05/12/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/Ubuntu%20(20.04)%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","tags":[["系统配置","/tags/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"VMWare 安装Ubuntu系统时一般会默认使用简易安装，会有一个安装open-vm-tools的过程，如果在这里卡了很长时间，可以尝试关闭虚拟机再重新启动，完成安装过程 换源 Ubuntu安装好之后首先要做的就是换源，需要特别注意的一点是不要随便从一篇博客里复制粘贴源的地址到/etc/apt/sources.list，因为每个不同版本的Ubuntu分别有自己的代号，源链接不同，需要自己去官网找。 参考： 安装中文输入法 设置-&gt;区域和语言-&gt;管理已安装的语言 弹出语言支持的窗口，选择添加或删除语言，找到中文简体，应用，然后设置地区格式，应用后关闭该窗口。 回到区域和语言，设置格式为中国，然后注销，重新登陆，再次打开这个界面就可以添加中文输入法了。"},{"title":"Java-抽象类和接口","date":"2020-04-26T16:00:00.000Z","url":"/2020/04/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/","tags":[["Java","/tags/Java/"]],"categories":[["计算机基础","/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"]],"content":"抽象类 作用：主要起到一个模板的作用，抽象类中的抽象方法必须被子类实现，这样就可以使用一个统一的方法名来调用子类方法。 抽象类无法直接创建对象，必须被继承；抽象方法也必须在子类中被重写。 抽象类中的方法可以是非抽象的（即可以有方法体），但即使类中没有抽象方法，抽象类也无法被实例化；反过来，如果一个类中有抽象方法，那么这个类必须声明为抽象类。 抽象方法没有方法体。 关键字：abstract 接口 接口和抽象类有点像，它是抽象方法的集合； 一个类只能继承自一个父类，但是可以实现多个接口。间接实现了多继承； 另外接口中可以有有成员变量，但默认都是 public static final的，这三个关键字可以省略； 接口中的方法默认都是抽象的（即不能有方法体），定义时可以不写abstract，实现接口的类必须实现接口中定义的所有方法，否则该类必须为抽象类。 声明 关键字：interface 实现 关键字：implements "},{"title":"kali(Debian)虚拟机的网络配置","date":"2020-04-22T16:00:00.000Z","url":"/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/","tags":[["系统配置","/tags/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"网卡配置 首先将虚拟机设置中的网络连接设置为桥接模式，这样虚拟网卡直接和宿主机的物理网卡桥接，这个虚拟机就可以视为和宿主机在同一局域网中（双绞线连接），方便将来的测试。 然后打开虚拟网络编辑器，点击右下方的更改设置 将红框部分改为你的物理网卡名称（可以在网络和共享中心-更改网络适配器中查看），如果找不到的话也可以保留自动选项，只不过这样的话后面如果把ip设置成静态的可能无法ping通外网。 接下来进入虚拟机，ifconfig 查看IP地址，子网掩码，网关 然后配置网卡eth0 若要设置IP为静态的，则插入以下几行 若设置为动态分配IP，则改为插入以下两行，这样设置重启后IP地址改变，需要自己注意 :wq保存退出之后，重启网卡 然后ping www.baidu.com测试是否正常连接，再ping一下主机ip看是否成功。 若主机能够ping通虚拟机，而虚拟机ping不通主机，则可能是被主机的防火墙拦截了，具体可以查看 到这里，主机和虚拟机能互相ping通，则网卡设置完成☺️ SSH配置 一般来说，kali默认已经安装了SSH 首先查看SSH状态 如图所示，表示ssh服务已启动，若没有，则尝试手动启动 然后修改sshd_config 找到#PasswordAuthentication no,把注释去掉，再把no改成yes 找到#PermitRootLogin yes,去掉注释 保存退出。 重启SSH服务 要使ssh开机启动，命令为： 代理设置 虚拟机想要连接外网，同样需要网络代理。如果宿主机已配置代理，那么直接让虚拟机连接主机代理上网即可。 已v2ray为例，在参数设置-v2rayN设置中勾选允许来自局域网的连接。 确定保存后，在v2ray界面底部查看代理地址 返回虚拟机，设置-网络-网络代理-手动，填写你的v2ray代理地址 最后设置浏览器代理为系统代理即可。 开启主机代理之后，虚拟机访问所有网站都会经过主机的代理服务器，所以在访问国内网站时可能速度较慢。"},{"title":"正则表达式笔记","date":"2020-04-18T08:35:13.000Z","url":"/2020/04/18/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/","tags":[["正则表达式","/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"]],"categories":[["工具","/categories/%E5%B7%A5%E5%85%B7/"]],"content":"简介 正则表达式是描述一组字符串特征的模式，用来匹配特定的字符串。 ——Ken Thompson 一个正则表达式是一串特殊的字符串，它可以用于匹配一组字符串。比如 就是一个简单的正则表达式，它可以用来匹配0~9范围内的任意一个数字。 而上面这个式子也是一个正则表达式，只不过复杂了一些，它可以匹配10位的北美电话号码。无论区号是否加括号，数字间是否有句点或连字符，它都可以匹配。 学习时用到的工具： Regexpal网站：可以在线测试正则表达式 基础 字符的匹配 字面值匹配 最简单的一种，比如一个数字字符串666，可以在目标文本中匹配所有的666 字符组匹配 正则表达式将方括号[]视为特殊的元字符，因此方括号本身不参与匹配，而对括号内容进行匹配。字符组包括以下几种情况： [aBc]：匹配a,B,c三个字符中的其中一个 [0-9]：匹配0到9范围内的任意数字。要匹配任意3位数字可以用 [0-9][0-9][0-9] [a-z]：匹配所有小写字母 [A-Z]：匹配所有大写字母 [a-zA-Z]：匹配所有大小写字母 [^ARP]：匹配除了A,R,P以外的所有字符 [^a-z]：匹配所有除了小写字母以外的字符 字符组简写式（元字符） 例如：[0-9]可以简写为\\d，它们都能匹配0到9之间的任意一个数字。 空白字符： \\f：换页符 \\n：换行符 \\r：回车符 \\t：制表符（Tab的缩进） \\v：垂直制表符 \\s：任意一个空白字符，等价于 [\\f\\n\\r\\t\\v] \\S：对\\s取非，即任意非空字符 数字元字符： \\d：匹配任意阿拉伯数字 \\D：匹配任意非数字字符（如连字符-) 字母数字元字符： \\w：大小写字母，下划线和数字，等价于[a-zA-Z0-9] \\W：对\\w取非 任意字符的匹配 .：点号（英文句号）可以匹配任意字符（但一般不匹配换行符）。 .是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \\ 进行转义，即在 . 前面加上 \\ 。 捕获分组和后向引用 将\\d放到()中，则\\d匹配到一个数字的同时该数字被捕获。捕获之后则可以被后向引用。 \\1后向引用被捕获的字符。 例如：正则表达式 (\\d)\\d\\1 可以匹配 101 或者 212 , 383 等等,但无法匹配 102 。因为\\1引用的是那个被捕获的字符，所以这个正则表达式匹配到的一定是某三个相连数字，其中第一个数字和第三个数字一定是相同的。 量词 \\d{3}匹配三个相连数字，这里{3}就是一个量词，花括号中可以有多个数字（用逗号,隔开）比如{3,4}表示3个或者4个； \\d-?匹配一个数字，如果该数字之后跟着一个连字符那么连字符也会被匹配到。这里的?也是一个量词，表示0个或1个； 同理，其他常用的量词还有 +：表示1个或者多个 *：表示0个或者多个 括选文字符 现在可以看看下面这个比较健壮的表达式了，就是简介中的那个，它匹配10位的北美电话号码 ^匹配行起始位置，即^后面跟着的内容(\\(\\d{3}\\)|^\\d{3}[.-]?)必须出现在行首； \\(和\\)就是将左右括号转义，让它表示其字面意思，而不是捕获分组的开始结束标志； |表示或运算，即匹配|两边的内容之一； [.-]匹配一个可选的点号（这里点号不再匹配任意字符）或连字符； $匹配行的结束标志 这个表达式最终匹配十位的北美电话号码，而且括号、连字符或者点号都是可选的。你可以试试不同格式的电话号码，看看它能否匹配。以上正则表达式中的捕获分组并不是必需的。分组是必要的，但是捕获不需要。更好的方法是使用非捕获分组。 模式匹配 留坑待填"},{"title":"在Markdown中使用emoji表情","date":"2020-04-07T13:25:36.000Z","url":"/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%9C%A8Markdown%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/","tags":[["Markdown","/tags/Markdown/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"常用emoji 理想情况下，在Markdown编辑器中输入如上图所示的语句后将显示对应的emoji表情。但实际上是否显示则取决于你的markdown解析器。 hexo博客使用emoji hexo 框架默认的markdown解析器是hexo-renderer-marked，并不支持emoji表情的解析。所以如果想要在博客文章里添加emoji表情😮，可以考虑使用hexo-renderer-markdown-it 解析器。 首先打开Node.js的命令行并移动到你的博客根目录下 卸载原有的hexo-renderer-marked： 再安装hexo-renderer-markdown-it ： 完成之后安装所需的插件： 最后打开根目录下的_config.yml文件，添加以下配置： 然后保存退出，再重新加载一下hexo即可。 参考来源： ZucchinY的博客"},{"title":"hexo博客搭建","date":"2020-04-06T16:00:00.000Z","url":"/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","tags":[["系统配置","/tags/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"安装配置 node.js  npm to cnpm  安装配置 Git  安装完成即可，ssh配置可以跳过 安装 hexo 建一个博客根目录，以管理员身份运行powershell并cd到博客根目录 "},{"title":"At the very beginning","date":"2020-04-05T16:00:00.000Z","url":"/2020/04/06/%E6%9D%82%E8%AE%B0/Beginning/","tags":[["关于我","/tags/%E5%85%B3%E4%BA%8E%E6%88%91/"]],"categories":[["杂记","/categories/%E6%9D%82%E8%AE%B0/"]],"content":"为什么写博客 最开始，是看到周围厉害的同学都在写，也就跟风用Hexo和GitHub Page搭了一个博客，显得好像自己也在“厉害的人”的范畴里。后来越来越明白，真正让厉害的人成为厉害的人的，是其学习后输出的东西，而非博客平台本身。所以现在我把博客当做自己的笔记本，让自己的所思所学有一个可以记录的地方，也希望能给别人带来一些帮助。 关于我 一个对网络安全初窥门径的人，偶尔会心血来潮想要写写代码。 邮箱：dawnyh@qq.com，欢迎交流 ~"},{"title":"search","date":"2023-01-14T10:20:31.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"categories","date":"2023-01-14T10:25:20.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"friends","date":"2023-01-14T11:00:17.365Z","url":"/friends/index.html","categories":[[" ",""]]},{"title":"tags","date":"2023-01-14T10:24:54.000Z","url":"/tags/index.html","categories":[[" ",""]]}]